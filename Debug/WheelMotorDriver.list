
WheelMotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003e9c  08003e9c  00013e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003f78  08003f78  00013f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003f80  08003f80  00013f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003f84  08003f84  00013f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000008  20000000  08003f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  8 .bss          00003ee0  20000008  20000008  00020008  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003ee8  20003ee8  00020008  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002490f  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000493a  00000000  00000000  00044947  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000a7be  00000000  00000000  00049281  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f60  00000000  00000000  00053a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001390  00000000  00000000  000549a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008f54  00000000  00000000  00055d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005edf  00000000  00000000  0005ec84  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00064b63  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002d20  00000000  00000000  00064be0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000008 	.word	0x20000008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e84 	.word	0x08003e84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	08003e84 	.word	0x08003e84

080001d0 <__aeabi_ldivmod>:
 80001d0:	b97b      	cbnz	r3, 80001f2 <__aeabi_ldivmod+0x22>
 80001d2:	b972      	cbnz	r2, 80001f2 <__aeabi_ldivmod+0x22>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bfbe      	ittt	lt
 80001d8:	2000      	movlt	r0, #0
 80001da:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001de:	e006      	blt.n	80001ee <__aeabi_ldivmod+0x1e>
 80001e0:	bf08      	it	eq
 80001e2:	2800      	cmpeq	r0, #0
 80001e4:	bf1c      	itt	ne
 80001e6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001ea:	f04f 30ff 	movne.w	r0, #4294967295
 80001ee:	f000 b9c5 	b.w	800057c <__aeabi_idiv0>
 80001f2:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fa:	2900      	cmp	r1, #0
 80001fc:	db09      	blt.n	8000212 <__aeabi_ldivmod+0x42>
 80001fe:	2b00      	cmp	r3, #0
 8000200:	db1a      	blt.n	8000238 <__aeabi_ldivmod+0x68>
 8000202:	f000 f84d 	bl	80002a0 <__udivmoddi4>
 8000206:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020e:	b004      	add	sp, #16
 8000210:	4770      	bx	lr
 8000212:	4240      	negs	r0, r0
 8000214:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000218:	2b00      	cmp	r3, #0
 800021a:	db1b      	blt.n	8000254 <__aeabi_ldivmod+0x84>
 800021c:	f000 f840 	bl	80002a0 <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4240      	negs	r0, r0
 800022c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000230:	4252      	negs	r2, r2
 8000232:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000236:	4770      	bx	lr
 8000238:	4252      	negs	r2, r2
 800023a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800023e:	f000 f82f 	bl	80002a0 <__udivmoddi4>
 8000242:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000246:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024a:	b004      	add	sp, #16
 800024c:	4240      	negs	r0, r0
 800024e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000252:	4770      	bx	lr
 8000254:	4252      	negs	r2, r2
 8000256:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025a:	f000 f821 	bl	80002a0 <__udivmoddi4>
 800025e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000266:	b004      	add	sp, #16
 8000268:	4252      	negs	r2, r2
 800026a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026e:	4770      	bx	lr

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x30>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800058a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000592:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800059a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059c:	2003      	movs	r0, #3
 800059e:	f000 f817 	bl	80005d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f003 fb8a 	bl	8003cbc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005a8:	f003 fb58 	bl	8003c5c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80005ac:	2000      	movs	r0, #0
 80005ae:	bd08      	pop	{r3, pc}
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005b4:	4a02      	ldr	r2, [pc, #8]	; (80005c0 <HAL_IncTick+0xc>)
 80005b6:	6813      	ldr	r3, [r2, #0]
 80005b8:	3301      	adds	r3, #1
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20003dac 	.word	0x20003dac

080005c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005c4:	4b01      	ldr	r3, [pc, #4]	; (80005cc <HAL_GetTick+0x8>)
 80005c6:	6818      	ldr	r0, [r3, #0]
}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20003dac 	.word	0x20003dac

080005d0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005d2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005d8:	041b      	lsls	r3, r3, #16
 80005da:	0c1b      	lsrs	r3, r3, #16
 80005dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005e0:	0200      	lsls	r0, r0, #8
 80005e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ea:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005ec:	60d3      	str	r3, [r2, #12]
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005f6:	b530      	push	{r4, r5, lr}
 80005f8:	68dc      	ldr	r4, [r3, #12]
 80005fa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005fe:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000602:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000604:	2b04      	cmp	r3, #4
 8000606:	bf28      	it	cs
 8000608:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060c:	f04f 0501 	mov.w	r5, #1
 8000610:	fa05 f303 	lsl.w	r3, r5, r3
 8000614:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000618:	bf8c      	ite	hi
 800061a:	3c03      	subhi	r4, #3
 800061c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800061e:	4019      	ands	r1, r3
 8000620:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000622:	fa05 f404 	lsl.w	r4, r5, r4
 8000626:	3c01      	subs	r4, #1
 8000628:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800062a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	ea42 0201 	orr.w	r2, r2, r1
 8000630:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000634:	bfaf      	iteee	ge
 8000636:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063a:	f000 000f 	andlt.w	r0, r0, #15
 800063e:	4b06      	ldrlt	r3, [pc, #24]	; (8000658 <HAL_NVIC_SetPriority+0x64>)
 8000640:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000642:	bfa5      	ittet	ge
 8000644:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000648:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	bf00      	nop
 8000654:	e000ed00 	.word	0xe000ed00
 8000658:	e000ed14 	.word	0xe000ed14

0800065c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800065c:	0942      	lsrs	r2, r0, #5
 800065e:	2301      	movs	r3, #1
 8000660:	f000 001f 	and.w	r0, r0, #31
 8000664:	fa03 f000 	lsl.w	r0, r3, r0
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <HAL_NVIC_EnableIRQ+0x14>)
 800066a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800066e:	4770      	bx	lr
 8000670:	e000e100 	.word	0xe000e100

08000674 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000674:	3801      	subs	r0, #1
 8000676:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800067a:	d20a      	bcs.n	8000692 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	4a07      	ldr	r2, [pc, #28]	; (800069c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000680:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	21f0      	movs	r1, #240	; 0xf0
 8000684:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000688:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800068a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800068c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000692:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000e010 	.word	0xe000e010
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006a2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006a4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006a6:	bf0c      	ite	eq
 80006a8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006ac:	f022 0204 	bicne.w	r2, r2, #4
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	4770      	bx	lr
 80006b4:	e000e010 	.word	0xe000e010

080006b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006bc:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006be:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000870 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006c4:	4a68      	ldr	r2, [pc, #416]	; (8000868 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006c6:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000874 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ca:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006cc:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006ce:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006d4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006dc:	45b6      	cmp	lr, r6
 80006de:	f040 80ae 	bne.w	800083e <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006e2:	684c      	ldr	r4, [r1, #4]
 80006e4:	f024 0710 	bic.w	r7, r4, #16
 80006e8:	2f02      	cmp	r7, #2
 80006ea:	d116      	bne.n	800071a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80006ec:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006f0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006f4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006f8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006fc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000700:	f04f 0c0f 	mov.w	ip, #15
 8000704:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000708:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800070c:	690d      	ldr	r5, [r1, #16]
 800070e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000712:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000716:	f8ca 5020 	str.w	r5, [sl, #32]
 800071a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800071e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000720:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000724:	fa05 f50a 	lsl.w	r5, r5, sl
 8000728:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800072a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800072e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000732:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000736:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000738:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800073c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800073e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000742:	d811      	bhi.n	8000768 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000744:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000746:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800074a:	68cf      	ldr	r7, [r1, #12]
 800074c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000750:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000754:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000756:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000758:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800075c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000760:	409f      	lsls	r7, r3
 8000762:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000766:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000768:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800076a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800076c:	688f      	ldr	r7, [r1, #8]
 800076e:	fa07 f70a 	lsl.w	r7, r7, sl
 8000772:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000774:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000776:	00e5      	lsls	r5, r4, #3
 8000778:	d561      	bpl.n	800083e <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	f04f 0b00 	mov.w	fp, #0
 800077e:	f8cd b00c 	str.w	fp, [sp, #12]
 8000782:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000786:	4d39      	ldr	r5, [pc, #228]	; (800086c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000788:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800078c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000790:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000794:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000798:	9703      	str	r7, [sp, #12]
 800079a:	9f03      	ldr	r7, [sp, #12]
 800079c:	f023 0703 	bic.w	r7, r3, #3
 80007a0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007a4:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007a8:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007ac:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007b0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007b4:	f04f 0e0f 	mov.w	lr, #15
 80007b8:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007bc:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007be:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007c2:	d043      	beq.n	800084c <HAL_GPIO_Init+0x194>
 80007c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c8:	42a8      	cmp	r0, r5
 80007ca:	d041      	beq.n	8000850 <HAL_GPIO_Init+0x198>
 80007cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007d0:	42a8      	cmp	r0, r5
 80007d2:	d03f      	beq.n	8000854 <HAL_GPIO_Init+0x19c>
 80007d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007d8:	42a8      	cmp	r0, r5
 80007da:	d03d      	beq.n	8000858 <HAL_GPIO_Init+0x1a0>
 80007dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007e0:	42a8      	cmp	r0, r5
 80007e2:	d03b      	beq.n	800085c <HAL_GPIO_Init+0x1a4>
 80007e4:	4548      	cmp	r0, r9
 80007e6:	d03b      	beq.n	8000860 <HAL_GPIO_Init+0x1a8>
 80007e8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007ec:	42a8      	cmp	r0, r5
 80007ee:	d039      	beq.n	8000864 <HAL_GPIO_Init+0x1ac>
 80007f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f4:	42a8      	cmp	r0, r5
 80007f6:	bf14      	ite	ne
 80007f8:	2508      	movne	r5, #8
 80007fa:	2507      	moveq	r5, #7
 80007fc:	fa05 f50c 	lsl.w	r5, r5, ip
 8000800:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000804:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000806:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000808:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800080a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800080e:	bf0c      	ite	eq
 8000810:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000812:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000814:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000816:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000818:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800081c:	bf0c      	ite	eq
 800081e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000820:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000822:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000824:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000826:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800082a:	bf0c      	ite	eq
 800082c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800082e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000830:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000832:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000834:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000836:	bf54      	ite	pl
 8000838:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800083a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800083c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800083e:	3301      	adds	r3, #1
 8000840:	2b10      	cmp	r3, #16
 8000842:	f47f af44 	bne.w	80006ce <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000846:	b005      	add	sp, #20
 8000848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800084c:	465d      	mov	r5, fp
 800084e:	e7d5      	b.n	80007fc <HAL_GPIO_Init+0x144>
 8000850:	2501      	movs	r5, #1
 8000852:	e7d3      	b.n	80007fc <HAL_GPIO_Init+0x144>
 8000854:	2502      	movs	r5, #2
 8000856:	e7d1      	b.n	80007fc <HAL_GPIO_Init+0x144>
 8000858:	2503      	movs	r5, #3
 800085a:	e7cf      	b.n	80007fc <HAL_GPIO_Init+0x144>
 800085c:	2504      	movs	r5, #4
 800085e:	e7cd      	b.n	80007fc <HAL_GPIO_Init+0x144>
 8000860:	2505      	movs	r5, #5
 8000862:	e7cb      	b.n	80007fc <HAL_GPIO_Init+0x144>
 8000864:	2506      	movs	r5, #6
 8000866:	e7c9      	b.n	80007fc <HAL_GPIO_Init+0x144>
 8000868:	40013c00 	.word	0x40013c00
 800086c:	40020000 	.word	0x40020000
 8000870:	40023800 	.word	0x40023800
 8000874:	40021400 	.word	0x40021400

08000878 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000878:	b10a      	cbz	r2, 800087e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800087a:	6181      	str	r1, [r0, #24]
 800087c:	4770      	bx	lr
 800087e:	0409      	lsls	r1, r1, #16
 8000880:	e7fb      	b.n	800087a <HAL_GPIO_WritePin+0x2>

08000882 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000882:	4770      	bx	lr

08000884 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000884:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000888:	6959      	ldr	r1, [r3, #20]
 800088a:	4201      	tst	r1, r0
 800088c:	d002      	beq.n	8000894 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800088e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000890:	f7ff fff7 	bl	8000882 <HAL_GPIO_EXTI_Callback>
 8000894:	bd08      	pop	{r3, pc}
 8000896:	bf00      	nop
 8000898:	40013c00 	.word	0x40013c00

0800089c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800089c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800089e:	4604      	mov	r4, r0
 80008a0:	b910      	cbnz	r0, 80008a8 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 80008a2:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80008a4:	b003      	add	sp, #12
 80008a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008a8:	6803      	ldr	r3, [r0, #0]
 80008aa:	07d8      	lsls	r0, r3, #31
 80008ac:	d43b      	bmi.n	8000926 <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008ae:	6823      	ldr	r3, [r4, #0]
 80008b0:	0799      	lsls	r1, r3, #30
 80008b2:	f100 8084 	bmi.w	80009be <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008b6:	6823      	ldr	r3, [r4, #0]
 80008b8:	071e      	lsls	r6, r3, #28
 80008ba:	f100 80c6 	bmi.w	8000a4a <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008be:	6823      	ldr	r3, [r4, #0]
 80008c0:	075d      	lsls	r5, r3, #29
 80008c2:	d52a      	bpl.n	800091a <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	4baa      	ldr	r3, [pc, #680]	; (8000b74 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 80008ca:	4dab      	ldr	r5, [pc, #684]	; (8000b78 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80008cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008d2:	641a      	str	r2, [r3, #64]	; 0x40
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80008de:	682b      	ldr	r3, [r5, #0]
 80008e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80008e6:	f7ff fe6d 	bl	80005c4 <HAL_GetTick>
 80008ea:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80008ec:	682b      	ldr	r3, [r5, #0]
 80008ee:	05da      	lsls	r2, r3, #23
 80008f0:	f140 80cd 	bpl.w	8000a8e <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008f4:	68a3      	ldr	r3, [r4, #8]
 80008f6:	4d9f      	ldr	r5, [pc, #636]	; (8000b74 <HAL_RCC_OscConfig+0x2d8>)
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	f040 80cf 	bne.w	8000a9c <HAL_RCC_OscConfig+0x200>
 80008fe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000906:	f7ff fe5d 	bl	80005c4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800090a:	4d9a      	ldr	r5, [pc, #616]	; (8000b74 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 800090c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800090e:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000912:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000914:	079b      	lsls	r3, r3, #30
 8000916:	f140 80e2 	bpl.w	8000ade <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800091a:	69a2      	ldr	r2, [r4, #24]
 800091c:	2a00      	cmp	r2, #0
 800091e:	f040 80e5 	bne.w	8000aec <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 8000922:	2000      	movs	r0, #0
 8000924:	e7be      	b.n	80008a4 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000926:	4b93      	ldr	r3, [pc, #588]	; (8000b74 <HAL_RCC_OscConfig+0x2d8>)
 8000928:	689a      	ldr	r2, [r3, #8]
 800092a:	f002 020c 	and.w	r2, r2, #12
 800092e:	2a04      	cmp	r2, #4
 8000930:	d007      	beq.n	8000942 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000932:	689a      	ldr	r2, [r3, #8]
 8000934:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000938:	2a08      	cmp	r2, #8
 800093a:	d10a      	bne.n	8000952 <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	025a      	lsls	r2, r3, #9
 8000940:	d507      	bpl.n	8000952 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000942:	4b8c      	ldr	r3, [pc, #560]	; (8000b74 <HAL_RCC_OscConfig+0x2d8>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	039b      	lsls	r3, r3, #14
 8000948:	d5b1      	bpl.n	80008ae <HAL_RCC_OscConfig+0x12>
 800094a:	6863      	ldr	r3, [r4, #4]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d1ae      	bne.n	80008ae <HAL_RCC_OscConfig+0x12>
 8000950:	e7a7      	b.n	80008a2 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000952:	6863      	ldr	r3, [r4, #4]
 8000954:	4d87      	ldr	r5, [pc, #540]	; (8000b74 <HAL_RCC_OscConfig+0x2d8>)
 8000956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800095a:	d111      	bne.n	8000980 <HAL_RCC_OscConfig+0xe4>
 800095c:	682b      	ldr	r3, [r5, #0]
 800095e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000962:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000964:	f7ff fe2e 	bl	80005c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000968:	4d82      	ldr	r5, [pc, #520]	; (8000b74 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 800096a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800096c:	682b      	ldr	r3, [r5, #0]
 800096e:	039f      	lsls	r7, r3, #14
 8000970:	d49d      	bmi.n	80008ae <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000972:	f7ff fe27 	bl	80005c4 <HAL_GetTick>
 8000976:	1b80      	subs	r0, r0, r6
 8000978:	2864      	cmp	r0, #100	; 0x64
 800097a:	d9f7      	bls.n	800096c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 800097c:	2003      	movs	r0, #3
 800097e:	e791      	b.n	80008a4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000984:	d104      	bne.n	8000990 <HAL_RCC_OscConfig+0xf4>
 8000986:	682b      	ldr	r3, [r5, #0]
 8000988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800098c:	602b      	str	r3, [r5, #0]
 800098e:	e7e5      	b.n	800095c <HAL_RCC_OscConfig+0xc0>
 8000990:	682a      	ldr	r2, [r5, #0]
 8000992:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000996:	602a      	str	r2, [r5, #0]
 8000998:	682a      	ldr	r2, [r5, #0]
 800099a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800099e:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d1df      	bne.n	8000964 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 80009a4:	f7ff fe0e 	bl	80005c4 <HAL_GetTick>
 80009a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009aa:	682b      	ldr	r3, [r5, #0]
 80009ac:	0398      	lsls	r0, r3, #14
 80009ae:	f57f af7e 	bpl.w	80008ae <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009b2:	f7ff fe07 	bl	80005c4 <HAL_GetTick>
 80009b6:	1b80      	subs	r0, r0, r6
 80009b8:	2864      	cmp	r0, #100	; 0x64
 80009ba:	d9f6      	bls.n	80009aa <HAL_RCC_OscConfig+0x10e>
 80009bc:	e7de      	b.n	800097c <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009be:	4b6d      	ldr	r3, [pc, #436]	; (8000b74 <HAL_RCC_OscConfig+0x2d8>)
 80009c0:	689a      	ldr	r2, [r3, #8]
 80009c2:	f012 0f0c 	tst.w	r2, #12
 80009c6:	d007      	beq.n	80009d8 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009ce:	2a08      	cmp	r2, #8
 80009d0:	d112      	bne.n	80009f8 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	0259      	lsls	r1, r3, #9
 80009d6:	d40f      	bmi.n	80009f8 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009d8:	4b66      	ldr	r3, [pc, #408]	; (8000b74 <HAL_RCC_OscConfig+0x2d8>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	0792      	lsls	r2, r2, #30
 80009de:	d503      	bpl.n	80009e8 <HAL_RCC_OscConfig+0x14c>
 80009e0:	68e2      	ldr	r2, [r4, #12]
 80009e2:	2a01      	cmp	r2, #1
 80009e4:	f47f af5d 	bne.w	80008a2 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	6921      	ldr	r1, [r4, #16]
 80009ec:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009f0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009f4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009f6:	e75e      	b.n	80008b6 <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009f8:	68e2      	ldr	r2, [r4, #12]
 80009fa:	4b60      	ldr	r3, [pc, #384]	; (8000b7c <HAL_RCC_OscConfig+0x2e0>)
 80009fc:	b1b2      	cbz	r2, 8000a2c <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 80009fe:	2201      	movs	r2, #1
 8000a00:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a02:	f7ff fddf 	bl	80005c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a06:	4d5b      	ldr	r5, [pc, #364]	; (8000b74 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000a08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a0a:	682b      	ldr	r3, [r5, #0]
 8000a0c:	079b      	lsls	r3, r3, #30
 8000a0e:	d507      	bpl.n	8000a20 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a10:	682b      	ldr	r3, [r5, #0]
 8000a12:	6922      	ldr	r2, [r4, #16]
 8000a14:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a18:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a1c:	602b      	str	r3, [r5, #0]
 8000a1e:	e74a      	b.n	80008b6 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a20:	f7ff fdd0 	bl	80005c4 <HAL_GetTick>
 8000a24:	1b80      	subs	r0, r0, r6
 8000a26:	2802      	cmp	r0, #2
 8000a28:	d9ef      	bls.n	8000a0a <HAL_RCC_OscConfig+0x16e>
 8000a2a:	e7a7      	b.n	800097c <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8000a2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a2e:	f7ff fdc9 	bl	80005c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a32:	4d50      	ldr	r5, [pc, #320]	; (8000b74 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000a34:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a36:	682b      	ldr	r3, [r5, #0]
 8000a38:	079f      	lsls	r7, r3, #30
 8000a3a:	f57f af3c 	bpl.w	80008b6 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a3e:	f7ff fdc1 	bl	80005c4 <HAL_GetTick>
 8000a42:	1b80      	subs	r0, r0, r6
 8000a44:	2802      	cmp	r0, #2
 8000a46:	d9f6      	bls.n	8000a36 <HAL_RCC_OscConfig+0x19a>
 8000a48:	e798      	b.n	800097c <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a4a:	6962      	ldr	r2, [r4, #20]
 8000a4c:	4b4c      	ldr	r3, [pc, #304]	; (8000b80 <HAL_RCC_OscConfig+0x2e4>)
 8000a4e:	b17a      	cbz	r2, 8000a70 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 8000a50:	2201      	movs	r2, #1
 8000a52:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a54:	f7ff fdb6 	bl	80005c4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a58:	4d46      	ldr	r5, [pc, #280]	; (8000b74 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000a5a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a5c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a5e:	0798      	lsls	r0, r3, #30
 8000a60:	f53f af2d 	bmi.w	80008be <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a64:	f7ff fdae 	bl	80005c4 <HAL_GetTick>
 8000a68:	1b80      	subs	r0, r0, r6
 8000a6a:	2802      	cmp	r0, #2
 8000a6c:	d9f6      	bls.n	8000a5c <HAL_RCC_OscConfig+0x1c0>
 8000a6e:	e785      	b.n	800097c <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 8000a70:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a72:	f7ff fda7 	bl	80005c4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a76:	4d3f      	ldr	r5, [pc, #252]	; (8000b74 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000a78:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a7a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a7c:	0799      	lsls	r1, r3, #30
 8000a7e:	f57f af1e 	bpl.w	80008be <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a82:	f7ff fd9f 	bl	80005c4 <HAL_GetTick>
 8000a86:	1b80      	subs	r0, r0, r6
 8000a88:	2802      	cmp	r0, #2
 8000a8a:	d9f6      	bls.n	8000a7a <HAL_RCC_OscConfig+0x1de>
 8000a8c:	e776      	b.n	800097c <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000a8e:	f7ff fd99 	bl	80005c4 <HAL_GetTick>
 8000a92:	1b80      	subs	r0, r0, r6
 8000a94:	2802      	cmp	r0, #2
 8000a96:	f67f af29 	bls.w	80008ec <HAL_RCC_OscConfig+0x50>
 8000a9a:	e76f      	b.n	800097c <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a9c:	2b05      	cmp	r3, #5
 8000a9e:	d104      	bne.n	8000aaa <HAL_RCC_OscConfig+0x20e>
 8000aa0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	672b      	str	r3, [r5, #112]	; 0x70
 8000aa8:	e729      	b.n	80008fe <HAL_RCC_OscConfig+0x62>
 8000aaa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000aac:	f022 0201 	bic.w	r2, r2, #1
 8000ab0:	672a      	str	r2, [r5, #112]	; 0x70
 8000ab2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ab4:	f022 0204 	bic.w	r2, r2, #4
 8000ab8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f47f af23 	bne.w	8000906 <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8000ac0:	f7ff fd80 	bl	80005c4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac4:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ac8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000acc:	0798      	lsls	r0, r3, #30
 8000ace:	f57f af24 	bpl.w	800091a <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ad2:	f7ff fd77 	bl	80005c4 <HAL_GetTick>
 8000ad6:	1b80      	subs	r0, r0, r6
 8000ad8:	42b8      	cmp	r0, r7
 8000ada:	d9f6      	bls.n	8000aca <HAL_RCC_OscConfig+0x22e>
 8000adc:	e74e      	b.n	800097c <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ade:	f7ff fd71 	bl	80005c4 <HAL_GetTick>
 8000ae2:	1b80      	subs	r0, r0, r6
 8000ae4:	42b8      	cmp	r0, r7
 8000ae6:	f67f af14 	bls.w	8000912 <HAL_RCC_OscConfig+0x76>
 8000aea:	e747      	b.n	800097c <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000aec:	4d21      	ldr	r5, [pc, #132]	; (8000b74 <HAL_RCC_OscConfig+0x2d8>)
 8000aee:	68ab      	ldr	r3, [r5, #8]
 8000af0:	f003 030c 	and.w	r3, r3, #12
 8000af4:	2b08      	cmp	r3, #8
 8000af6:	f43f aed4 	beq.w	80008a2 <HAL_RCC_OscConfig+0x6>
 8000afa:	4e22      	ldr	r6, [pc, #136]	; (8000b84 <HAL_RCC_OscConfig+0x2e8>)
 8000afc:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000afe:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b00:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b02:	d12a      	bne.n	8000b5a <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8000b04:	f7ff fd5e 	bl	80005c4 <HAL_GetTick>
 8000b08:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b0a:	682b      	ldr	r3, [r5, #0]
 8000b0c:	0199      	lsls	r1, r3, #6
 8000b0e:	d41e      	bmi.n	8000b4e <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b10:	6a22      	ldr	r2, [r4, #32]
 8000b12:	69e3      	ldr	r3, [r4, #28]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b18:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b1e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b22:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b24:	4c13      	ldr	r4, [pc, #76]	; (8000b74 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b26:	0852      	lsrs	r2, r2, #1
 8000b28:	3a01      	subs	r2, #1
 8000b2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b2e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b30:	2301      	movs	r3, #1
 8000b32:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b34:	f7ff fd46 	bl	80005c4 <HAL_GetTick>
 8000b38:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b3a:	6823      	ldr	r3, [r4, #0]
 8000b3c:	019a      	lsls	r2, r3, #6
 8000b3e:	f53f aef0 	bmi.w	8000922 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b42:	f7ff fd3f 	bl	80005c4 <HAL_GetTick>
 8000b46:	1b40      	subs	r0, r0, r5
 8000b48:	2802      	cmp	r0, #2
 8000b4a:	d9f6      	bls.n	8000b3a <HAL_RCC_OscConfig+0x29e>
 8000b4c:	e716      	b.n	800097c <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b4e:	f7ff fd39 	bl	80005c4 <HAL_GetTick>
 8000b52:	1bc0      	subs	r0, r0, r7
 8000b54:	2802      	cmp	r0, #2
 8000b56:	d9d8      	bls.n	8000b0a <HAL_RCC_OscConfig+0x26e>
 8000b58:	e710      	b.n	800097c <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8000b5a:	f7ff fd33 	bl	80005c4 <HAL_GetTick>
 8000b5e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b60:	682b      	ldr	r3, [r5, #0]
 8000b62:	019b      	lsls	r3, r3, #6
 8000b64:	f57f aedd 	bpl.w	8000922 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b68:	f7ff fd2c 	bl	80005c4 <HAL_GetTick>
 8000b6c:	1b00      	subs	r0, r0, r4
 8000b6e:	2802      	cmp	r0, #2
 8000b70:	d9f6      	bls.n	8000b60 <HAL_RCC_OscConfig+0x2c4>
 8000b72:	e703      	b.n	800097c <HAL_RCC_OscConfig+0xe0>
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40007000 	.word	0x40007000
 8000b7c:	42470000 	.word	0x42470000
 8000b80:	42470e80 	.word	0x42470e80
 8000b84:	42470060 	.word	0x42470060

08000b88 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b88:	4913      	ldr	r1, [pc, #76]	; (8000bd8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b8a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b8c:	688b      	ldr	r3, [r1, #8]
 8000b8e:	f003 030c 	and.w	r3, r3, #12
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	d003      	beq.n	8000b9e <HAL_RCC_GetSysClockFreq+0x16>
 8000b96:	2b08      	cmp	r3, #8
 8000b98:	d003      	beq.n	8000ba2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b9a:	4810      	ldr	r0, [pc, #64]	; (8000bdc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b9c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b9e:	4810      	ldr	r0, [pc, #64]	; (8000be0 <HAL_RCC_GetSysClockFreq+0x58>)
 8000ba0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ba2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ba4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ba6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ba8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bac:	bf14      	ite	ne
 8000bae:	480c      	ldrne	r0, [pc, #48]	; (8000be0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bb0:	480a      	ldreq	r0, [pc, #40]	; (8000bdc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bb2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000bb6:	bf18      	it	ne
 8000bb8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bbe:	fba1 0100 	umull	r0, r1, r1, r0
 8000bc2:	f7ff fb55 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <HAL_RCC_GetSysClockFreq+0x50>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000bce:	3301      	adds	r3, #1
 8000bd0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000bd2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bd6:	bd08      	pop	{r3, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	00f42400 	.word	0x00f42400
 8000be0:	017d7840 	.word	0x017d7840

08000be4 <HAL_RCC_ClockConfig>:
{
 8000be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000be8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000bea:	4604      	mov	r4, r0
 8000bec:	b910      	cbnz	r0, 8000bf4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000bee:	2001      	movs	r0, #1
 8000bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000bf4:	4b44      	ldr	r3, [pc, #272]	; (8000d08 <HAL_RCC_ClockConfig+0x124>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	f002 020f 	and.w	r2, r2, #15
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	d328      	bcc.n	8000c52 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c00:	6821      	ldr	r1, [r4, #0]
 8000c02:	078f      	lsls	r7, r1, #30
 8000c04:	d42d      	bmi.n	8000c62 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c06:	07c8      	lsls	r0, r1, #31
 8000c08:	d440      	bmi.n	8000c8c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c0a:	4b3f      	ldr	r3, [pc, #252]	; (8000d08 <HAL_RCC_ClockConfig+0x124>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	f002 020f 	and.w	r2, r2, #15
 8000c12:	4295      	cmp	r5, r2
 8000c14:	d366      	bcc.n	8000ce4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c16:	6822      	ldr	r2, [r4, #0]
 8000c18:	0751      	lsls	r1, r2, #29
 8000c1a:	d46c      	bmi.n	8000cf6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c1c:	0713      	lsls	r3, r2, #28
 8000c1e:	d507      	bpl.n	8000c30 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c20:	4a3a      	ldr	r2, [pc, #232]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000c22:	6921      	ldr	r1, [r4, #16]
 8000c24:	6893      	ldr	r3, [r2, #8]
 8000c26:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c2a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c2e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c30:	f7ff ffaa 	bl	8000b88 <HAL_RCC_GetSysClockFreq>
 8000c34:	4b35      	ldr	r3, [pc, #212]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000c36:	4a36      	ldr	r2, [pc, #216]	; (8000d10 <HAL_RCC_ClockConfig+0x12c>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c3e:	5cd3      	ldrb	r3, [r2, r3]
 8000c40:	40d8      	lsrs	r0, r3
 8000c42:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <HAL_RCC_ClockConfig+0x130>)
 8000c44:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f003 f838 	bl	8003cbc <HAL_InitTick>
  return HAL_OK;
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c52:	b2ca      	uxtb	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 030f 	and.w	r3, r3, #15
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	d1c6      	bne.n	8000bee <HAL_RCC_ClockConfig+0xa>
 8000c60:	e7ce      	b.n	8000c00 <HAL_RCC_ClockConfig+0x1c>
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c64:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c68:	bf1e      	ittt	ne
 8000c6a:	689a      	ldrne	r2, [r3, #8]
 8000c6c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c70:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c72:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c74:	bf42      	ittt	mi
 8000c76:	689a      	ldrmi	r2, [r3, #8]
 8000c78:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c7c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	68a0      	ldr	r0, [r4, #8]
 8000c82:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c86:	4302      	orrs	r2, r0
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	e7bc      	b.n	8000c06 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c8c:	6862      	ldr	r2, [r4, #4]
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000c90:	2a01      	cmp	r2, #1
 8000c92:	d11d      	bne.n	8000cd0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c9a:	d0a8      	beq.n	8000bee <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c9c:	4e1b      	ldr	r6, [pc, #108]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000c9e:	68b3      	ldr	r3, [r6, #8]
 8000ca0:	f023 0303 	bic.w	r3, r3, #3
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000ca8:	f7ff fc8c 	bl	80005c4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cac:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cb0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cb2:	68b3      	ldr	r3, [r6, #8]
 8000cb4:	6862      	ldr	r2, [r4, #4]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000cbe:	d0a4      	beq.n	8000c0a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cc0:	f7ff fc80 	bl	80005c4 <HAL_GetTick>
 8000cc4:	1bc0      	subs	r0, r0, r7
 8000cc6:	4540      	cmp	r0, r8
 8000cc8:	d9f3      	bls.n	8000cb2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000cca:	2003      	movs	r0, #3
}
 8000ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cd0:	1e91      	subs	r1, r2, #2
 8000cd2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cd4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cd6:	d802      	bhi.n	8000cde <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cd8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cdc:	e7dd      	b.n	8000c9a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cde:	f013 0f02 	tst.w	r3, #2
 8000ce2:	e7da      	b.n	8000c9a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ce4:	b2ea      	uxtb	r2, r5
 8000ce6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	429d      	cmp	r5, r3
 8000cf0:	f47f af7d 	bne.w	8000bee <HAL_RCC_ClockConfig+0xa>
 8000cf4:	e78f      	b.n	8000c16 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cf6:	4905      	ldr	r1, [pc, #20]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000cf8:	68e0      	ldr	r0, [r4, #12]
 8000cfa:	688b      	ldr	r3, [r1, #8]
 8000cfc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d00:	4303      	orrs	r3, r0
 8000d02:	608b      	str	r3, [r1, #8]
 8000d04:	e78a      	b.n	8000c1c <HAL_RCC_ClockConfig+0x38>
 8000d06:	bf00      	nop
 8000d08:	40023c00 	.word	0x40023c00
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	08003f5d 	.word	0x08003f5d
 8000d14:	20000004 	.word	0x20000004

08000d18 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000d18:	4b01      	ldr	r3, [pc, #4]	; (8000d20 <HAL_RCC_GetHCLKFreq+0x8>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000004 	.word	0x20000004

08000d24 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d2e:	5cd3      	ldrb	r3, [r2, r3]
 8000d30:	4a03      	ldr	r2, [pc, #12]	; (8000d40 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d32:	6810      	ldr	r0, [r2, #0]
}
 8000d34:	40d8      	lsrs	r0, r3
 8000d36:	4770      	bx	lr
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	08003f6d 	.word	0x08003f6d
 8000d40:	20000004 	.word	0x20000004

08000d44 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d44:	230f      	movs	r3, #15
 8000d46:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_RCC_GetClockConfig+0x34>)
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	f002 0203 	and.w	r2, r2, #3
 8000d50:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000d58:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000d60:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	08db      	lsrs	r3, r3, #3
 8000d66:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000d6a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <HAL_RCC_GetClockConfig+0x38>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 030f 	and.w	r3, r3, #15
 8000d74:	600b      	str	r3, [r1, #0]
 8000d76:	4770      	bx	lr
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40023c00 	.word	0x40023c00

08000d80 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d84:	9e06      	ldr	r6, [sp, #24]
 8000d86:	4604      	mov	r4, r0
 8000d88:	4688      	mov	r8, r1
 8000d8a:	4617      	mov	r7, r2
 8000d8c:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000d8e:	6822      	ldr	r2, [r4, #0]
 8000d90:	6893      	ldr	r3, [r2, #8]
 8000d92:	ea38 0303 	bics.w	r3, r8, r3
 8000d96:	bf0c      	ite	eq
 8000d98:	2301      	moveq	r3, #1
 8000d9a:	2300      	movne	r3, #0
 8000d9c:	429f      	cmp	r7, r3
 8000d9e:	d102      	bne.n	8000da6 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000da0:	2000      	movs	r0, #0
}
 8000da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000da6:	1c6b      	adds	r3, r5, #1
 8000da8:	d0f2      	beq.n	8000d90 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000daa:	bb55      	cbnz	r5, 8000e02 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000dac:	6823      	ldr	r3, [r4, #0]
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000db4:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000db6:	6862      	ldr	r2, [r4, #4]
 8000db8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000dbc:	d10a      	bne.n	8000dd4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8000dbe:	68a2      	ldr	r2, [r4, #8]
 8000dc0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000dc4:	d002      	beq.n	8000dcc <SPI_WaitFlagStateUntilTimeout+0x4c>
 8000dc6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000dca:	d103      	bne.n	8000dd4 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dd2:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000dd4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000dd6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000dda:	d109      	bne.n	8000df0 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000de2:	0412      	lsls	r2, r2, #16
 8000de4:	0c12      	lsrs	r2, r2, #16
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000dee:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8000df0:	2301      	movs	r3, #1
 8000df2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000df6:	2300      	movs	r3, #0
 8000df8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000e02:	f7ff fbdf 	bl	80005c4 <HAL_GetTick>
 8000e06:	1b80      	subs	r0, r0, r6
 8000e08:	4285      	cmp	r5, r0
 8000e0a:	d8c0      	bhi.n	8000d8e <SPI_WaitFlagStateUntilTimeout+0xe>
 8000e0c:	e7ce      	b.n	8000dac <SPI_WaitFlagStateUntilTimeout+0x2c>

08000e0e <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000e0e:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e10:	460b      	mov	r3, r1
 8000e12:	9200      	str	r2, [sp, #0]
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	2200      	movs	r2, #0
{
 8000e18:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e1a:	f7ff ffb1 	bl	8000d80 <SPI_WaitFlagStateUntilTimeout>
 8000e1e:	b120      	cbz	r0, 8000e2a <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e20:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e22:	f043 0320 	orr.w	r3, r3, #32
 8000e26:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8000e28:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd10      	pop	{r4, pc}

08000e2e <HAL_SPI_Init>:
{
 8000e2e:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8000e30:	4604      	mov	r4, r0
 8000e32:	2800      	cmp	r0, #0
 8000e34:	d036      	beq.n	8000ea4 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8000e3a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000e3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e42:	b91b      	cbnz	r3, 8000e4c <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000e44:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000e48:	f002 fc2c 	bl	80036a4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000e4c:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e4e:	68a0      	ldr	r0, [r4, #8]
 8000e50:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000e58:	680b      	ldr	r3, [r1, #0]
 8000e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e5e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e60:	6863      	ldr	r3, [r4, #4]
 8000e62:	4303      	orrs	r3, r0
 8000e64:	68e0      	ldr	r0, [r4, #12]
 8000e66:	4303      	orrs	r3, r0
 8000e68:	6920      	ldr	r0, [r4, #16]
 8000e6a:	4303      	orrs	r3, r0
 8000e6c:	6960      	ldr	r0, [r4, #20]
 8000e6e:	4303      	orrs	r3, r0
 8000e70:	69e0      	ldr	r0, [r4, #28]
 8000e72:	4303      	orrs	r3, r0
 8000e74:	6a20      	ldr	r0, [r4, #32]
 8000e76:	4303      	orrs	r3, r0
 8000e78:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000e7a:	4303      	orrs	r3, r0
 8000e7c:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000e80:	4303      	orrs	r3, r0
 8000e82:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000e84:	0c12      	lsrs	r2, r2, #16
 8000e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e88:	f002 0204 	and.w	r2, r2, #4
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000e90:	69cb      	ldr	r3, [r1, #28]
 8000e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e96:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e98:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000e9a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e9c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000e9e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000ea2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000ea4:	2001      	movs	r0, #1
}
 8000ea6:	bd10      	pop	{r4, pc}

08000ea8 <HAL_SPI_Transmit>:
{
 8000ea8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000eac:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000eae:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000eb2:	2b01      	cmp	r3, #1
{
 8000eb4:	4604      	mov	r4, r0
 8000eb6:	460d      	mov	r5, r1
 8000eb8:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000eba:	f000 809c 	beq.w	8000ff6 <HAL_SPI_Transmit+0x14e>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000ec4:	f7ff fb7e 	bl	80005c4 <HAL_GetTick>
 8000ec8:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000eca:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000ece:	b2c0      	uxtb	r0, r0
 8000ed0:	2801      	cmp	r0, #1
 8000ed2:	f040 808e 	bne.w	8000ff2 <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0))
 8000ed6:	2d00      	cmp	r5, #0
 8000ed8:	d04e      	beq.n	8000f78 <HAL_SPI_Transmit+0xd0>
 8000eda:	f1b8 0f00 	cmp.w	r8, #0
 8000ede:	d04b      	beq.n	8000f78 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000eea:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000eec:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000ef0:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000ef2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000ef4:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000ef6:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ef8:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000efa:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f00:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8000f02:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000f06:	bf02      	ittt	eq
 8000f08:	681a      	ldreq	r2, [r3, #0]
 8000f0a:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8000f0e:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000f14:	bf5e      	ittt	pl
 8000f16:	681a      	ldrpl	r2, [r3, #0]
 8000f18:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000f1c:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000f1e:	68e2      	ldr	r2, [r4, #12]
 8000f20:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000f24:	6862      	ldr	r2, [r4, #4]
 8000f26:	d138      	bne.n	8000f9a <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000f28:	b11a      	cbz	r2, 8000f32 <HAL_SPI_Transmit+0x8a>
 8000f2a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000f2c:	b292      	uxth	r2, r2
 8000f2e:	2a01      	cmp	r2, #1
 8000f30:	d106      	bne.n	8000f40 <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000f32:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000f36:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8000f38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000f40:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	b993      	cbnz	r3, 8000f6c <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000f46:	9700      	str	r7, [sp, #0]
 8000f48:	4633      	mov	r3, r6
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4620      	mov	r0, r4
 8000f50:	f7ff ff16 	bl	8000d80 <SPI_WaitFlagStateUntilTimeout>
 8000f54:	b978      	cbnz	r0, 8000f76 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000f56:	463a      	mov	r2, r7
 8000f58:	4631      	mov	r1, r6
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	f7ff ff57 	bl	8000e0e <SPI_CheckFlag_BSY>
 8000f60:	2800      	cmp	r0, #0
 8000f62:	d038      	beq.n	8000fd6 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000f64:	2320      	movs	r3, #32
 8000f66:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000f68:	2001      	movs	r0, #1
    goto error;
 8000f6a:	e005      	b.n	8000f78 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	0790      	lsls	r0, r2, #30
 8000f72:	d4de      	bmi.n	8000f32 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000f74:	b94e      	cbnz	r6, 8000f8a <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8000f76:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000f84:	b004      	add	sp, #16
 8000f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000f8a:	1c71      	adds	r1, r6, #1
 8000f8c:	d0d8      	beq.n	8000f40 <HAL_SPI_Transmit+0x98>
 8000f8e:	f7ff fb19 	bl	80005c4 <HAL_GetTick>
 8000f92:	1bc0      	subs	r0, r0, r7
 8000f94:	4286      	cmp	r6, r0
 8000f96:	d8d3      	bhi.n	8000f40 <HAL_SPI_Transmit+0x98>
 8000f98:	e7ed      	b.n	8000f76 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8000f9a:	b11a      	cbz	r2, 8000fa4 <HAL_SPI_Transmit+0xfc>
 8000f9c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	2a01      	cmp	r2, #1
 8000fa2:	d106      	bne.n	8000fb2 <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000fa4:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000fa8:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000faa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fac:	3b01      	subs	r3, #1
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000fb2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0c5      	beq.n	8000f46 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000fba:	6823      	ldr	r3, [r4, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	0792      	lsls	r2, r2, #30
 8000fc0:	d4f0      	bmi.n	8000fa4 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000fc2:	2e00      	cmp	r6, #0
 8000fc4:	d0d7      	beq.n	8000f76 <HAL_SPI_Transmit+0xce>
 8000fc6:	1c73      	adds	r3, r6, #1
 8000fc8:	d0f3      	beq.n	8000fb2 <HAL_SPI_Transmit+0x10a>
 8000fca:	f7ff fafb 	bl	80005c4 <HAL_GetTick>
 8000fce:	1bc0      	subs	r0, r0, r7
 8000fd0:	4286      	cmp	r6, r0
 8000fd2:	d8ee      	bhi.n	8000fb2 <HAL_SPI_Transmit+0x10a>
 8000fd4:	e7cf      	b.n	8000f76 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000fd6:	68a3      	ldr	r3, [r4, #8]
 8000fd8:	b933      	cbnz	r3, 8000fe8 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000fda:	9303      	str	r3, [sp, #12]
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	9203      	str	r2, [sp, #12]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	9303      	str	r3, [sp, #12]
 8000fe6:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000fe8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000fea:	3000      	adds	r0, #0
 8000fec:	bf18      	it	ne
 8000fee:	2001      	movne	r0, #1
 8000ff0:	e7c2      	b.n	8000f78 <HAL_SPI_Transmit+0xd0>
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	e7c0      	b.n	8000f78 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8000ff6:	2002      	movs	r0, #2
 8000ff8:	e7c4      	b.n	8000f84 <HAL_SPI_Transmit+0xdc>

08000ffa <HAL_SPI_TransmitReceive>:
{
 8000ffa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ffe:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8001000:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001004:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8001006:	2b01      	cmp	r3, #1
{
 8001008:	4604      	mov	r4, r0
 800100a:	460d      	mov	r5, r1
 800100c:	4616      	mov	r6, r2
 800100e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8001010:	f000 80ed 	beq.w	80011ee <HAL_SPI_TransmitReceive+0x1f4>
 8001014:	2301      	movs	r3, #1
 8001016:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800101a:	f7ff fad3 	bl	80005c4 <HAL_GetTick>
  tmp  = hspi->State;
 800101e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8001022:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8001024:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001026:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001028:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 800102a:	d00a      	beq.n	8001042 <HAL_SPI_TransmitReceive+0x48>
 800102c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001030:	f040 80db 	bne.w	80011ea <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001034:	68a2      	ldr	r2, [r4, #8]
 8001036:	2a00      	cmp	r2, #0
 8001038:	f040 80d7 	bne.w	80011ea <HAL_SPI_TransmitReceive+0x1f0>
 800103c:	2b04      	cmp	r3, #4
 800103e:	f040 80d4 	bne.w	80011ea <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8001042:	2d00      	cmp	r5, #0
 8001044:	d04e      	beq.n	80010e4 <HAL_SPI_TransmitReceive+0xea>
 8001046:	2e00      	cmp	r6, #0
 8001048:	d04c      	beq.n	80010e4 <HAL_SPI_TransmitReceive+0xea>
 800104a:	f1b9 0f00 	cmp.w	r9, #0
 800104e:	d049      	beq.n	80010e4 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8001050:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001054:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8001056:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001058:	bf04      	itt	eq
 800105a:	2305      	moveq	r3, #5
 800105c:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001060:	2300      	movs	r3, #0
 8001062:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001064:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001066:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001068:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800106a:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800106e:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001072:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001074:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001078:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800107a:	bf58      	it	pl
 800107c:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800107e:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001080:	bf58      	it	pl
 8001082:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001086:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800108a:	bf58      	it	pl
 800108c:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800108e:	68e2      	ldr	r2, [r4, #12]
 8001090:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001094:	d15d      	bne.n	8001152 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001096:	b119      	cbz	r1, 80010a0 <HAL_SPI_TransmitReceive+0xa6>
 8001098:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800109a:	b292      	uxth	r2, r2
 800109c:	2a01      	cmp	r2, #1
 800109e:	d106      	bne.n	80010ae <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80010a0:	f835 2b02 	ldrh.w	r2, [r5], #2
 80010a4:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80010a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010a8:	3b01      	subs	r3, #1
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80010ae:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80010b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	b9bb      	cbnz	r3, 80010e8 <HAL_SPI_TransmitReceive+0xee>
 80010b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	b9a3      	cbnz	r3, 80010e8 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80010be:	f8cd 8000 	str.w	r8, [sp]
 80010c2:	463b      	mov	r3, r7
 80010c4:	2201      	movs	r2, #1
 80010c6:	2102      	movs	r1, #2
 80010c8:	4620      	mov	r0, r4
 80010ca:	f7ff fe59 	bl	8000d80 <SPI_WaitFlagStateUntilTimeout>
 80010ce:	2800      	cmp	r0, #0
 80010d0:	d135      	bne.n	800113e <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80010d2:	4642      	mov	r2, r8
 80010d4:	4639      	mov	r1, r7
 80010d6:	4620      	mov	r0, r4
 80010d8:	f7ff fe99 	bl	8000e0e <SPI_CheckFlag_BSY>
 80010dc:	2800      	cmp	r0, #0
 80010de:	d079      	beq.n	80011d4 <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80010e0:	2320      	movs	r3, #32
 80010e2:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80010e4:	2001      	movs	r0, #1
 80010e6:	e02b      	b.n	8001140 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80010e8:	f1b9 0f00 	cmp.w	r9, #0
 80010ec:	d00f      	beq.n	800110e <HAL_SPI_TransmitReceive+0x114>
 80010ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	b163      	cbz	r3, 800110e <HAL_SPI_TransmitReceive+0x114>
 80010f4:	6823      	ldr	r3, [r4, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	0791      	lsls	r1, r2, #30
 80010fa:	d508      	bpl.n	800110e <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80010fc:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001100:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001102:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001104:	3b01      	subs	r3, #1
 8001106:	b29b      	uxth	r3, r3
 8001108:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800110a:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800110e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001110:	b29b      	uxth	r3, r3
 8001112:	b163      	cbz	r3, 800112e <HAL_SPI_TransmitReceive+0x134>
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	07d2      	lsls	r2, r2, #31
 800111a:	d508      	bpl.n	800112e <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8001122:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001124:	3b01      	subs	r3, #1
 8001126:	b29b      	uxth	r3, r3
 8001128:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800112a:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800112e:	1c78      	adds	r0, r7, #1
 8001130:	d0bf      	beq.n	80010b2 <HAL_SPI_TransmitReceive+0xb8>
 8001132:	f7ff fa47 	bl	80005c4 <HAL_GetTick>
 8001136:	eba0 0008 	sub.w	r0, r0, r8
 800113a:	4287      	cmp	r7, r0
 800113c:	d8b9      	bhi.n	80010b2 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 800113e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001140:	2301      	movs	r3, #1
 8001142:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001146:	2300      	movs	r3, #0
 8001148:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800114c:	b005      	add	sp, #20
 800114e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001152:	b119      	cbz	r1, 800115c <HAL_SPI_TransmitReceive+0x162>
 8001154:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001156:	b292      	uxth	r2, r2
 8001158:	2a01      	cmp	r2, #1
 800115a:	d106      	bne.n	800116a <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 800115c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001160:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8001162:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001164:	3b01      	subs	r3, #1
 8001166:	b29b      	uxth	r3, r3
 8001168:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800116a:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800116e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001170:	b29b      	uxth	r3, r3
 8001172:	b91b      	cbnz	r3, 800117c <HAL_SPI_TransmitReceive+0x182>
 8001174:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001176:	b29b      	uxth	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0a0      	beq.n	80010be <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800117c:	f1b9 0f00 	cmp.w	r9, #0
 8001180:	d00f      	beq.n	80011a2 <HAL_SPI_TransmitReceive+0x1a8>
 8001182:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001184:	b29b      	uxth	r3, r3
 8001186:	b163      	cbz	r3, 80011a2 <HAL_SPI_TransmitReceive+0x1a8>
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	0791      	lsls	r1, r2, #30
 800118e:	d508      	bpl.n	80011a2 <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001190:	782a      	ldrb	r2, [r5, #0]
 8001192:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001194:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001196:	3b01      	subs	r3, #1
 8001198:	b29b      	uxth	r3, r3
 800119a:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800119c:	3501      	adds	r5, #1
        txallowed = 0U;
 800119e:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80011a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	b163      	cbz	r3, 80011c2 <HAL_SPI_TransmitReceive+0x1c8>
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	07d2      	lsls	r2, r2, #31
 80011ae:	d508      	bpl.n	80011c2 <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 80011b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011b6:	3b01      	subs	r3, #1
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80011bc:	3601      	adds	r6, #1
        txallowed = 1U;
 80011be:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80011c2:	1c7b      	adds	r3, r7, #1
 80011c4:	d0d3      	beq.n	800116e <HAL_SPI_TransmitReceive+0x174>
 80011c6:	f7ff f9fd 	bl	80005c4 <HAL_GetTick>
 80011ca:	eba0 0008 	sub.w	r0, r0, r8
 80011ce:	4287      	cmp	r7, r0
 80011d0:	d8cd      	bhi.n	800116e <HAL_SPI_TransmitReceive+0x174>
 80011d2:	e7b4      	b.n	800113e <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80011d4:	68a3      	ldr	r3, [r4, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1b2      	bne.n	8001140 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80011da:	6823      	ldr	r3, [r4, #0]
 80011dc:	9003      	str	r0, [sp, #12]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	9203      	str	r2, [sp, #12]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	9303      	str	r3, [sp, #12]
 80011e6:	9b03      	ldr	r3, [sp, #12]
 80011e8:	e7aa      	b.n	8001140 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 80011ea:	2002      	movs	r0, #2
 80011ec:	e7a8      	b.n	8001140 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 80011ee:	2002      	movs	r0, #2
 80011f0:	e7ac      	b.n	800114c <HAL_SPI_TransmitReceive+0x152>

080011f2 <HAL_SPI_Receive>:
{
 80011f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80011f6:	461e      	mov	r6, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80011f8:	6843      	ldr	r3, [r0, #4]
 80011fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80011fe:	4604      	mov	r4, r0
 8001200:	460d      	mov	r5, r1
 8001202:	4690      	mov	r8, r2
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001204:	d10c      	bne.n	8001220 <HAL_SPI_Receive+0x2e>
 8001206:	6883      	ldr	r3, [r0, #8]
 8001208:	b953      	cbnz	r3, 8001220 <HAL_SPI_Receive+0x2e>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 800120a:	2304      	movs	r3, #4
 800120c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 8001210:	4613      	mov	r3, r2
 8001212:	9600      	str	r6, [sp, #0]
 8001214:	460a      	mov	r2, r1
 8001216:	f7ff fef0 	bl	8000ffa <HAL_SPI_TransmitReceive>
}
 800121a:	b002      	add	sp, #8
 800121c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8001220:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001224:	2b01      	cmp	r3, #1
 8001226:	f000 8081 	beq.w	800132c <HAL_SPI_Receive+0x13a>
 800122a:	2301      	movs	r3, #1
 800122c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001230:	f7ff f9c8 	bl	80005c4 <HAL_GetTick>
 8001234:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8001236:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800123a:	b2c0      	uxtb	r0, r0
 800123c:	2801      	cmp	r0, #1
 800123e:	d173      	bne.n	8001328 <HAL_SPI_Receive+0x136>
  if((pData == NULL ) || (Size == 0))
 8001240:	2d00      	cmp	r5, #0
 8001242:	d058      	beq.n	80012f6 <HAL_SPI_Receive+0x104>
 8001244:	f1b8 0f00 	cmp.w	r8, #0
 8001248:	d055      	beq.n	80012f6 <HAL_SPI_Receive+0x104>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800124a:	2304      	movs	r3, #4
 800124c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001250:	2300      	movs	r3, #0
 8001252:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001254:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8001256:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 800125a:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800125c:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800125e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001260:	6463      	str	r3, [r4, #68]	; 0x44
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001262:	68a3      	ldr	r3, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001264:	63a5      	str	r5, [r4, #56]	; 0x38
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800126a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferSize  = Size;
 800126c:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 8001270:	bf02      	ittt	eq
 8001272:	681a      	ldreq	r2, [r3, #0]
 8001274:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8001278:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800127e:	bf5e      	ittt	pl
 8001280:	681a      	ldrpl	r2, [r3, #0]
 8001282:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001286:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001288:	68e3      	ldr	r3, [r4, #12]
 800128a:	b1cb      	cbz	r3, 80012c0 <HAL_SPI_Receive+0xce>
    while(hspi->RxXferCount > 0U)
 800128c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800128e:	b29b      	uxth	r3, r3
 8001290:	b1d3      	cbz	r3, 80012c8 <HAL_SPI_Receive+0xd6>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	07d2      	lsls	r2, r2, #31
 8001298:	d53c      	bpl.n	8001314 <HAL_SPI_Receive+0x122>
        *((uint16_t*)pData) = hspi->Instance->DR;
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 80012a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80012a8:	e7f0      	b.n	800128c <HAL_SPI_Receive+0x9a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	07d0      	lsls	r0, r2, #31
 80012b0:	d51f      	bpl.n	80012f2 <HAL_SPI_Receive+0x100>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 80012b2:	7b1b      	ldrb	r3, [r3, #12]
 80012b4:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 80012b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012ba:	3b01      	subs	r3, #1
 80012bc:	b29b      	uxth	r3, r3
 80012be:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while(hspi->RxXferCount > 0U)
 80012c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f0      	bne.n	80012aa <HAL_SPI_Receive+0xb8>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80012c8:	6863      	ldr	r3, [r4, #4]
 80012ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80012ce:	d10b      	bne.n	80012e8 <HAL_SPI_Receive+0xf6>
 80012d0:	68a3      	ldr	r3, [r4, #8]
 80012d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012d6:	d002      	beq.n	80012de <HAL_SPI_Receive+0xec>
 80012d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012dc:	d104      	bne.n	80012e8 <HAL_SPI_Receive+0xf6>
    __HAL_SPI_DISABLE(hspi);
 80012de:	6822      	ldr	r2, [r4, #0]
 80012e0:	6813      	ldr	r3, [r2, #0]
 80012e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012e6:	6013      	str	r3, [r2, #0]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80012e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80012ea:	3000      	adds	r0, #0
 80012ec:	bf18      	it	ne
 80012ee:	2001      	movne	r0, #1
 80012f0:	e001      	b.n	80012f6 <HAL_SPI_Receive+0x104>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80012f2:	b93e      	cbnz	r6, 8001304 <HAL_SPI_Receive+0x112>
          errorcode = HAL_TIMEOUT;
 80012f4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80012fc:	2300      	movs	r3, #0
 80012fe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8001302:	e78a      	b.n	800121a <HAL_SPI_Receive+0x28>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001304:	1c71      	adds	r1, r6, #1
 8001306:	d0db      	beq.n	80012c0 <HAL_SPI_Receive+0xce>
 8001308:	f7ff f95c 	bl	80005c4 <HAL_GetTick>
 800130c:	1bc0      	subs	r0, r0, r7
 800130e:	4286      	cmp	r6, r0
 8001310:	d8d6      	bhi.n	80012c0 <HAL_SPI_Receive+0xce>
 8001312:	e7ef      	b.n	80012f4 <HAL_SPI_Receive+0x102>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001314:	2e00      	cmp	r6, #0
 8001316:	d0ed      	beq.n	80012f4 <HAL_SPI_Receive+0x102>
 8001318:	1c73      	adds	r3, r6, #1
 800131a:	d0b7      	beq.n	800128c <HAL_SPI_Receive+0x9a>
 800131c:	f7ff f952 	bl	80005c4 <HAL_GetTick>
 8001320:	1bc0      	subs	r0, r0, r7
 8001322:	4286      	cmp	r6, r0
 8001324:	d8b2      	bhi.n	800128c <HAL_SPI_Receive+0x9a>
 8001326:	e7e5      	b.n	80012f4 <HAL_SPI_Receive+0x102>
    errorcode = HAL_BUSY;
 8001328:	2002      	movs	r0, #2
 800132a:	e7e4      	b.n	80012f6 <HAL_SPI_Receive+0x104>
  __HAL_LOCK(hspi);
 800132c:	2002      	movs	r0, #2
 800132e:	e774      	b.n	800121a <HAL_SPI_Receive+0x28>

08001330 <HAL_SPI_GetState>:
  return hspi->State;
 8001330:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8001334:	4770      	bx	lr
	...

08001338 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001338:	6a03      	ldr	r3, [r0, #32]
 800133a:	f023 0301 	bic.w	r3, r3, #1
 800133e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001340:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001342:	6842      	ldr	r2, [r0, #4]
{
 8001344:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001346:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001348:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800134a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800134e:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001350:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001352:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001356:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001358:	4c0c      	ldr	r4, [pc, #48]	; (800138c <TIM_OC1_SetConfig+0x54>)
 800135a:	42a0      	cmp	r0, r4
 800135c:	d009      	beq.n	8001372 <TIM_OC1_SetConfig+0x3a>
 800135e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001362:	42a0      	cmp	r0, r4
 8001364:	d005      	beq.n	8001372 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001366:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001368:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800136a:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800136c:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800136e:	6203      	str	r3, [r0, #32]
} 
 8001370:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001372:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001374:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001376:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800137a:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800137c:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800137e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001382:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001384:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001388:	4322      	orrs	r2, r4
 800138a:	e7ec      	b.n	8001366 <TIM_OC1_SetConfig+0x2e>
 800138c:	40010000 	.word	0x40010000

08001390 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001390:	6a03      	ldr	r3, [r0, #32]
 8001392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001396:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001398:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800139a:	6842      	ldr	r2, [r0, #4]
{
 800139c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800139e:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80013a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80013a2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80013a6:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80013a8:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80013aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80013ae:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80013b2:	4c0e      	ldr	r4, [pc, #56]	; (80013ec <TIM_OC3_SetConfig+0x5c>)
 80013b4:	42a0      	cmp	r0, r4
 80013b6:	d009      	beq.n	80013cc <TIM_OC3_SetConfig+0x3c>
 80013b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80013bc:	42a0      	cmp	r0, r4
 80013be:	d005      	beq.n	80013cc <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013c0:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80013c2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80013c4:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80013c6:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013c8:	6203      	str	r3, [r0, #32]
}
 80013ca:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80013cc:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80013ce:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 80013d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80013d4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80013d8:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80013da:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80013de:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80013e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80013e4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 80013e8:	e7ea      	b.n	80013c0 <TIM_OC3_SetConfig+0x30>
 80013ea:	bf00      	nop
 80013ec:	40010000 	.word	0x40010000

080013f0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80013f0:	6a03      	ldr	r3, [r0, #32]
 80013f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013f6:	6203      	str	r3, [r0, #32]
{
 80013f8:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013fa:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80013fc:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80013fe:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001400:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001402:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001406:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800140a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800140c:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001410:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001414:	4d09      	ldr	r5, [pc, #36]	; (800143c <TIM_OC4_SetConfig+0x4c>)
 8001416:	42a8      	cmp	r0, r5
 8001418:	d009      	beq.n	800142e <TIM_OC4_SetConfig+0x3e>
 800141a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800141e:	42a8      	cmp	r0, r5
 8001420:	d005      	beq.n	800142e <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001422:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001424:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001426:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001428:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800142a:	6204      	str	r4, [r0, #32]
}
 800142c:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800142e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001430:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001434:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001438:	e7f3      	b.n	8001422 <TIM_OC4_SetConfig+0x32>
 800143a:	bf00      	nop
 800143c:	40010000 	.word	0x40010000

08001440 <HAL_TIM_Base_MspInit>:
 8001440:	4770      	bx	lr

08001442 <HAL_TIM_Base_Start>:
  __HAL_TIM_ENABLE(htim);
 8001442:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001444:	2302      	movs	r3, #2
 8001446:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE(htim);
 800144a:	6813      	ldr	r3, [r2, #0]
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 8001452:	2301      	movs	r3, #1
 8001454:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8001458:	2000      	movs	r0, #0
 800145a:	4770      	bx	lr

0800145c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800145c:	6803      	ldr	r3, [r0, #0]
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	f042 0201 	orr.w	r2, r2, #1
 8001464:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	f042 0201 	orr.w	r2, r2, #1
 800146c:	601a      	str	r2, [r3, #0]
}
 800146e:	2000      	movs	r0, #0
 8001470:	4770      	bx	lr

08001472 <HAL_TIM_OC_DelayElapsedCallback>:
 8001472:	4770      	bx	lr

08001474 <HAL_TIM_IC_CaptureCallback>:
 8001474:	4770      	bx	lr

08001476 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001476:	4770      	bx	lr

08001478 <HAL_TIM_TriggerCallback>:
 8001478:	4770      	bx	lr

0800147a <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800147a:	6803      	ldr	r3, [r0, #0]
 800147c:	691a      	ldr	r2, [r3, #16]
 800147e:	0791      	lsls	r1, r2, #30
{
 8001480:	b510      	push	{r4, lr}
 8001482:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001484:	d50e      	bpl.n	80014a4 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	0792      	lsls	r2, r2, #30
 800148a:	d50b      	bpl.n	80014a4 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800148c:	f06f 0202 	mvn.w	r2, #2
 8001490:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001492:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001494:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001496:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001498:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800149a:	d077      	beq.n	800158c <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800149c:	f7ff ffea 	bl	8001474 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014a0:	2300      	movs	r3, #0
 80014a2:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	0750      	lsls	r0, r2, #29
 80014aa:	d510      	bpl.n	80014ce <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	0751      	lsls	r1, r2, #29
 80014b0:	d50d      	bpl.n	80014ce <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014b2:	f06f 0204 	mvn.w	r2, #4
 80014b6:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014b8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014ba:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014bc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014c0:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80014c2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014c4:	d068      	beq.n	8001598 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80014c6:	f7ff ffd5 	bl	8001474 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014ca:	2300      	movs	r3, #0
 80014cc:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	691a      	ldr	r2, [r3, #16]
 80014d2:	0712      	lsls	r2, r2, #28
 80014d4:	d50f      	bpl.n	80014f6 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	0710      	lsls	r0, r2, #28
 80014da:	d50c      	bpl.n	80014f6 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80014dc:	f06f 0208 	mvn.w	r2, #8
 80014e0:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80014e2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80014e4:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80014e6:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80014e8:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80014ea:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80014ec:	d05a      	beq.n	80015a4 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80014ee:	f7ff ffc1 	bl	8001474 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014f2:	2300      	movs	r3, #0
 80014f4:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80014f6:	6823      	ldr	r3, [r4, #0]
 80014f8:	691a      	ldr	r2, [r3, #16]
 80014fa:	06d2      	lsls	r2, r2, #27
 80014fc:	d510      	bpl.n	8001520 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	06d0      	lsls	r0, r2, #27
 8001502:	d50d      	bpl.n	8001520 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001504:	f06f 0210 	mvn.w	r2, #16
 8001508:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800150a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800150c:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800150e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001512:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001514:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001516:	d04b      	beq.n	80015b0 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001518:	f7ff ffac 	bl	8001474 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800151c:	2300      	movs	r3, #0
 800151e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	07d1      	lsls	r1, r2, #31
 8001526:	d508      	bpl.n	800153a <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	07d2      	lsls	r2, r2, #31
 800152c:	d505      	bpl.n	800153a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800152e:	f06f 0201 	mvn.w	r2, #1
 8001532:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001534:	4620      	mov	r0, r4
 8001536:	f002 fb5f 	bl	8003bf8 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	691a      	ldr	r2, [r3, #16]
 800153e:	0610      	lsls	r0, r2, #24
 8001540:	d508      	bpl.n	8001554 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	0611      	lsls	r1, r2, #24
 8001546:	d505      	bpl.n	8001554 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001548:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800154c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800154e:	4620      	mov	r0, r4
 8001550:	f000 f9cf 	bl	80018f2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001554:	6823      	ldr	r3, [r4, #0]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	0652      	lsls	r2, r2, #25
 800155a:	d508      	bpl.n	800156e <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	0650      	lsls	r0, r2, #25
 8001560:	d505      	bpl.n	800156e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001562:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001566:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001568:	4620      	mov	r0, r4
 800156a:	f7ff ff85 	bl	8001478 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800156e:	6823      	ldr	r3, [r4, #0]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	0691      	lsls	r1, r2, #26
 8001574:	d522      	bpl.n	80015bc <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	0692      	lsls	r2, r2, #26
 800157a:	d51f      	bpl.n	80015bc <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800157c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001580:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001582:	611a      	str	r2, [r3, #16]
}
 8001584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001588:	f000 b9b2 	b.w	80018f0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800158c:	f7ff ff71 	bl	8001472 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001590:	4620      	mov	r0, r4
 8001592:	f7ff ff70 	bl	8001476 <HAL_TIM_PWM_PulseFinishedCallback>
 8001596:	e783      	b.n	80014a0 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001598:	f7ff ff6b 	bl	8001472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800159c:	4620      	mov	r0, r4
 800159e:	f7ff ff6a 	bl	8001476 <HAL_TIM_PWM_PulseFinishedCallback>
 80015a2:	e792      	b.n	80014ca <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015a4:	f7ff ff65 	bl	8001472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80015a8:	4620      	mov	r0, r4
 80015aa:	f7ff ff64 	bl	8001476 <HAL_TIM_PWM_PulseFinishedCallback>
 80015ae:	e7a0      	b.n	80014f2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015b0:	f7ff ff5f 	bl	8001472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015b4:	4620      	mov	r0, r4
 80015b6:	f7ff ff5e 	bl	8001476 <HAL_TIM_PWM_PulseFinishedCallback>
 80015ba:	e7af      	b.n	800151c <HAL_TIM_IRQHandler+0xa2>
 80015bc:	bd10      	pop	{r4, pc}
	...

080015c0 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80015c0:	4a2e      	ldr	r2, [pc, #184]	; (800167c <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80015c2:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80015c4:	4290      	cmp	r0, r2
 80015c6:	d012      	beq.n	80015ee <TIM_Base_SetConfig+0x2e>
 80015c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80015cc:	d00f      	beq.n	80015ee <TIM_Base_SetConfig+0x2e>
 80015ce:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80015d2:	4290      	cmp	r0, r2
 80015d4:	d00b      	beq.n	80015ee <TIM_Base_SetConfig+0x2e>
 80015d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015da:	4290      	cmp	r0, r2
 80015dc:	d007      	beq.n	80015ee <TIM_Base_SetConfig+0x2e>
 80015de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015e2:	4290      	cmp	r0, r2
 80015e4:	d003      	beq.n	80015ee <TIM_Base_SetConfig+0x2e>
 80015e6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80015ea:	4290      	cmp	r0, r2
 80015ec:	d11d      	bne.n	800162a <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80015ee:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80015f4:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80015f6:	4a21      	ldr	r2, [pc, #132]	; (800167c <TIM_Base_SetConfig+0xbc>)
 80015f8:	4290      	cmp	r0, r2
 80015fa:	d104      	bne.n	8001606 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015fc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80015fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001602:	4313      	orrs	r3, r2
 8001604:	e028      	b.n	8001658 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001606:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800160a:	d0f7      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 800160c:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <TIM_Base_SetConfig+0xc0>)
 800160e:	4290      	cmp	r0, r2
 8001610:	d0f4      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 8001612:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001616:	4290      	cmp	r0, r2
 8001618:	d0f0      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 800161a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800161e:	4290      	cmp	r0, r2
 8001620:	d0ec      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 8001622:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001626:	4290      	cmp	r0, r2
 8001628:	d0e8      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 800162a:	4a16      	ldr	r2, [pc, #88]	; (8001684 <TIM_Base_SetConfig+0xc4>)
 800162c:	4290      	cmp	r0, r2
 800162e:	d0e5      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 8001630:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001634:	4290      	cmp	r0, r2
 8001636:	d0e1      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 8001638:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800163c:	4290      	cmp	r0, r2
 800163e:	d0dd      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 8001640:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001644:	4290      	cmp	r0, r2
 8001646:	d0d9      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 8001648:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800164c:	4290      	cmp	r0, r2
 800164e:	d0d5      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 8001650:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001654:	4290      	cmp	r0, r2
 8001656:	d0d1      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8001658:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800165a:	688b      	ldr	r3, [r1, #8]
 800165c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800165e:	680b      	ldr	r3, [r1, #0]
 8001660:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <TIM_Base_SetConfig+0xbc>)
 8001664:	4298      	cmp	r0, r3
 8001666:	d006      	beq.n	8001676 <TIM_Base_SetConfig+0xb6>
 8001668:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800166c:	4298      	cmp	r0, r3
 800166e:	d002      	beq.n	8001676 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8001670:	2301      	movs	r3, #1
 8001672:	6143      	str	r3, [r0, #20]
}
 8001674:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001676:	690b      	ldr	r3, [r1, #16]
 8001678:	6303      	str	r3, [r0, #48]	; 0x30
 800167a:	e7f9      	b.n	8001670 <TIM_Base_SetConfig+0xb0>
 800167c:	40010000 	.word	0x40010000
 8001680:	40000400 	.word	0x40000400
 8001684:	40014000 	.word	0x40014000

08001688 <HAL_TIM_Base_Init>:
{ 
 8001688:	b510      	push	{r4, lr}
  if(htim == NULL)
 800168a:	4604      	mov	r4, r0
 800168c:	b1a0      	cbz	r0, 80016b8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800168e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001692:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001696:	b91b      	cbnz	r3, 80016a0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001698:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800169c:	f7ff fed0 	bl	8001440 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80016a0:	2302      	movs	r3, #2
 80016a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80016a6:	6820      	ldr	r0, [r4, #0]
 80016a8:	1d21      	adds	r1, r4, #4
 80016aa:	f7ff ff89 	bl	80015c0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80016b4:	2000      	movs	r0, #0
 80016b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016b8:	2001      	movs	r0, #1
}
 80016ba:	bd10      	pop	{r4, pc}

080016bc <HAL_TIM_PWM_Init>:
{
 80016bc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80016be:	4604      	mov	r4, r0
 80016c0:	b1a0      	cbz	r0, 80016ec <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80016c2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80016c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016ca:	b91b      	cbnz	r3, 80016d4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80016cc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80016d0:	f002 f83e 	bl	8003750 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 80016d4:	2302      	movs	r3, #2
 80016d6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80016da:	6820      	ldr	r0, [r4, #0]
 80016dc:	1d21      	adds	r1, r4, #4
 80016de:	f7ff ff6f 	bl	80015c0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80016e2:	2301      	movs	r3, #1
 80016e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80016e8:	2000      	movs	r0, #0
 80016ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016ec:	2001      	movs	r0, #1
}  
 80016ee:	bd10      	pop	{r4, pc}

080016f0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016f0:	6a03      	ldr	r3, [r0, #32]
 80016f2:	f023 0310 	bic.w	r3, r3, #16
 80016f6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80016f8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80016fa:	6842      	ldr	r2, [r0, #4]
{
 80016fc:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 80016fe:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001700:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001702:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001706:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800170a:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800170c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001710:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001714:	4c0d      	ldr	r4, [pc, #52]	; (800174c <TIM_OC2_SetConfig+0x5c>)
 8001716:	42a0      	cmp	r0, r4
 8001718:	d009      	beq.n	800172e <TIM_OC2_SetConfig+0x3e>
 800171a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800171e:	42a0      	cmp	r0, r4
 8001720:	d005      	beq.n	800172e <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8001722:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001724:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001726:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001728:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800172a:	6203      	str	r3, [r0, #32]
}
 800172c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800172e:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001730:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001736:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800173a:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800173c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001740:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001746:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 800174a:	e7ea      	b.n	8001722 <TIM_OC2_SetConfig+0x32>
 800174c:	40010000 	.word	0x40010000

08001750 <HAL_TIM_PWM_ConfigChannel>:
{
 8001750:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001752:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001756:	2b01      	cmp	r3, #1
{
 8001758:	4604      	mov	r4, r0
 800175a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800175e:	d025      	beq.n	80017ac <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001760:	2301      	movs	r3, #1
 8001762:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001766:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 800176a:	2a0c      	cmp	r2, #12
 800176c:	d818      	bhi.n	80017a0 <HAL_TIM_PWM_ConfigChannel+0x50>
 800176e:	e8df f002 	tbb	[pc, r2]
 8001772:	1707      	.short	0x1707
 8001774:	171e1717 	.word	0x171e1717
 8001778:	172f1717 	.word	0x172f1717
 800177c:	1717      	.short	0x1717
 800177e:	40          	.byte	0x40
 800177f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001780:	6820      	ldr	r0, [r4, #0]
 8001782:	f7ff fdd9 	bl	8001338 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001786:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001788:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800178a:	699a      	ldr	r2, [r3, #24]
 800178c:	f042 0208 	orr.w	r2, r2, #8
 8001790:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001792:	699a      	ldr	r2, [r3, #24]
 8001794:	f022 0204 	bic.w	r2, r2, #4
 8001798:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800179a:	699a      	ldr	r2, [r3, #24]
 800179c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800179e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80017a0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80017a2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80017a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80017a8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80017ac:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80017ae:	6820      	ldr	r0, [r4, #0]
 80017b0:	f7ff ff9e 	bl	80016f0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80017b4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80017b6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80017c8:	699a      	ldr	r2, [r3, #24]
 80017ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80017ce:	e7e6      	b.n	800179e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80017d0:	6820      	ldr	r0, [r4, #0]
 80017d2:	f7ff fddd 	bl	8001390 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80017d6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80017d8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80017da:	69da      	ldr	r2, [r3, #28]
 80017dc:	f042 0208 	orr.w	r2, r2, #8
 80017e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80017e2:	69da      	ldr	r2, [r3, #28]
 80017e4:	f022 0204 	bic.w	r2, r2, #4
 80017e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80017ea:	69da      	ldr	r2, [r3, #28]
 80017ec:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80017ee:	61da      	str	r2, [r3, #28]
    break;
 80017f0:	e7d6      	b.n	80017a0 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80017f2:	6820      	ldr	r0, [r4, #0]
 80017f4:	f7ff fdfc 	bl	80013f0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80017f8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80017fa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80017fc:	69da      	ldr	r2, [r3, #28]
 80017fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001802:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800180a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800180c:	69da      	ldr	r2, [r3, #28]
 800180e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001812:	e7ec      	b.n	80017ee <HAL_TIM_PWM_ConfigChannel+0x9e>

08001814 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001814:	6a03      	ldr	r3, [r0, #32]
{
 8001816:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001818:	2401      	movs	r4, #1
 800181a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800181c:	ea23 0304 	bic.w	r3, r3, r4
 8001820:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001822:	6a03      	ldr	r3, [r0, #32]
 8001824:	408a      	lsls	r2, r1
 8001826:	431a      	orrs	r2, r3
 8001828:	6202      	str	r2, [r0, #32]
 800182a:	bd10      	pop	{r4, pc}

0800182c <HAL_TIM_PWM_Start>:
{
 800182c:	b510      	push	{r4, lr}
 800182e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001830:	2201      	movs	r2, #1
 8001832:	6800      	ldr	r0, [r0, #0]
 8001834:	f7ff ffee 	bl	8001814 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001838:	6823      	ldr	r3, [r4, #0]
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <HAL_TIM_PWM_Start+0x30>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d003      	beq.n	8001848 <HAL_TIM_PWM_Start+0x1c>
 8001840:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001844:	4293      	cmp	r3, r2
 8001846:	d103      	bne.n	8001850 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8001848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800184a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800184e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	f042 0201 	orr.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]
} 
 8001858:	2000      	movs	r0, #0
 800185a:	bd10      	pop	{r4, pc}
 800185c:	40010000 	.word	0x40010000

08001860 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001860:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001864:	2b01      	cmp	r3, #1
{
 8001866:	b510      	push	{r4, lr}
 8001868:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800186c:	d018      	beq.n	80018a0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800186e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001872:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001874:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001876:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001878:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800187a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800187e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	4322      	orrs	r2, r4
 8001884:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800188c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	430a      	orrs	r2, r1
 8001892:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001894:	2301      	movs	r3, #1
 8001896:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800189a:	2300      	movs	r3, #0
 800189c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80018a0:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80018a2:	bd10      	pop	{r4, pc}

080018a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80018a4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d01f      	beq.n	80018ec <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80018ac:	68cb      	ldr	r3, [r1, #12]
 80018ae:	688a      	ldr	r2, [r1, #8]
 80018b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018b4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80018b6:	684a      	ldr	r2, [r1, #4]
 80018b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018bc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80018be:	680a      	ldr	r2, [r1, #0]
 80018c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018c4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80018c6:	690a      	ldr	r2, [r1, #16]
 80018c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80018ce:	694a      	ldr	r2, [r1, #20]
 80018d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80018d6:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80018d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018dc:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80018de:	6802      	ldr	r2, [r0, #0]
 80018e0:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80018e2:	2300      	movs	r3, #0
 80018e4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80018e8:	4618      	mov	r0, r3
 80018ea:	4770      	bx	lr
  __HAL_LOCK(htim);
 80018ec:	2002      	movs	r0, #2
}
 80018ee:	4770      	bx	lr

080018f0 <HAL_TIMEx_CommutationCallback>:
 80018f0:	4770      	bx	lr

080018f2 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018f2:	4770      	bx	lr

080018f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80018f4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80018f6:	f000 ff0b 	bl	8002710 <vTaskStartScheduler>
  
  return osOK;
}
 80018fa:	2000      	movs	r0, #0
 80018fc:	bd08      	pop	{r3, pc}

080018fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80018fe:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001900:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001904:	8a02      	ldrh	r2, [r0, #16]
{
 8001906:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001908:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 800190c:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 800190e:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001910:	bf14      	ite	ne
 8001912:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001914:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001916:	a803      	add	r0, sp, #12
 8001918:	9001      	str	r0, [sp, #4]
 800191a:	9400      	str	r4, [sp, #0]
 800191c:	4628      	mov	r0, r5
 800191e:	f000 fe27 	bl	8002570 <xTaskCreate>
 8001922:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001924:	bf0c      	ite	eq
 8001926:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001928:	2000      	movne	r0, #0
}
 800192a:	b005      	add	sp, #20
 800192c:	bd30      	pop	{r4, r5, pc}

0800192e <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800192e:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001930:	f001 f984 	bl	8002c3c <xTaskGetSchedulerState>
 8001934:	2801      	cmp	r0, #1
 8001936:	d003      	beq.n	8001940 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001938:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800193c:	f000 b90a 	b.w	8001b54 <xPortSysTickHandler>
 8001940:	bd08      	pop	{r3, pc}

08001942 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001942:	f100 0308 	add.w	r3, r0, #8
 8001946:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001948:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800194c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800194e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001950:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001952:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001954:	6003      	str	r3, [r0, #0]
 8001956:	4770      	bx	lr

08001958 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001958:	2300      	movs	r3, #0
 800195a:	6103      	str	r3, [r0, #16]
 800195c:	4770      	bx	lr

0800195e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800195e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001960:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800196a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800196c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800196e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001970:	3301      	adds	r3, #1
 8001972:	6003      	str	r3, [r0, #0]
 8001974:	4770      	bx	lr

08001976 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001976:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001978:	1c53      	adds	r3, r2, #1
{
 800197a:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800197c:	d10a      	bne.n	8001994 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800197e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001984:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001986:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001988:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800198a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800198c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800198e:	3301      	adds	r3, #1
 8001990:	6003      	str	r3, [r0, #0]
 8001992:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001994:	f100 0308 	add.w	r3, r0, #8
 8001998:	685c      	ldr	r4, [r3, #4]
 800199a:	6825      	ldr	r5, [r4, #0]
 800199c:	42aa      	cmp	r2, r5
 800199e:	d3ef      	bcc.n	8001980 <vListInsert+0xa>
 80019a0:	4623      	mov	r3, r4
 80019a2:	e7f9      	b.n	8001998 <vListInsert+0x22>

080019a4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019a4:	6841      	ldr	r1, [r0, #4]
 80019a6:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80019a8:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019aa:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019ac:	6882      	ldr	r2, [r0, #8]
 80019ae:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80019b0:	6859      	ldr	r1, [r3, #4]
 80019b2:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019b4:	bf08      	it	eq
 80019b6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80019b8:	2200      	movs	r2, #0
 80019ba:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	3801      	subs	r0, #1
 80019c0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80019c2:	4770      	bx	lr

080019c4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <prvTaskExitError+0x2c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3301      	adds	r3, #1
 80019ca:	d008      	beq.n	80019de <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d0:	f383 8811 	msr	BASEPRI, r3
 80019d4:	f3bf 8f6f 	isb	sy
 80019d8:	f3bf 8f4f 	dsb	sy
 80019dc:	e7fe      	b.n	80019dc <prvTaskExitError+0x18>
 80019de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e2:	f383 8811 	msr	BASEPRI, r3
 80019e6:	f3bf 8f6f 	isb	sy
 80019ea:	f3bf 8f4f 	dsb	sy
 80019ee:	e7fe      	b.n	80019ee <prvTaskExitError+0x2a>
 80019f0:	20000000 	.word	0x20000000

080019f4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80019f4:	4806      	ldr	r0, [pc, #24]	; (8001a10 <prvPortStartFirstTask+0x1c>)
 80019f6:	6800      	ldr	r0, [r0, #0]
 80019f8:	6800      	ldr	r0, [r0, #0]
 80019fa:	f380 8808 	msr	MSP, r0
 80019fe:	b662      	cpsie	i
 8001a00:	b661      	cpsie	f
 8001a02:	f3bf 8f4f 	dsb	sy
 8001a06:	f3bf 8f6f 	isb	sy
 8001a0a:	df00      	svc	0
 8001a0c:	bf00      	nop
 8001a0e:	0000      	.short	0x0000
 8001a10:	e000ed08 	.word	0xe000ed08

08001a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001a14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001a24 <vPortEnableVFP+0x10>
 8001a18:	6801      	ldr	r1, [r0, #0]
 8001a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001a1e:	6001      	str	r1, [r0, #0]
 8001a20:	4770      	bx	lr
 8001a22:	0000      	.short	0x0000
 8001a24:	e000ed88 	.word	0xe000ed88

08001a28 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001a28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a2c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <pxPortInitialiseStack+0x28>)
 8001a32:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001a36:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001a3a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001a3e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001a42:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001a46:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001a4a:	3844      	subs	r0, #68	; 0x44
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	080019c5 	.word	0x080019c5
	...

08001a60 <SVC_Handler>:
	__asm volatile (
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <pxCurrentTCBConst2>)
 8001a62:	6819      	ldr	r1, [r3, #0]
 8001a64:	6808      	ldr	r0, [r1, #0]
 8001a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a6a:	f380 8809 	msr	PSP, r0
 8001a6e:	f3bf 8f6f 	isb	sy
 8001a72:	f04f 0000 	mov.w	r0, #0
 8001a76:	f380 8811 	msr	BASEPRI, r0
 8001a7a:	4770      	bx	lr
 8001a7c:	f3af 8000 	nop.w

08001a80 <pxCurrentTCBConst2>:
 8001a80:	20003c44 	.word	0x20003c44

08001a84 <vPortEnterCritical>:
 8001a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a88:	f383 8811 	msr	BASEPRI, r3
 8001a8c:	f3bf 8f6f 	isb	sy
 8001a90:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <vPortEnterCritical+0x3c>)
 8001a96:	6813      	ldr	r3, [r2, #0]
 8001a98:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8001a9a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001a9c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001a9e:	d10d      	bne.n	8001abc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <vPortEnterCritical+0x40>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001aa8:	d008      	beq.n	8001abc <vPortEnterCritical+0x38>
 8001aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aae:	f383 8811 	msr	BASEPRI, r3
 8001ab2:	f3bf 8f6f 	isb	sy
 8001ab6:	f3bf 8f4f 	dsb	sy
 8001aba:	e7fe      	b.n	8001aba <vPortEnterCritical+0x36>
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	e000ed04 	.word	0xe000ed04

08001ac8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001ac8:	4a08      	ldr	r2, [pc, #32]	; (8001aec <vPortExitCritical+0x24>)
 8001aca:	6813      	ldr	r3, [r2, #0]
 8001acc:	b943      	cbnz	r3, 8001ae0 <vPortExitCritical+0x18>
 8001ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad2:	f383 8811 	msr	BASEPRI, r3
 8001ad6:	f3bf 8f6f 	isb	sy
 8001ada:	f3bf 8f4f 	dsb	sy
 8001ade:	e7fe      	b.n	8001ade <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001ae4:	b90b      	cbnz	r3, 8001aea <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001ae6:	f383 8811 	msr	BASEPRI, r3
 8001aea:	4770      	bx	lr
 8001aec:	20000000 	.word	0x20000000

08001af0 <PendSV_Handler>:
	__asm volatile
 8001af0:	f3ef 8009 	mrs	r0, PSP
 8001af4:	f3bf 8f6f 	isb	sy
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <pxCurrentTCBConst>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	f01e 0f10 	tst.w	lr, #16
 8001b00:	bf08      	it	eq
 8001b02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001b06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b0a:	6010      	str	r0, [r2, #0]
 8001b0c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001b10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001b14:	f380 8811 	msr	BASEPRI, r0
 8001b18:	f3bf 8f4f 	dsb	sy
 8001b1c:	f3bf 8f6f 	isb	sy
 8001b20:	f000 ff88 	bl	8002a34 <vTaskSwitchContext>
 8001b24:	f04f 0000 	mov.w	r0, #0
 8001b28:	f380 8811 	msr	BASEPRI, r0
 8001b2c:	bc08      	pop	{r3}
 8001b2e:	6819      	ldr	r1, [r3, #0]
 8001b30:	6808      	ldr	r0, [r1, #0]
 8001b32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b36:	f01e 0f10 	tst.w	lr, #16
 8001b3a:	bf08      	it	eq
 8001b3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001b40:	f380 8809 	msr	PSP, r0
 8001b44:	f3bf 8f6f 	isb	sy
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	f3af 8000 	nop.w

08001b50 <pxCurrentTCBConst>:
 8001b50:	20003c44 	.word	0x20003c44

08001b54 <xPortSysTickHandler>:
{
 8001b54:	b508      	push	{r3, lr}
	__asm volatile
 8001b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5a:	f383 8811 	msr	BASEPRI, r3
 8001b5e:	f3bf 8f6f 	isb	sy
 8001b62:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001b66:	f000 fe21 	bl	80027ac <xTaskIncrementTick>
 8001b6a:	b118      	cbz	r0, 8001b74 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <xPortSysTickHandler+0x28>)
 8001b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b72:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001b74:	2300      	movs	r3, #0
 8001b76:	f383 8811 	msr	BASEPRI, r3
 8001b7a:	bd08      	pop	{r3, pc}
 8001b7c:	e000ed04 	.word	0xe000ed04

08001b80 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <vPortSetupTimerInterrupt+0x1c>)
 8001b82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <vPortSetupTimerInterrupt+0x20>)
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001b92:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <vPortSetupTimerInterrupt+0x24>)
 8001b94:	2207      	movs	r2, #7
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000004 	.word	0x20000004
 8001ba0:	e000e014 	.word	0xe000e014
 8001ba4:	e000e010 	.word	0xe000e010

08001ba8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001ba8:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <xPortStartScheduler+0xc8>)
 8001baa:	4a32      	ldr	r2, [pc, #200]	; (8001c74 <xPortStartScheduler+0xcc>)
{
 8001bac:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001bae:	6819      	ldr	r1, [r3, #0]
 8001bb0:	4291      	cmp	r1, r2
 8001bb2:	d108      	bne.n	8001bc6 <xPortStartScheduler+0x1e>
	__asm volatile
 8001bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb8:	f383 8811 	msr	BASEPRI, r3
 8001bbc:	f3bf 8f6f 	isb	sy
 8001bc0:	f3bf 8f4f 	dsb	sy
 8001bc4:	e7fe      	b.n	8001bc4 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <xPortStartScheduler+0xd0>)
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d108      	bne.n	8001be0 <xPortStartScheduler+0x38>
 8001bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bd2:	f383 8811 	msr	BASEPRI, r3
 8001bd6:	f3bf 8f6f 	isb	sy
 8001bda:	f3bf 8f4f 	dsb	sy
 8001bde:	e7fe      	b.n	8001bde <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001be0:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <xPortStartScheduler+0xd4>)
 8001be2:	781a      	ldrb	r2, [r3, #0]
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001be8:	22ff      	movs	r2, #255	; 0xff
 8001bea:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001bec:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001bee:	4a24      	ldr	r2, [pc, #144]	; (8001c80 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001bf6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001bfa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001bfe:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001c00:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <xPortStartScheduler+0xdc>)
 8001c02:	2207      	movs	r2, #7
 8001c04:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001c06:	2100      	movs	r1, #0
 8001c08:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001c0c:	0600      	lsls	r0, r0, #24
 8001c0e:	f102 34ff 	add.w	r4, r2, #4294967295
 8001c12:	d423      	bmi.n	8001c5c <xPortStartScheduler+0xb4>
 8001c14:	b101      	cbz	r1, 8001c18 <xPortStartScheduler+0x70>
 8001c16:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001c1c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001c20:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001c22:	9b01      	ldr	r3, [sp, #4]
 8001c24:	4a15      	ldr	r2, [pc, #84]	; (8001c7c <xPortStartScheduler+0xd4>)
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <xPortStartScheduler+0xe0>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001c32:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001c3a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001c3c:	f7ff ffa0 	bl	8001b80 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <xPortStartScheduler+0xe4>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8001c46:	f7ff fee5 	bl	8001a14 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001c4a:	4a11      	ldr	r2, [pc, #68]	; (8001c90 <xPortStartScheduler+0xe8>)
 8001c4c:	6813      	ldr	r3, [r2, #0]
 8001c4e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001c52:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001c54:	f7ff fece 	bl	80019f4 <prvPortStartFirstTask>
	prvTaskExitError();
 8001c58:	f7ff feb4 	bl	80019c4 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001c5c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001c60:	0052      	lsls	r2, r2, #1
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	f88d 2003 	strb.w	r2, [sp, #3]
 8001c68:	2101      	movs	r1, #1
 8001c6a:	4622      	mov	r2, r4
 8001c6c:	e7cc      	b.n	8001c08 <xPortStartScheduler+0x60>
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00
 8001c74:	410fc271 	.word	0x410fc271
 8001c78:	410fc270 	.word	0x410fc270
 8001c7c:	e000e400 	.word	0xe000e400
 8001c80:	20000024 	.word	0x20000024
 8001c84:	20000028 	.word	0x20000028
 8001c88:	e000ed20 	.word	0xe000ed20
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	e000ef34 	.word	0xe000ef34

08001c94 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8001c94:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001c98:	2b0f      	cmp	r3, #15
 8001c9a:	d90e      	bls.n	8001cba <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001c9c:	4a10      	ldr	r2, [pc, #64]	; (8001ce0 <vPortValidateInterruptPriority+0x4c>)
 8001c9e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001ca0:	4a10      	ldr	r2, [pc, #64]	; (8001ce4 <vPortValidateInterruptPriority+0x50>)
 8001ca2:	7812      	ldrb	r2, [r2, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d908      	bls.n	8001cba <vPortValidateInterruptPriority+0x26>
 8001ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cac:	f383 8811 	msr	BASEPRI, r3
 8001cb0:	f3bf 8f6f 	isb	sy
 8001cb4:	f3bf 8f4f 	dsb	sy
 8001cb8:	e7fe      	b.n	8001cb8 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <vPortValidateInterruptPriority+0x54>)
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <vPortValidateInterruptPriority+0x58>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d908      	bls.n	8001cdc <vPortValidateInterruptPriority+0x48>
 8001cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cce:	f383 8811 	msr	BASEPRI, r3
 8001cd2:	f3bf 8f6f 	isb	sy
 8001cd6:	f3bf 8f4f 	dsb	sy
 8001cda:	e7fe      	b.n	8001cda <vPortValidateInterruptPriority+0x46>
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000e3f0 	.word	0xe000e3f0
 8001ce4:	20000024 	.word	0x20000024
 8001ce8:	e000ed0c 	.word	0xe000ed0c
 8001cec:	20000028 	.word	0x20000028

08001cf0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001cf0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <prvInsertBlockIntoFreeList+0x40>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4282      	cmp	r2, r0
 8001cf8:	d318      	bcc.n	8001d2c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001cfa:	685c      	ldr	r4, [r3, #4]
 8001cfc:	1919      	adds	r1, r3, r4
 8001cfe:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001d00:	bf01      	itttt	eq
 8001d02:	6841      	ldreq	r1, [r0, #4]
 8001d04:	4618      	moveq	r0, r3
 8001d06:	1909      	addeq	r1, r1, r4
 8001d08:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001d0a:	6844      	ldr	r4, [r0, #4]
 8001d0c:	1901      	adds	r1, r0, r4
 8001d0e:	428a      	cmp	r2, r1
 8001d10:	d107      	bne.n	8001d22 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001d12:	4908      	ldr	r1, [pc, #32]	; (8001d34 <prvInsertBlockIntoFreeList+0x44>)
 8001d14:	6809      	ldr	r1, [r1, #0]
 8001d16:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001d18:	bf1f      	itttt	ne
 8001d1a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001d1c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001d1e:	1909      	addne	r1, r1, r4
 8001d20:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001d22:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001d24:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001d26:	bf18      	it	ne
 8001d28:	6018      	strne	r0, [r3, #0]
 8001d2a:	bd10      	pop	{r4, pc}
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	e7e1      	b.n	8001cf4 <prvInsertBlockIntoFreeList+0x4>
 8001d30:	20003c3c 	.word	0x20003c3c
 8001d34:	2000002c 	.word	0x2000002c

08001d38 <pvPortMalloc>:
{
 8001d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d3c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001d3e:	f000 fd27 	bl	8002790 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001d42:	493e      	ldr	r1, [pc, #248]	; (8001e3c <pvPortMalloc+0x104>)
 8001d44:	4d3e      	ldr	r5, [pc, #248]	; (8001e40 <pvPortMalloc+0x108>)
 8001d46:	680b      	ldr	r3, [r1, #0]
 8001d48:	bb0b      	cbnz	r3, 8001d8e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001d4a:	4a3e      	ldr	r2, [pc, #248]	; (8001e44 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001d4c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001d4e:	bf1f      	itttt	ne
 8001d50:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d52:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001d56:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8001d5a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d5c:	bf14      	ite	ne
 8001d5e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001d60:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001d64:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001d66:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d68:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d6c:	4e36      	ldr	r6, [pc, #216]	; (8001e48 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8001d6e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001d70:	2000      	movs	r0, #0
 8001d72:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d74:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001d76:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001d78:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001d7a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001d7c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d7e:	4b33      	ldr	r3, [pc, #204]	; (8001e4c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001d80:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d82:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d84:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <pvPortMalloc+0x118>)
 8001d86:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001d88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001d8c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001d8e:	682f      	ldr	r7, [r5, #0]
 8001d90:	4227      	tst	r7, r4
 8001d92:	d116      	bne.n	8001dc2 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001d94:	2c00      	cmp	r4, #0
 8001d96:	d041      	beq.n	8001e1c <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8001d98:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001d9c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001d9e:	bf1c      	itt	ne
 8001da0:	f023 0307 	bicne.w	r3, r3, #7
 8001da4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001da6:	b163      	cbz	r3, 8001dc2 <pvPortMalloc+0x8a>
 8001da8:	4a29      	ldr	r2, [pc, #164]	; (8001e50 <pvPortMalloc+0x118>)
 8001daa:	6816      	ldr	r6, [r2, #0]
 8001dac:	42b3      	cmp	r3, r6
 8001dae:	4690      	mov	r8, r2
 8001db0:	d807      	bhi.n	8001dc2 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001db2:	4a25      	ldr	r2, [pc, #148]	; (8001e48 <pvPortMalloc+0x110>)
 8001db4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001db6:	6868      	ldr	r0, [r5, #4]
 8001db8:	4283      	cmp	r3, r0
 8001dba:	d804      	bhi.n	8001dc6 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001dbc:	6809      	ldr	r1, [r1, #0]
 8001dbe:	428d      	cmp	r5, r1
 8001dc0:	d107      	bne.n	8001dd2 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001dc2:	2400      	movs	r4, #0
 8001dc4:	e02a      	b.n	8001e1c <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001dc6:	682c      	ldr	r4, [r5, #0]
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d0f7      	beq.n	8001dbc <pvPortMalloc+0x84>
 8001dcc:	462a      	mov	r2, r5
 8001dce:	4625      	mov	r5, r4
 8001dd0:	e7f1      	b.n	8001db6 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001dd2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001dd4:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001dd6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001dd8:	1ac2      	subs	r2, r0, r3
 8001dda:	2a10      	cmp	r2, #16
 8001ddc:	d90f      	bls.n	8001dfe <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001dde:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001de0:	0741      	lsls	r1, r0, #29
 8001de2:	d008      	beq.n	8001df6 <pvPortMalloc+0xbe>
 8001de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de8:	f383 8811 	msr	BASEPRI, r3
 8001dec:	f3bf 8f6f 	isb	sy
 8001df0:	f3bf 8f4f 	dsb	sy
 8001df4:	e7fe      	b.n	8001df4 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001df6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001df8:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001dfa:	f7ff ff79 	bl	8001cf0 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001dfe:	4913      	ldr	r1, [pc, #76]	; (8001e4c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e00:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e02:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e04:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001e06:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e08:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8001e0a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e0e:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001e12:	bf38      	it	cc
 8001e14:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001e16:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001e18:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001e1a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001e1c:	f000 fd58 	bl	80028d0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e20:	0763      	lsls	r3, r4, #29
 8001e22:	d008      	beq.n	8001e36 <pvPortMalloc+0xfe>
 8001e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e28:	f383 8811 	msr	BASEPRI, r3
 8001e2c:	f3bf 8f6f 	isb	sy
 8001e30:	f3bf 8f4f 	dsb	sy
 8001e34:	e7fe      	b.n	8001e34 <pvPortMalloc+0xfc>
}
 8001e36:	4620      	mov	r0, r4
 8001e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e3c:	2000002c 	.word	0x2000002c
 8001e40:	20003c30 	.word	0x20003c30
 8001e44:	20000030 	.word	0x20000030
 8001e48:	20003c3c 	.word	0x20003c3c
 8001e4c:	20003c38 	.word	0x20003c38
 8001e50:	20003c34 	.word	0x20003c34

08001e54 <vPortFree>:
{
 8001e54:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001e56:	4604      	mov	r4, r0
 8001e58:	b370      	cbz	r0, 8001eb8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001e5a:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <vPortFree+0x68>)
 8001e5c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	4213      	tst	r3, r2
 8001e64:	d108      	bne.n	8001e78 <vPortFree+0x24>
 8001e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6a:	f383 8811 	msr	BASEPRI, r3
 8001e6e:	f3bf 8f6f 	isb	sy
 8001e72:	f3bf 8f4f 	dsb	sy
 8001e76:	e7fe      	b.n	8001e76 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001e78:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001e7c:	b141      	cbz	r1, 8001e90 <vPortFree+0x3c>
 8001e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e82:	f383 8811 	msr	BASEPRI, r3
 8001e86:	f3bf 8f6f 	isb	sy
 8001e8a:	f3bf 8f4f 	dsb	sy
 8001e8e:	e7fe      	b.n	8001e8e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001e90:	ea23 0302 	bic.w	r3, r3, r2
 8001e94:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001e98:	f000 fc7a 	bl	8002790 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001e9c:	4a08      	ldr	r2, [pc, #32]	; (8001ec0 <vPortFree+0x6c>)
 8001e9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001ea2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001ea4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001ea8:	440b      	add	r3, r1
 8001eaa:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001eac:	f7ff ff20 	bl	8001cf0 <prvInsertBlockIntoFreeList>
}
 8001eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001eb4:	f000 bd0c 	b.w	80028d0 <xTaskResumeAll>
 8001eb8:	bd10      	pop	{r4, pc}
 8001eba:	bf00      	nop
 8001ebc:	20003c30 	.word	0x20003c30
 8001ec0:	20003c34 	.word	0x20003c34

08001ec4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001ec4:	b570      	push	{r4, r5, r6, lr}
 8001ec6:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001ec8:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001eca:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8001ecc:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001ece:	b942      	cbnz	r2, 8001ee2 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001ed0:	6805      	ldr	r5, [r0, #0]
 8001ed2:	b99d      	cbnz	r5, 8001efc <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001ed4:	6840      	ldr	r0, [r0, #4]
 8001ed6:	f000 ff07 	bl	8002ce8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001eda:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001edc:	3601      	adds	r6, #1
 8001ede:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8001ee0:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8001ee2:	b96d      	cbnz	r5, 8001f00 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001ee4:	6880      	ldr	r0, [r0, #8]
 8001ee6:	f001 ffc1 	bl	8003e6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001eea:	68a3      	ldr	r3, [r4, #8]
 8001eec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001eee:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001ef0:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001ef2:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d301      	bcc.n	8001efc <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8001efc:	2000      	movs	r0, #0
 8001efe:	e7ed      	b.n	8001edc <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f00:	68c0      	ldr	r0, [r0, #12]
 8001f02:	f001 ffb3 	bl	8003e6c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001f06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f08:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f0a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001f0c:	425b      	negs	r3, r3
 8001f0e:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f10:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001f12:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001f14:	bf3e      	ittt	cc
 8001f16:	6862      	ldrcc	r2, [r4, #4]
 8001f18:	189b      	addcc	r3, r3, r2
 8001f1a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001f1c:	2d02      	cmp	r5, #2
 8001f1e:	d1ed      	bne.n	8001efc <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f20:	b10e      	cbz	r6, 8001f26 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8001f22:	3e01      	subs	r6, #1
 8001f24:	e7ea      	b.n	8001efc <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8001f26:	4630      	mov	r0, r6
 8001f28:	e7d8      	b.n	8001edc <prvCopyDataToQueue+0x18>

08001f2a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8001f30:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001f32:	b162      	cbz	r2, 8001f4e <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001f34:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001f36:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001f38:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001f3a:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001f3c:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001f3e:	bf24      	itt	cs
 8001f40:	6819      	ldrcs	r1, [r3, #0]
 8001f42:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001f44:	68d9      	ldr	r1, [r3, #12]
	}
}
 8001f46:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001f4a:	f001 bf8f 	b.w	8003e6c <memcpy>
}
 8001f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001f54:	b570      	push	{r4, r5, r6, lr}
 8001f56:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001f58:	f7ff fd94 	bl	8001a84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001f5c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f60:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8001f64:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f66:	2d00      	cmp	r5, #0
 8001f68:	dc14      	bgt.n	8001f94 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001f6a:	23ff      	movs	r3, #255	; 0xff
 8001f6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001f70:	f7ff fdaa 	bl	8001ac8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001f74:	f7ff fd86 	bl	8001a84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001f78:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f7c:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8001f80:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f82:	2d00      	cmp	r5, #0
 8001f84:	dc12      	bgt.n	8001fac <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001f86:	23ff      	movs	r3, #255	; 0xff
 8001f88:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8001f8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8001f90:	f7ff bd9a 	b.w	8001ac8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0e7      	beq.n	8001f6a <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f9a:	4630      	mov	r0, r6
 8001f9c:	f000 fdbc 	bl	8002b18 <xTaskRemoveFromEventList>
 8001fa0:	b108      	cbz	r0, 8001fa6 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8001fa2:	f000 fe45 	bl	8002c30 <vTaskMissedYield>
 8001fa6:	3d01      	subs	r5, #1
 8001fa8:	b26d      	sxtb	r5, r5
 8001faa:	e7dc      	b.n	8001f66 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fac:	6923      	ldr	r3, [r4, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0e9      	beq.n	8001f86 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fb2:	4630      	mov	r0, r6
 8001fb4:	f000 fdb0 	bl	8002b18 <xTaskRemoveFromEventList>
 8001fb8:	b108      	cbz	r0, 8001fbe <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8001fba:	f000 fe39 	bl	8002c30 <vTaskMissedYield>
 8001fbe:	3d01      	subs	r5, #1
 8001fc0:	b26d      	sxtb	r5, r5
 8001fc2:	e7de      	b.n	8001f82 <prvUnlockQueue+0x2e>

08001fc4 <xQueueGenericReset>:
{
 8001fc4:	b538      	push	{r3, r4, r5, lr}
 8001fc6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8001fc8:	4604      	mov	r4, r0
 8001fca:	b940      	cbnz	r0, 8001fde <xQueueGenericReset+0x1a>
 8001fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd0:	f383 8811 	msr	BASEPRI, r3
 8001fd4:	f3bf 8f6f 	isb	sy
 8001fd8:	f3bf 8f4f 	dsb	sy
 8001fdc:	e7fe      	b.n	8001fdc <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8001fde:	f7ff fd51 	bl	8001a84 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001fe2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001fe4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fe6:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001fe8:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001fea:	4343      	muls	r3, r0
 8001fec:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001fee:	1a1b      	subs	r3, r3, r0
 8001ff0:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001ff2:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001ff4:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001ff6:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8001ff8:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001ffa:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8001ffc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002000:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002004:	b995      	cbnz	r5, 800202c <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002006:	6923      	ldr	r3, [r4, #16]
 8002008:	b163      	cbz	r3, 8002024 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800200a:	f104 0010 	add.w	r0, r4, #16
 800200e:	f000 fd83 	bl	8002b18 <xTaskRemoveFromEventList>
 8002012:	b138      	cbz	r0, 8002024 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <xQueueGenericReset+0x7c>)
 8002016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	f3bf 8f4f 	dsb	sy
 8002020:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8002024:	f7ff fd50 	bl	8001ac8 <vPortExitCritical>
}
 8002028:	2001      	movs	r0, #1
 800202a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800202c:	f104 0010 	add.w	r0, r4, #16
 8002030:	f7ff fc87 	bl	8001942 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002034:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002038:	f7ff fc83 	bl	8001942 <vListInitialise>
 800203c:	e7f2      	b.n	8002024 <xQueueGenericReset+0x60>
 800203e:	bf00      	nop
 8002040:	e000ed04 	.word	0xe000ed04

08002044 <xQueueGenericCreate>:
	{
 8002044:	b570      	push	{r4, r5, r6, lr}
 8002046:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002048:	4606      	mov	r6, r0
 800204a:	b940      	cbnz	r0, 800205e <xQueueGenericCreate+0x1a>
 800204c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002050:	f383 8811 	msr	BASEPRI, r3
 8002054:	f3bf 8f6f 	isb	sy
 8002058:	f3bf 8f4f 	dsb	sy
 800205c:	e7fe      	b.n	800205c <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800205e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002060:	3048      	adds	r0, #72	; 0x48
 8002062:	f7ff fe69 	bl	8001d38 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002066:	4604      	mov	r4, r0
 8002068:	b138      	cbz	r0, 800207a <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800206a:	b945      	cbnz	r5, 800207e <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800206c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800206e:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002070:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002072:	2101      	movs	r1, #1
 8002074:	4620      	mov	r0, r4
 8002076:	f7ff ffa5 	bl	8001fc4 <xQueueGenericReset>
	}
 800207a:	4620      	mov	r0, r4
 800207c:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800207e:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002082:	6003      	str	r3, [r0, #0]
 8002084:	e7f3      	b.n	800206e <xQueueGenericCreate+0x2a>
	...

08002088 <xQueueGenericSend>:
{
 8002088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800208c:	4689      	mov	r9, r1
 800208e:	9201      	str	r2, [sp, #4]
 8002090:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002092:	4604      	mov	r4, r0
 8002094:	b940      	cbnz	r0, 80020a8 <xQueueGenericSend+0x20>
 8002096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800209a:	f383 8811 	msr	BASEPRI, r3
 800209e:	f3bf 8f6f 	isb	sy
 80020a2:	f3bf 8f4f 	dsb	sy
 80020a6:	e7fe      	b.n	80020a6 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020a8:	2900      	cmp	r1, #0
 80020aa:	f040 8088 	bne.w	80021be <xQueueGenericSend+0x136>
 80020ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 8084 	beq.w	80021be <xQueueGenericSend+0x136>
 80020b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ba:	f383 8811 	msr	BASEPRI, r3
 80020be:	f3bf 8f6f 	isb	sy
 80020c2:	f3bf 8f4f 	dsb	sy
 80020c6:	e7fe      	b.n	80020c6 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020c8:	9e01      	ldr	r6, [sp, #4]
 80020ca:	2e00      	cmp	r6, #0
 80020cc:	f000 8082 	beq.w	80021d4 <xQueueGenericSend+0x14c>
 80020d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d4:	f383 8811 	msr	BASEPRI, r3
 80020d8:	f3bf 8f6f 	isb	sy
 80020dc:	f3bf 8f4f 	dsb	sy
 80020e0:	e7fe      	b.n	80020e0 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 80020e2:	9d01      	ldr	r5, [sp, #4]
 80020e4:	b91d      	cbnz	r5, 80020ee <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 80020e6:	f7ff fcef 	bl	8001ac8 <vPortExitCritical>
			return errQUEUE_FULL;
 80020ea:	2000      	movs	r0, #0
 80020ec:	e058      	b.n	80021a0 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 80020ee:	b916      	cbnz	r6, 80020f6 <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 80020f0:	a802      	add	r0, sp, #8
 80020f2:	f000 fd53 	bl	8002b9c <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80020f6:	f7ff fce7 	bl	8001ac8 <vPortExitCritical>
		vTaskSuspendAll();
 80020fa:	f000 fb49 	bl	8002790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020fe:	f7ff fcc1 	bl	8001a84 <vPortEnterCritical>
 8002102:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002106:	2bff      	cmp	r3, #255	; 0xff
 8002108:	bf08      	it	eq
 800210a:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800210e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002112:	2bff      	cmp	r3, #255	; 0xff
 8002114:	bf08      	it	eq
 8002116:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800211a:	f7ff fcd5 	bl	8001ac8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800211e:	a901      	add	r1, sp, #4
 8002120:	a802      	add	r0, sp, #8
 8002122:	f000 fd4b 	bl	8002bbc <xTaskCheckForTimeOut>
 8002126:	2800      	cmp	r0, #0
 8002128:	d143      	bne.n	80021b2 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800212a:	f7ff fcab 	bl	8001a84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800212e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002130:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002132:	f7ff fcc9 	bl	8001ac8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002136:	42ae      	cmp	r6, r5
 8002138:	d135      	bne.n	80021a6 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800213a:	9901      	ldr	r1, [sp, #4]
 800213c:	f104 0010 	add.w	r0, r4, #16
 8002140:	f000 fcb2 	bl	8002aa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002144:	4620      	mov	r0, r4
 8002146:	f7ff ff05 	bl	8001f54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800214a:	f000 fbc1 	bl	80028d0 <xTaskResumeAll>
 800214e:	b938      	cbnz	r0, 8002160 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8002150:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002154:	f8ca 3000 	str.w	r3, [sl]
 8002158:	f3bf 8f4f 	dsb	sy
 800215c:	f3bf 8f6f 	isb	sy
 8002160:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002162:	f7ff fc8f 	bl	8001a84 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002166:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002168:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800216a:	429a      	cmp	r2, r3
 800216c:	d301      	bcc.n	8002172 <xQueueGenericSend+0xea>
 800216e:	2f02      	cmp	r7, #2
 8002170:	d1b7      	bne.n	80020e2 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002172:	463a      	mov	r2, r7
 8002174:	4649      	mov	r1, r9
 8002176:	4620      	mov	r0, r4
 8002178:	f7ff fea4 	bl	8001ec4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800217c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800217e:	b11b      	cbz	r3, 8002188 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002180:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002184:	f000 fcc8 	bl	8002b18 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8002188:	b138      	cbz	r0, 800219a <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 800218a:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <xQueueGenericSend+0x168>)
 800218c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	f3bf 8f4f 	dsb	sy
 8002196:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800219a:	f7ff fc95 	bl	8001ac8 <vPortExitCritical>
				return pdPASS;
 800219e:	2001      	movs	r0, #1
}
 80021a0:	b004      	add	sp, #16
 80021a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80021a6:	4620      	mov	r0, r4
 80021a8:	f7ff fed4 	bl	8001f54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021ac:	f000 fb90 	bl	80028d0 <xTaskResumeAll>
 80021b0:	e7d6      	b.n	8002160 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 80021b2:	4620      	mov	r0, r4
 80021b4:	f7ff fece 	bl	8001f54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021b8:	f000 fb8a 	bl	80028d0 <xTaskResumeAll>
 80021bc:	e795      	b.n	80020ea <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80021be:	2f02      	cmp	r7, #2
 80021c0:	d102      	bne.n	80021c8 <xQueueGenericSend+0x140>
 80021c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d10a      	bne.n	80021de <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021c8:	f000 fd38 	bl	8002c3c <xTaskGetSchedulerState>
 80021cc:	2800      	cmp	r0, #0
 80021ce:	f43f af7b 	beq.w	80020c8 <xQueueGenericSend+0x40>
 80021d2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80021d4:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80021d8:	f8df a014 	ldr.w	sl, [pc, #20]	; 80021f0 <xQueueGenericSend+0x168>
 80021dc:	e7c1      	b.n	8002162 <xQueueGenericSend+0xda>
 80021de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e2:	f383 8811 	msr	BASEPRI, r3
 80021e6:	f3bf 8f6f 	isb	sy
 80021ea:	f3bf 8f4f 	dsb	sy
 80021ee:	e7fe      	b.n	80021ee <xQueueGenericSend+0x166>
 80021f0:	e000ed04 	.word	0xe000ed04

080021f4 <xQueueGenericSendFromISR>:
{
 80021f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021f8:	4688      	mov	r8, r1
 80021fa:	4691      	mov	r9, r2
 80021fc:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80021fe:	4604      	mov	r4, r0
 8002200:	b940      	cbnz	r0, 8002214 <xQueueGenericSendFromISR+0x20>
 8002202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002206:	f383 8811 	msr	BASEPRI, r3
 800220a:	f3bf 8f6f 	isb	sy
 800220e:	f3bf 8f4f 	dsb	sy
 8002212:	e7fe      	b.n	8002212 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002214:	bb09      	cbnz	r1, 800225a <xQueueGenericSendFromISR+0x66>
 8002216:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002218:	b1fb      	cbz	r3, 800225a <xQueueGenericSendFromISR+0x66>
 800221a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221e:	f383 8811 	msr	BASEPRI, r3
 8002222:	f3bf 8f6f 	isb	sy
 8002226:	f3bf 8f4f 	dsb	sy
 800222a:	e7fe      	b.n	800222a <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800222c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002230:	f000 fc72 	bl	8002b18 <xTaskRemoveFromEventList>
 8002234:	2800      	cmp	r0, #0
 8002236:	d034      	beq.n	80022a2 <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8002238:	f1b9 0f00 	cmp.w	r9, #0
 800223c:	d031      	beq.n	80022a2 <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800223e:	2001      	movs	r0, #1
 8002240:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8002244:	f386 8811 	msr	BASEPRI, r6
}
 8002248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800224c:	3501      	adds	r5, #1
 800224e:	b26d      	sxtb	r5, r5
 8002250:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8002254:	e025      	b.n	80022a2 <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 8002256:	2000      	movs	r0, #0
 8002258:	e7f4      	b.n	8002244 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800225a:	2f02      	cmp	r7, #2
 800225c:	d102      	bne.n	8002264 <xQueueGenericSendFromISR+0x70>
 800225e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002260:	2b01      	cmp	r3, #1
 8002262:	d120      	bne.n	80022a6 <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002264:	f7ff fd16 	bl	8001c94 <vPortValidateInterruptPriority>
	__asm volatile
 8002268:	f3ef 8611 	mrs	r6, BASEPRI
 800226c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002270:	f383 8811 	msr	BASEPRI, r3
 8002274:	f3bf 8f6f 	isb	sy
 8002278:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800227c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800227e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002280:	429a      	cmp	r2, r3
 8002282:	d301      	bcc.n	8002288 <xQueueGenericSendFromISR+0x94>
 8002284:	2f02      	cmp	r7, #2
 8002286:	d1e6      	bne.n	8002256 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002288:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800228c:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 800228e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002290:	4641      	mov	r1, r8
 8002292:	4620      	mov	r0, r4
 8002294:	f7ff fe16 	bl	8001ec4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002298:	1c6b      	adds	r3, r5, #1
 800229a:	d1d7      	bne.n	800224c <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800229c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1c4      	bne.n	800222c <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 80022a2:	2001      	movs	r0, #1
 80022a4:	e7ce      	b.n	8002244 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 80022a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022aa:	f383 8811 	msr	BASEPRI, r3
 80022ae:	f3bf 8f6f 	isb	sy
 80022b2:	f3bf 8f4f 	dsb	sy
 80022b6:	e7fe      	b.n	80022b6 <xQueueGenericSendFromISR+0xc2>

080022b8 <xQueueGenericReceive>:
{
 80022b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022bc:	4688      	mov	r8, r1
 80022be:	9201      	str	r2, [sp, #4]
 80022c0:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 80022c2:	4604      	mov	r4, r0
 80022c4:	b940      	cbnz	r0, 80022d8 <xQueueGenericReceive+0x20>
 80022c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ca:	f383 8811 	msr	BASEPRI, r3
 80022ce:	f3bf 8f6f 	isb	sy
 80022d2:	f3bf 8f4f 	dsb	sy
 80022d6:	e7fe      	b.n	80022d6 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022d8:	2900      	cmp	r1, #0
 80022da:	f040 80a5 	bne.w	8002428 <xQueueGenericReceive+0x170>
 80022de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80a1 	beq.w	8002428 <xQueueGenericReceive+0x170>
 80022e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ea:	f383 8811 	msr	BASEPRI, r3
 80022ee:	f3bf 8f6f 	isb	sy
 80022f2:	f3bf 8f4f 	dsb	sy
 80022f6:	e7fe      	b.n	80022f6 <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022f8:	9e01      	ldr	r6, [sp, #4]
 80022fa:	2e00      	cmp	r6, #0
 80022fc:	f000 809a 	beq.w	8002434 <xQueueGenericReceive+0x17c>
 8002300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002304:	f383 8811 	msr	BASEPRI, r3
 8002308:	f3bf 8f6f 	isb	sy
 800230c:	f3bf 8f4f 	dsb	sy
 8002310:	e7fe      	b.n	8002310 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002312:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8002314:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002316:	2b00      	cmp	r3, #0
 8002318:	d06d      	beq.n	80023f6 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800231a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800231e:	e05f      	b.n	80023e0 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002320:	9d01      	ldr	r5, [sp, #4]
 8002322:	b91d      	cbnz	r5, 800232c <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 8002324:	f7ff fbd0 	bl	8001ac8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8002328:	4628      	mov	r0, r5
 800232a:	e067      	b.n	80023fc <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 800232c:	b916      	cbnz	r6, 8002334 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 800232e:	a802      	add	r0, sp, #8
 8002330:	f000 fc34 	bl	8002b9c <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8002334:	f7ff fbc8 	bl	8001ac8 <vPortExitCritical>
		vTaskSuspendAll();
 8002338:	f000 fa2a 	bl	8002790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800233c:	f7ff fba2 	bl	8001a84 <vPortEnterCritical>
 8002340:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002344:	2bff      	cmp	r3, #255	; 0xff
 8002346:	bf08      	it	eq
 8002348:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800234c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002350:	2bff      	cmp	r3, #255	; 0xff
 8002352:	bf08      	it	eq
 8002354:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002358:	f7ff fbb6 	bl	8001ac8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800235c:	a901      	add	r1, sp, #4
 800235e:	a802      	add	r0, sp, #8
 8002360:	f000 fc2c 	bl	8002bbc <xTaskCheckForTimeOut>
 8002364:	2800      	cmp	r0, #0
 8002366:	d152      	bne.n	800240e <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 8002368:	f7ff fb8c 	bl	8001a84 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800236c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800236e:	f7ff fbab 	bl	8001ac8 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002372:	2d00      	cmp	r5, #0
 8002374:	d145      	bne.n	8002402 <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002376:	6823      	ldr	r3, [r4, #0]
 8002378:	b933      	cbnz	r3, 8002388 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 800237a:	f7ff fb83 	bl	8001a84 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800237e:	6860      	ldr	r0, [r4, #4]
 8002380:	f000 fc6c 	bl	8002c5c <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8002384:	f7ff fba0 	bl	8001ac8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002388:	9901      	ldr	r1, [sp, #4]
 800238a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800238e:	f000 fb8b 	bl	8002aa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002392:	4620      	mov	r0, r4
 8002394:	f7ff fdde 	bl	8001f54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002398:	f000 fa9a 	bl	80028d0 <xTaskResumeAll>
 800239c:	b938      	cbnz	r0, 80023ae <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 800239e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80023a2:	f8ca 3000 	str.w	r3, [sl]
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	f3bf 8f6f 	isb	sy
 80023ae:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80023b0:	f7ff fb68 	bl	8001a84 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023b4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023b6:	2d00      	cmp	r5, #0
 80023b8:	d0b2      	beq.n	8002320 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023ba:	4641      	mov	r1, r8
 80023bc:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80023be:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023c0:	f7ff fdb3 	bl	8001f2a <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80023c4:	f1b9 0f00 	cmp.w	r9, #0
 80023c8:	d1a3      	bne.n	8002312 <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023ca:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80023cc:	3d01      	subs	r5, #1
 80023ce:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023d0:	b913      	cbnz	r3, 80023d8 <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80023d2:	f000 fcd9 	bl	8002d88 <pvTaskIncrementMutexHeldCount>
 80023d6:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023d8:	6923      	ldr	r3, [r4, #16]
 80023da:	b163      	cbz	r3, 80023f6 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023dc:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023e0:	f000 fb9a 	bl	8002b18 <xTaskRemoveFromEventList>
 80023e4:	b138      	cbz	r0, 80023f6 <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <xQueueGenericReceive+0x184>)
 80023e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	f3bf 8f4f 	dsb	sy
 80023f2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80023f6:	f7ff fb67 	bl	8001ac8 <vPortExitCritical>
				return pdPASS;
 80023fa:	2001      	movs	r0, #1
}
 80023fc:	b004      	add	sp, #16
 80023fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8002402:	4620      	mov	r0, r4
 8002404:	f7ff fda6 	bl	8001f54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002408:	f000 fa62 	bl	80028d0 <xTaskResumeAll>
 800240c:	e7cf      	b.n	80023ae <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 800240e:	4620      	mov	r0, r4
 8002410:	f7ff fda0 	bl	8001f54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002414:	f000 fa5c 	bl	80028d0 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8002418:	f7ff fb34 	bl	8001a84 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800241c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800241e:	f7ff fb53 	bl	8001ac8 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002422:	2d00      	cmp	r5, #0
 8002424:	d1c3      	bne.n	80023ae <xQueueGenericReceive+0xf6>
 8002426:	e77f      	b.n	8002328 <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002428:	f000 fc08 	bl	8002c3c <xTaskGetSchedulerState>
 800242c:	2800      	cmp	r0, #0
 800242e:	f43f af63 	beq.w	80022f8 <xQueueGenericReceive+0x40>
 8002432:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002434:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8002436:	f8df a004 	ldr.w	sl, [pc, #4]	; 800243c <xQueueGenericReceive+0x184>
 800243a:	e7b9      	b.n	80023b0 <xQueueGenericReceive+0xf8>
 800243c:	e000ed04 	.word	0xe000ed04

08002440 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002440:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002442:	4a07      	ldr	r2, [pc, #28]	; (8002460 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002444:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002446:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800244a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800244e:	b91d      	cbnz	r5, 8002458 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002450:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002454:	6060      	str	r0, [r4, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002456:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002458:	3301      	adds	r3, #1
 800245a:	2b08      	cmp	r3, #8
 800245c:	d1f3      	bne.n	8002446 <vQueueAddToRegistry+0x6>
 800245e:	bd30      	pop	{r4, r5, pc}
 8002460:	20003db0 	.word	0x20003db0

08002464 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002464:	b570      	push	{r4, r5, r6, lr}
 8002466:	4604      	mov	r4, r0
 8002468:	460d      	mov	r5, r1
 800246a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800246c:	f7ff fb0a 	bl	8001a84 <vPortEnterCritical>
 8002470:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002474:	2bff      	cmp	r3, #255	; 0xff
 8002476:	bf04      	itt	eq
 8002478:	2300      	moveq	r3, #0
 800247a:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800247e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002482:	2bff      	cmp	r3, #255	; 0xff
 8002484:	bf04      	itt	eq
 8002486:	2300      	moveq	r3, #0
 8002488:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800248c:	f7ff fb1c 	bl	8001ac8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002490:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002492:	b92b      	cbnz	r3, 80024a0 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002494:	4632      	mov	r2, r6
 8002496:	4629      	mov	r1, r5
 8002498:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800249c:	f000 fb1e 	bl	8002adc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80024a0:	4620      	mov	r0, r4
	}
 80024a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80024a6:	f7ff bd55 	b.w	8001f54 <prvUnlockQueue>
	...

080024ac <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024ac:	4a06      	ldr	r2, [pc, #24]	; (80024c8 <prvResetNextTaskUnblockTime+0x1c>)
 80024ae:	6813      	ldr	r3, [r2, #0]
 80024b0:	6819      	ldr	r1, [r3, #0]
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <prvResetNextTaskUnblockTime+0x20>)
 80024b4:	b919      	cbnz	r1, 80024be <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80024b6:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80024c2:	68d2      	ldr	r2, [r2, #12]
 80024c4:	6852      	ldr	r2, [r2, #4]
 80024c6:	e7f8      	b.n	80024ba <prvResetNextTaskUnblockTime+0xe>
 80024c8:	20003c48 	.word	0x20003c48
 80024cc:	20003d20 	.word	0x20003d20

080024d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80024d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80024d2:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024d4:	4e1b      	ldr	r6, [pc, #108]	; (8002544 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80024d6:	681d      	ldr	r5, [r3, #0]
{
 80024d8:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024da:	6830      	ldr	r0, [r6, #0]
 80024dc:	3004      	adds	r0, #4
{
 80024de:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024e0:	f7ff fa60 	bl	80019a4 <uxListRemove>
 80024e4:	4633      	mov	r3, r6
 80024e6:	b940      	cbnz	r0, 80024fa <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80024e8:	6831      	ldr	r1, [r6, #0]
 80024ea:	4e17      	ldr	r6, [pc, #92]	; (8002548 <prvAddCurrentTaskToDelayedList+0x78>)
 80024ec:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80024ee:	6832      	ldr	r2, [r6, #0]
 80024f0:	2001      	movs	r0, #1
 80024f2:	4088      	lsls	r0, r1
 80024f4:	ea22 0200 	bic.w	r2, r2, r0
 80024f8:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80024fa:	1c62      	adds	r2, r4, #1
 80024fc:	d107      	bne.n	800250e <prvAddCurrentTaskToDelayedList+0x3e>
 80024fe:	b137      	cbz	r7, 800250e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002500:	6819      	ldr	r1, [r3, #0]
 8002502:	4812      	ldr	r0, [pc, #72]	; (800254c <prvAddCurrentTaskToDelayedList+0x7c>)
 8002504:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002506:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800250a:	f7ff ba28 	b.w	800195e <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800250e:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002510:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002512:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002514:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002516:	d907      	bls.n	8002528 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002518:	4a0d      	ldr	r2, [pc, #52]	; (8002550 <prvAddCurrentTaskToDelayedList+0x80>)
 800251a:	6810      	ldr	r0, [r2, #0]
 800251c:	6819      	ldr	r1, [r3, #0]
}
 800251e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002522:	3104      	adds	r1, #4
 8002524:	f7ff ba27 	b.w	8001976 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002528:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <prvAddCurrentTaskToDelayedList+0x84>)
 800252a:	6810      	ldr	r0, [r2, #0]
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	3104      	adds	r1, #4
 8002530:	f7ff fa21 	bl	8001976 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <prvAddCurrentTaskToDelayedList+0x88>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800253a:	bf38      	it	cc
 800253c:	601c      	strcc	r4, [r3, #0]
 800253e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002540:	20003d68 	.word	0x20003d68
 8002544:	20003c44 	.word	0x20003c44
 8002548:	20003cf0 	.word	0x20003cf0
 800254c:	20003d40 	.word	0x20003d40
 8002550:	20003c4c 	.word	0x20003c4c
 8002554:	20003c48 	.word	0x20003c48
 8002558:	20003d20 	.word	0x20003d20

0800255c <prvTaskIsTaskSuspended.part.0>:
 800255c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002560:	f383 8811 	msr	BASEPRI, r3
 8002564:	f3bf 8f6f 	isb	sy
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	e7fe      	b.n	800256c <prvTaskIsTaskSuspended.part.0+0x10>
	...

08002570 <xTaskCreate>:
	{
 8002570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002574:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002578:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800257a:	4650      	mov	r0, sl
	{
 800257c:	460f      	mov	r7, r1
 800257e:	4699      	mov	r9, r3
 8002580:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002582:	f7ff fbd9 	bl	8001d38 <pvPortMalloc>
			if( pxStack != NULL )
 8002586:	4605      	mov	r5, r0
 8002588:	2800      	cmp	r0, #0
 800258a:	f000 8096 	beq.w	80026ba <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800258e:	2054      	movs	r0, #84	; 0x54
 8002590:	f7ff fbd2 	bl	8001d38 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002594:	4604      	mov	r4, r0
 8002596:	2800      	cmp	r0, #0
 8002598:	f000 808c 	beq.w	80026b4 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800259c:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80025a0:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80025a2:	4455      	add	r5, sl
 80025a4:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80025a6:	f025 0a07 	bic.w	sl, r5, #7
 80025aa:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80025ae:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80025b0:	7859      	ldrb	r1, [r3, #1]
 80025b2:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80025b6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80025ba:	b109      	cbz	r1, 80025c0 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025bc:	42bb      	cmp	r3, r7
 80025be:	d1f7      	bne.n	80025b0 <xTaskCreate+0x40>
 80025c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80025c2:	2d06      	cmp	r5, #6
 80025c4:	bf28      	it	cs
 80025c6:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80025c8:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025cc:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80025ce:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80025d0:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025d2:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80025d4:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80025d8:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025dc:	f7ff f9bc 	bl	8001958 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025e0:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80025e4:	f104 0018 	add.w	r0, r4, #24
 80025e8:	f7ff f9b6 	bl	8001958 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80025ec:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80025f0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025f2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80025f4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80025f6:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80025fa:	464a      	mov	r2, r9
 80025fc:	4641      	mov	r1, r8
 80025fe:	4650      	mov	r0, sl
 8002600:	f7ff fa12 	bl	8001a28 <pxPortInitialiseStack>
 8002604:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002606:	b106      	cbz	r6, 800260a <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002608:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800260a:	f7ff fa3b 	bl	8001a84 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800260e:	4b32      	ldr	r3, [pc, #200]	; (80026d8 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8002610:	4e32      	ldr	r6, [pc, #200]	; (80026dc <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002708 <xTaskCreate+0x198>
 8002618:	3201      	adds	r2, #1
 800261a:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800261c:	6835      	ldr	r5, [r6, #0]
 800261e:	2d00      	cmp	r5, #0
 8002620:	d14e      	bne.n	80026c0 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8002622:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d11d      	bne.n	8002666 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800262a:	eb08 0005 	add.w	r0, r8, r5
 800262e:	3514      	adds	r5, #20
 8002630:	f7ff f987 	bl	8001942 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002634:	2d8c      	cmp	r5, #140	; 0x8c
 8002636:	d1f8      	bne.n	800262a <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8002638:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800270c <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 800263c:	4d28      	ldr	r5, [pc, #160]	; (80026e0 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 800263e:	4648      	mov	r0, r9
 8002640:	f7ff f97f 	bl	8001942 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002644:	4628      	mov	r0, r5
 8002646:	f7ff f97c 	bl	8001942 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800264a:	4826      	ldr	r0, [pc, #152]	; (80026e4 <xTaskCreate+0x174>)
 800264c:	f7ff f979 	bl	8001942 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002650:	4825      	ldr	r0, [pc, #148]	; (80026e8 <xTaskCreate+0x178>)
 8002652:	f7ff f976 	bl	8001942 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002656:	4825      	ldr	r0, [pc, #148]	; (80026ec <xTaskCreate+0x17c>)
 8002658:	f7ff f973 	bl	8001942 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800265c:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <xTaskCreate+0x180>)
 800265e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002662:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <xTaskCreate+0x184>)
 8002664:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002666:	4a24      	ldr	r2, [pc, #144]	; (80026f8 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8002668:	4924      	ldr	r1, [pc, #144]	; (80026fc <xTaskCreate+0x18c>)
		uxTaskNumber++;
 800266a:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800266c:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800266e:	3301      	adds	r3, #1
 8002670:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002672:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002674:	2501      	movs	r5, #1
 8002676:	fa05 f302 	lsl.w	r3, r5, r2
 800267a:	4303      	orrs	r3, r0
 800267c:	2014      	movs	r0, #20
 800267e:	600b      	str	r3, [r1, #0]
 8002680:	fb00 8002 	mla	r0, r0, r2, r8
 8002684:	4639      	mov	r1, r7
 8002686:	f7ff f96a 	bl	800195e <vListInsertEnd>
	taskEXIT_CRITICAL();
 800268a:	f7ff fa1d 	bl	8001ac8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800268e:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <xTaskCreate+0x190>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	b163      	cbz	r3, 80026ae <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002694:	6833      	ldr	r3, [r6, #0]
 8002696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002698:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800269a:	429a      	cmp	r2, r3
 800269c:	d207      	bcs.n	80026ae <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <xTaskCreate+0x194>)
 80026a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	f3bf 8f4f 	dsb	sy
 80026aa:	f3bf 8f6f 	isb	sy
	}
 80026ae:	4628      	mov	r0, r5
 80026b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80026b4:	4628      	mov	r0, r5
 80026b6:	f7ff fbcd 	bl	8001e54 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026ba:	f04f 35ff 	mov.w	r5, #4294967295
 80026be:	e7f6      	b.n	80026ae <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <xTaskCreate+0x190>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1ce      	bne.n	8002666 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80026c8:	6833      	ldr	r3, [r6, #0]
 80026ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026ce:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80026d0:	bf98      	it	ls
 80026d2:	6034      	strls	r4, [r6, #0]
 80026d4:	e7c7      	b.n	8002666 <xTaskCreate+0xf6>
 80026d6:	bf00      	nop
 80026d8:	20003cdc 	.word	0x20003cdc
 80026dc:	20003c44 	.word	0x20003c44
 80026e0:	20003d08 	.word	0x20003d08
 80026e4:	20003d28 	.word	0x20003d28
 80026e8:	20003d54 	.word	0x20003d54
 80026ec:	20003d40 	.word	0x20003d40
 80026f0:	20003c48 	.word	0x20003c48
 80026f4:	20003c4c 	.word	0x20003c4c
 80026f8:	20003cec 	.word	0x20003cec
 80026fc:	20003cf0 	.word	0x20003cf0
 8002700:	20003d3c 	.word	0x20003d3c
 8002704:	e000ed04 	.word	0xe000ed04
 8002708:	20003c50 	.word	0x20003c50
 800270c:	20003cf4 	.word	0x20003cf4

08002710 <vTaskStartScheduler>:
{
 8002710:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <vTaskStartScheduler+0x68>)
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	2400      	movs	r4, #0
 8002718:	9400      	str	r4, [sp, #0]
 800271a:	4623      	mov	r3, r4
 800271c:	2280      	movs	r2, #128	; 0x80
 800271e:	4917      	ldr	r1, [pc, #92]	; (800277c <vTaskStartScheduler+0x6c>)
 8002720:	4817      	ldr	r0, [pc, #92]	; (8002780 <vTaskStartScheduler+0x70>)
 8002722:	f7ff ff25 	bl	8002570 <xTaskCreate>
		if( xReturn == pdPASS )
 8002726:	2801      	cmp	r0, #1
 8002728:	d118      	bne.n	800275c <vTaskStartScheduler+0x4c>
			xReturn = xTimerCreateTimerTask();
 800272a:	f000 fb83 	bl	8002e34 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800272e:	2801      	cmp	r0, #1
 8002730:	d114      	bne.n	800275c <vTaskStartScheduler+0x4c>
 8002732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002736:	f383 8811 	msr	BASEPRI, r3
 800273a:	f3bf 8f6f 	isb	sy
 800273e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002742:	4b10      	ldr	r3, [pc, #64]	; (8002784 <vTaskStartScheduler+0x74>)
 8002744:	f04f 32ff 	mov.w	r2, #4294967295
 8002748:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800274a:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <vTaskStartScheduler+0x78>)
 800274c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800274e:	4b0f      	ldr	r3, [pc, #60]	; (800278c <vTaskStartScheduler+0x7c>)
 8002750:	601c      	str	r4, [r3, #0]
}
 8002752:	b002      	add	sp, #8
 8002754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002758:	f7ff ba26 	b.w	8001ba8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800275c:	3001      	adds	r0, #1
 800275e:	d108      	bne.n	8002772 <vTaskStartScheduler+0x62>
 8002760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002764:	f383 8811 	msr	BASEPRI, r3
 8002768:	f3bf 8f6f 	isb	sy
 800276c:	f3bf 8f4f 	dsb	sy
 8002770:	e7fe      	b.n	8002770 <vTaskStartScheduler+0x60>
}
 8002772:	b002      	add	sp, #8
 8002774:	bd10      	pop	{r4, pc}
 8002776:	bf00      	nop
 8002778:	20003d1c 	.word	0x20003d1c
 800277c:	08003eec 	.word	0x08003eec
 8002780:	080029c1 	.word	0x080029c1
 8002784:	20003d20 	.word	0x20003d20
 8002788:	20003d3c 	.word	0x20003d3c
 800278c:	20003d68 	.word	0x20003d68

08002790 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002790:	4a02      	ldr	r2, [pc, #8]	; (800279c <vTaskSuspendAll+0xc>)
 8002792:	6813      	ldr	r3, [r2, #0]
 8002794:	3301      	adds	r3, #1
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20003ce8 	.word	0x20003ce8

080027a0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80027a0:	4b01      	ldr	r3, [pc, #4]	; (80027a8 <xTaskGetTickCount+0x8>)
 80027a2:	6818      	ldr	r0, [r3, #0]
}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20003d68 	.word	0x20003d68

080027ac <xTaskIncrementTick>:
{
 80027ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027b0:	4b3c      	ldr	r3, [pc, #240]	; (80028a4 <xTaskIncrementTick+0xf8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d153      	bne.n	8002860 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 80027b8:	4b3b      	ldr	r3, [pc, #236]	; (80028a8 <xTaskIncrementTick+0xfc>)
 80027ba:	681c      	ldr	r4, [r3, #0]
 80027bc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80027be:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80027c0:	b9bc      	cbnz	r4, 80027f2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80027c2:	4b3a      	ldr	r3, [pc, #232]	; (80028ac <xTaskIncrementTick+0x100>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	b142      	cbz	r2, 80027dc <xTaskIncrementTick+0x30>
 80027ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ce:	f383 8811 	msr	BASEPRI, r3
 80027d2:	f3bf 8f6f 	isb	sy
 80027d6:	f3bf 8f4f 	dsb	sy
 80027da:	e7fe      	b.n	80027da <xTaskIncrementTick+0x2e>
 80027dc:	4a34      	ldr	r2, [pc, #208]	; (80028b0 <xTaskIncrementTick+0x104>)
 80027de:	6819      	ldr	r1, [r3, #0]
 80027e0:	6810      	ldr	r0, [r2, #0]
 80027e2:	6018      	str	r0, [r3, #0]
 80027e4:	6011      	str	r1, [r2, #0]
 80027e6:	4a33      	ldr	r2, [pc, #204]	; (80028b4 <xTaskIncrementTick+0x108>)
 80027e8:	6813      	ldr	r3, [r2, #0]
 80027ea:	3301      	adds	r3, #1
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	f7ff fe5d 	bl	80024ac <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80027f2:	4d31      	ldr	r5, [pc, #196]	; (80028b8 <xTaskIncrementTick+0x10c>)
 80027f4:	4f31      	ldr	r7, [pc, #196]	; (80028bc <xTaskIncrementTick+0x110>)
 80027f6:	682b      	ldr	r3, [r5, #0]
 80027f8:	429c      	cmp	r4, r3
 80027fa:	f04f 0b00 	mov.w	fp, #0
 80027fe:	d33e      	bcc.n	800287e <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002800:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80028ac <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002804:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80028cc <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002808:	f8d8 2000 	ldr.w	r2, [r8]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	bb72      	cbnz	r2, 800286e <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002810:	f04f 32ff 	mov.w	r2, #4294967295
 8002814:	602a      	str	r2, [r5, #0]
					break;
 8002816:	e032      	b.n	800287e <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002818:	f106 0a04 	add.w	sl, r6, #4
 800281c:	4650      	mov	r0, sl
 800281e:	f7ff f8c1 	bl	80019a4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002822:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002824:	b119      	cbz	r1, 800282e <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002826:	f106 0018 	add.w	r0, r6, #24
 800282a:	f7ff f8bb 	bl	80019a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800282e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002830:	f8d9 3000 	ldr.w	r3, [r9]
 8002834:	2201      	movs	r2, #1
 8002836:	fa02 f100 	lsl.w	r1, r2, r0
 800283a:	4319      	orrs	r1, r3
 800283c:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <xTaskIncrementTick+0x114>)
 800283e:	f8c9 1000 	str.w	r1, [r9]
 8002842:	f04f 0e14 	mov.w	lr, #20
 8002846:	4651      	mov	r1, sl
 8002848:	fb0e 3000 	mla	r0, lr, r0, r3
 800284c:	f7ff f887 	bl	800195e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002850:	6838      	ldr	r0, [r7, #0]
 8002852:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002854:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002856:	4291      	cmp	r1, r2
 8002858:	bf28      	it	cs
 800285a:	f04f 0b01 	movcs.w	fp, #1
 800285e:	e7d3      	b.n	8002808 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002860:	4a18      	ldr	r2, [pc, #96]	; (80028c4 <xTaskIncrementTick+0x118>)
 8002862:	6813      	ldr	r3, [r2, #0]
 8002864:	3301      	adds	r3, #1
 8002866:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002868:	f04f 0b00 	mov.w	fp, #0
 800286c:	e011      	b.n	8002892 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800286e:	f8d8 2000 	ldr.w	r2, [r8]
 8002872:	68d2      	ldr	r2, [r2, #12]
 8002874:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002876:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002878:	428c      	cmp	r4, r1
 800287a:	d2cd      	bcs.n	8002818 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 800287c:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <xTaskIncrementTick+0x114>)
 8002882:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002884:	2214      	movs	r2, #20
 8002886:	434a      	muls	r2, r1
 8002888:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800288a:	2a02      	cmp	r2, #2
 800288c:	bf28      	it	cs
 800288e:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002892:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <xTaskIncrementTick+0x11c>)
 8002894:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002896:	2a00      	cmp	r2, #0
 8002898:	bf18      	it	ne
 800289a:	f04f 0b01 	movne.w	fp, #1
}
 800289e:	4658      	mov	r0, fp
 80028a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028a4:	20003ce8 	.word	0x20003ce8
 80028a8:	20003d68 	.word	0x20003d68
 80028ac:	20003c48 	.word	0x20003c48
 80028b0:	20003c4c 	.word	0x20003c4c
 80028b4:	20003d24 	.word	0x20003d24
 80028b8:	20003d20 	.word	0x20003d20
 80028bc:	20003c44 	.word	0x20003c44
 80028c0:	20003c50 	.word	0x20003c50
 80028c4:	20003ce4 	.word	0x20003ce4
 80028c8:	20003d6c 	.word	0x20003d6c
 80028cc:	20003cf0 	.word	0x20003cf0

080028d0 <xTaskResumeAll>:
{
 80028d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80028d4:	4c31      	ldr	r4, [pc, #196]	; (800299c <xTaskResumeAll+0xcc>)
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	b943      	cbnz	r3, 80028ec <xTaskResumeAll+0x1c>
 80028da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028de:	f383 8811 	msr	BASEPRI, r3
 80028e2:	f3bf 8f6f 	isb	sy
 80028e6:	f3bf 8f4f 	dsb	sy
 80028ea:	e7fe      	b.n	80028ea <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80028ec:	f7ff f8ca 	bl	8001a84 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80028f0:	6823      	ldr	r3, [r4, #0]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028f6:	6824      	ldr	r4, [r4, #0]
 80028f8:	b12c      	cbz	r4, 8002906 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80028fa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80028fc:	f7ff f8e4 	bl	8001ac8 <vPortExitCritical>
}
 8002900:	4620      	mov	r0, r4
 8002902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002906:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <xTaskResumeAll+0xd0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f5      	beq.n	80028fa <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800290e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80029b8 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002912:	4f24      	ldr	r7, [pc, #144]	; (80029a4 <xTaskResumeAll+0xd4>)
 8002914:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80029bc <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002918:	f8d9 3000 	ldr.w	r3, [r9]
 800291c:	b9e3      	cbnz	r3, 8002958 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 800291e:	b10c      	cbz	r4, 8002924 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002920:	f7ff fdc4 	bl	80024ac <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002924:	4d20      	ldr	r5, [pc, #128]	; (80029a8 <xTaskResumeAll+0xd8>)
 8002926:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002928:	b144      	cbz	r4, 800293c <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800292a:	4e20      	ldr	r6, [pc, #128]	; (80029ac <xTaskResumeAll+0xdc>)
 800292c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800292e:	f7ff ff3d 	bl	80027ac <xTaskIncrementTick>
 8002932:	b100      	cbz	r0, 8002936 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8002934:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002936:	3c01      	subs	r4, #1
 8002938:	d1f9      	bne.n	800292e <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800293a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800293c:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <xTaskResumeAll+0xdc>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0da      	beq.n	80028fa <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002944:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <xTaskResumeAll+0xe0>)
 8002946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002954:	2401      	movs	r4, #1
 8002956:	e7d1      	b.n	80028fc <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002958:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800295c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800295e:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002960:	f104 0018 	add.w	r0, r4, #24
 8002964:	f7ff f81e 	bl	80019a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002968:	4630      	mov	r0, r6
 800296a:	f7ff f81b 	bl	80019a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800296e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002970:	6839      	ldr	r1, [r7, #0]
 8002972:	2501      	movs	r5, #1
 8002974:	fa05 f302 	lsl.w	r3, r5, r2
 8002978:	2014      	movs	r0, #20
 800297a:	430b      	orrs	r3, r1
 800297c:	fb00 8002 	mla	r0, r0, r2, r8
 8002980:	4631      	mov	r1, r6
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	f7fe ffeb 	bl	800195e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <xTaskResumeAll+0xe4>)
 800298a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002992:	bf24      	itt	cs
 8002994:	4b05      	ldrcs	r3, [pc, #20]	; (80029ac <xTaskResumeAll+0xdc>)
 8002996:	601d      	strcs	r5, [r3, #0]
 8002998:	e7be      	b.n	8002918 <xTaskResumeAll+0x48>
 800299a:	bf00      	nop
 800299c:	20003ce8 	.word	0x20003ce8
 80029a0:	20003cdc 	.word	0x20003cdc
 80029a4:	20003cf0 	.word	0x20003cf0
 80029a8:	20003ce4 	.word	0x20003ce4
 80029ac:	20003d6c 	.word	0x20003d6c
 80029b0:	e000ed04 	.word	0xe000ed04
 80029b4:	20003c44 	.word	0x20003c44
 80029b8:	20003d28 	.word	0x20003d28
 80029bc:	20003c50 	.word	0x20003c50

080029c0 <prvIdleTask>:
{
 80029c0:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80029c2:	4e17      	ldr	r6, [pc, #92]	; (8002a20 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80029c4:	4c17      	ldr	r4, [pc, #92]	; (8002a24 <prvIdleTask+0x64>)
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	b963      	cbnz	r3, 80029e4 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80029ca:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <prvIdleTask+0x68>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d9f8      	bls.n	80029c4 <prvIdleTask+0x4>
				taskYIELD();
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <prvIdleTask+0x6c>)
 80029d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	f3bf 8f4f 	dsb	sy
 80029de:	f3bf 8f6f 	isb	sy
 80029e2:	e7ef      	b.n	80029c4 <prvIdleTask+0x4>
			vTaskSuspendAll();
 80029e4:	f7ff fed4 	bl	8002790 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80029e8:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 80029ea:	f7ff ff71 	bl	80028d0 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80029ee:	2d00      	cmp	r5, #0
 80029f0:	d0e9      	beq.n	80029c6 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 80029f2:	f7ff f847 	bl	8001a84 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80029f6:	68f3      	ldr	r3, [r6, #12]
 80029f8:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029fa:	1d28      	adds	r0, r5, #4
 80029fc:	f7fe ffd2 	bl	80019a4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002a00:	4a0b      	ldr	r2, [pc, #44]	; (8002a30 <prvIdleTask+0x70>)
 8002a02:	6813      	ldr	r3, [r2, #0]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8002a0e:	f7ff f85b 	bl	8001ac8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8002a12:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002a14:	f7ff fa1e 	bl	8001e54 <vPortFree>
			vPortFree( pxTCB );
 8002a18:	4628      	mov	r0, r5
 8002a1a:	f7ff fa1b 	bl	8001e54 <vPortFree>
 8002a1e:	e7d2      	b.n	80029c6 <prvIdleTask+0x6>
 8002a20:	20003d54 	.word	0x20003d54
 8002a24:	20003ce0 	.word	0x20003ce0
 8002a28:	20003c50 	.word	0x20003c50
 8002a2c:	e000ed04 	.word	0xe000ed04
 8002a30:	20003cdc 	.word	0x20003cdc

08002a34 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a34:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <vTaskSwitchContext+0x60>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <vTaskSwitchContext+0x64>)
{
 8002a3a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a3c:	b112      	cbz	r2, 8002a44 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002a3e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002a44:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002a46:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <vTaskSwitchContext+0x68>)
 8002a48:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f1c3 031f 	rsb	r3, r3, #31
 8002a54:	2214      	movs	r2, #20
 8002a56:	4912      	ldr	r1, [pc, #72]	; (8002aa0 <vTaskSwitchContext+0x6c>)
 8002a58:	435a      	muls	r2, r3
 8002a5a:	1888      	adds	r0, r1, r2
 8002a5c:	588c      	ldr	r4, [r1, r2]
 8002a5e:	b944      	cbnz	r4, 8002a72 <vTaskSwitchContext+0x3e>
	__asm volatile
 8002a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	e7fe      	b.n	8002a70 <vTaskSwitchContext+0x3c>
 8002a72:	6844      	ldr	r4, [r0, #4]
 8002a74:	3208      	adds	r2, #8
 8002a76:	6864      	ldr	r4, [r4, #4]
 8002a78:	6044      	str	r4, [r0, #4]
 8002a7a:	440a      	add	r2, r1
 8002a7c:	4294      	cmp	r4, r2
 8002a7e:	bf04      	itt	eq
 8002a80:	6862      	ldreq	r2, [r4, #4]
 8002a82:	6042      	streq	r2, [r0, #4]
 8002a84:	2214      	movs	r2, #20
 8002a86:	fb02 1303 	mla	r3, r2, r3, r1
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <vTaskSwitchContext+0x70>)
 8002a90:	e7d6      	b.n	8002a40 <vTaskSwitchContext+0xc>
 8002a92:	bf00      	nop
 8002a94:	20003ce8 	.word	0x20003ce8
 8002a98:	20003d6c 	.word	0x20003d6c
 8002a9c:	20003cf0 	.word	0x20003cf0
 8002aa0:	20003c50 	.word	0x20003c50
 8002aa4:	20003c44 	.word	0x20003c44

08002aa8 <vTaskPlaceOnEventList>:
{
 8002aa8:	b510      	push	{r4, lr}
 8002aaa:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8002aac:	b940      	cbnz	r0, 8002ac0 <vTaskPlaceOnEventList+0x18>
 8002aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab2:	f383 8811 	msr	BASEPRI, r3
 8002ab6:	f3bf 8f6f 	isb	sy
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	e7fe      	b.n	8002abe <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <vTaskPlaceOnEventList+0x30>)
 8002ac2:	6819      	ldr	r1, [r3, #0]
 8002ac4:	3118      	adds	r1, #24
 8002ac6:	f7fe ff56 	bl	8001976 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002aca:	4620      	mov	r0, r4
 8002acc:	2101      	movs	r1, #1
}
 8002ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ad2:	f7ff bcfd 	b.w	80024d0 <prvAddCurrentTaskToDelayedList>
 8002ad6:	bf00      	nop
 8002ad8:	20003c44 	.word	0x20003c44

08002adc <vTaskPlaceOnEventListRestricted>:
	{
 8002adc:	b538      	push	{r3, r4, r5, lr}
 8002ade:	460d      	mov	r5, r1
 8002ae0:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8002ae2:	b940      	cbnz	r0, 8002af6 <vTaskPlaceOnEventListRestricted+0x1a>
 8002ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae8:	f383 8811 	msr	BASEPRI, r3
 8002aec:	f3bf 8f6f 	isb	sy
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	e7fe      	b.n	8002af4 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002af6:	4b07      	ldr	r3, [pc, #28]	; (8002b14 <vTaskPlaceOnEventListRestricted+0x38>)
 8002af8:	6819      	ldr	r1, [r3, #0]
 8002afa:	3118      	adds	r1, #24
 8002afc:	f7fe ff2f 	bl	800195e <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8002b00:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002b02:	4621      	mov	r1, r4
 8002b04:	bf0c      	ite	eq
 8002b06:	4628      	moveq	r0, r5
 8002b08:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8002b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002b10:	f7ff bcde 	b.w	80024d0 <prvAddCurrentTaskToDelayedList>
 8002b14:	20003c44 	.word	0x20003c44

08002b18 <xTaskRemoveFromEventList>:
{
 8002b18:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002b1a:	68c3      	ldr	r3, [r0, #12]
 8002b1c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002b1e:	b944      	cbnz	r4, 8002b32 <xTaskRemoveFromEventList+0x1a>
 8002b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	e7fe      	b.n	8002b30 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002b32:	f104 0518 	add.w	r5, r4, #24
 8002b36:	4628      	mov	r0, r5
 8002b38:	f7fe ff34 	bl	80019a4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <xTaskRemoveFromEventList+0x6c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	b9e3      	cbnz	r3, 8002b7c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002b42:	1d25      	adds	r5, r4, #4
 8002b44:	4628      	mov	r0, r5
 8002b46:	f7fe ff2d 	bl	80019a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002b4a:	490f      	ldr	r1, [pc, #60]	; (8002b88 <xTaskRemoveFromEventList+0x70>)
 8002b4c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b4e:	6808      	ldr	r0, [r1, #0]
 8002b50:	2301      	movs	r3, #1
 8002b52:	4093      	lsls	r3, r2
 8002b54:	4303      	orrs	r3, r0
 8002b56:	600b      	str	r3, [r1, #0]
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <xTaskRemoveFromEventList+0x74>)
 8002b5a:	2014      	movs	r0, #20
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002b62:	f7fe fefc 	bl	800195e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <xTaskRemoveFromEventList+0x78>)
 8002b68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8002b70:	bf83      	ittte	hi
 8002b72:	4b08      	ldrhi	r3, [pc, #32]	; (8002b94 <xTaskRemoveFromEventList+0x7c>)
 8002b74:	2001      	movhi	r0, #1
 8002b76:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8002b78:	2000      	movls	r0, #0
}
 8002b7a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	4806      	ldr	r0, [pc, #24]	; (8002b98 <xTaskRemoveFromEventList+0x80>)
 8002b80:	e7ef      	b.n	8002b62 <xTaskRemoveFromEventList+0x4a>
 8002b82:	bf00      	nop
 8002b84:	20003ce8 	.word	0x20003ce8
 8002b88:	20003cf0 	.word	0x20003cf0
 8002b8c:	20003c50 	.word	0x20003c50
 8002b90:	20003c44 	.word	0x20003c44
 8002b94:	20003d6c 	.word	0x20003d6c
 8002b98:	20003d28 	.word	0x20003d28

08002b9c <vTaskSetTimeOutState>:
{
 8002b9c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8002b9e:	b908      	cbnz	r0, 8002ba4 <vTaskSetTimeOutState+0x8>
 8002ba0:	f7ff fcdc 	bl	800255c <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <vTaskSetTimeOutState+0x18>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002baa:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <vTaskSetTimeOutState+0x1c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6043      	str	r3, [r0, #4]
 8002bb0:	bd08      	pop	{r3, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20003d24 	.word	0x20003d24
 8002bb8:	20003d68 	.word	0x20003d68

08002bbc <xTaskCheckForTimeOut>:
{
 8002bbc:	b538      	push	{r3, r4, r5, lr}
 8002bbe:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8002bc0:	4604      	mov	r4, r0
 8002bc2:	b940      	cbnz	r0, 8002bd6 <xTaskCheckForTimeOut+0x1a>
 8002bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc8:	f383 8811 	msr	BASEPRI, r3
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	e7fe      	b.n	8002bd4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8002bd6:	b941      	cbnz	r1, 8002bea <xTaskCheckForTimeOut+0x2e>
 8002bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bdc:	f383 8811 	msr	BASEPRI, r3
 8002be0:	f3bf 8f6f 	isb	sy
 8002be4:	f3bf 8f4f 	dsb	sy
 8002be8:	e7fe      	b.n	8002be8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8002bea:	f7fe ff4b 	bl	8001a84 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002bee:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <xTaskCheckForTimeOut+0x6c>)
 8002bf0:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8002bf2:	682b      	ldr	r3, [r5, #0]
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	d010      	beq.n	8002c1a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002bf8:	4a0c      	ldr	r2, [pc, #48]	; (8002c2c <xTaskCheckForTimeOut+0x70>)
 8002bfa:	6820      	ldr	r0, [r4, #0]
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	4290      	cmp	r0, r2
 8002c00:	6862      	ldr	r2, [r4, #4]
 8002c02:	d001      	beq.n	8002c08 <xTaskCheckForTimeOut+0x4c>
 8002c04:	4291      	cmp	r1, r2
 8002c06:	d20d      	bcs.n	8002c24 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002c08:	1a88      	subs	r0, r1, r2
 8002c0a:	4283      	cmp	r3, r0
 8002c0c:	d90a      	bls.n	8002c24 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002c0e:	1a5b      	subs	r3, r3, r1
 8002c10:	4413      	add	r3, r2
 8002c12:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002c14:	4620      	mov	r0, r4
 8002c16:	f7ff ffc1 	bl	8002b9c <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 8002c1a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002c1c:	f7fe ff54 	bl	8001ac8 <vPortExitCritical>
}
 8002c20:	4620      	mov	r0, r4
 8002c22:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8002c24:	2401      	movs	r4, #1
 8002c26:	e7f9      	b.n	8002c1c <xTaskCheckForTimeOut+0x60>
 8002c28:	20003d68 	.word	0x20003d68
 8002c2c:	20003d24 	.word	0x20003d24

08002c30 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002c30:	4b01      	ldr	r3, [pc, #4]	; (8002c38 <vTaskMissedYield+0x8>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	4770      	bx	lr
 8002c38:	20003d6c 	.word	0x20003d6c

08002c3c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <xTaskGetSchedulerState+0x18>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	b133      	cbz	r3, 8002c50 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <xTaskGetSchedulerState+0x1c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8002c48:	bf0c      	ite	eq
 8002c4a:	2002      	moveq	r0, #2
 8002c4c:	2000      	movne	r0, #0
 8002c4e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002c50:	2001      	movs	r0, #1
	}
 8002c52:	4770      	bx	lr
 8002c54:	20003d3c 	.word	0x20003d3c
 8002c58:	20003ce8 	.word	0x20003ce8

08002c5c <vTaskPriorityInherit>:
	{
 8002c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8002c60:	4604      	mov	r4, r0
 8002c62:	2800      	cmp	r0, #0
 8002c64:	d038      	beq.n	8002cd8 <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002c66:	4d1d      	ldr	r5, [pc, #116]	; (8002cdc <vTaskPriorityInherit+0x80>)
 8002c68:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002c6a:	682a      	ldr	r2, [r5, #0]
 8002c6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d232      	bcs.n	8002cd8 <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002c72:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002c74:	4e1a      	ldr	r6, [pc, #104]	; (8002ce0 <vTaskPriorityInherit+0x84>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002c76:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c78:	bfa1      	itttt	ge
 8002c7a:	682a      	ldrge	r2, [r5, #0]
 8002c7c:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8002c7e:	f1c2 0207 	rsbge	r2, r2, #7
 8002c82:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002c84:	2714      	movs	r7, #20
 8002c86:	6942      	ldr	r2, [r0, #20]
 8002c88:	fb07 6303 	mla	r3, r7, r3, r6
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d120      	bne.n	8002cd2 <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c90:	f100 0804 	add.w	r8, r0, #4
 8002c94:	4640      	mov	r0, r8
 8002c96:	f7fe fe85 	bl	80019a4 <uxListRemove>
 8002c9a:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <vTaskPriorityInherit+0x88>)
 8002c9c:	b948      	cbnz	r0, 8002cb2 <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002c9e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002ca0:	4347      	muls	r7, r0
 8002ca2:	59f3      	ldr	r3, [r6, r7]
 8002ca4:	b92b      	cbnz	r3, 8002cb2 <vTaskPriorityInherit+0x56>
 8002ca6:	6813      	ldr	r3, [r2, #0]
 8002ca8:	2101      	movs	r1, #1
 8002caa:	4081      	lsls	r1, r0
 8002cac:	ea23 0301 	bic.w	r3, r3, r1
 8002cb0:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002cb2:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8002cb4:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002cb6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002cb8:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002cba:	2301      	movs	r3, #1
 8002cbc:	4083      	lsls	r3, r0
 8002cbe:	430b      	orrs	r3, r1
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	2314      	movs	r3, #20
 8002cc4:	4641      	mov	r1, r8
 8002cc6:	fb03 6000 	mla	r0, r3, r0, r6
	}
 8002cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8002cce:	f7fe be46 	b.w	800195e <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002cd2:	682b      	ldr	r3, [r5, #0]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cdc:	20003c44 	.word	0x20003c44
 8002ce0:	20003c50 	.word	0x20003c50
 8002ce4:	20003cf0 	.word	0x20003cf0

08002ce8 <xTaskPriorityDisinherit>:
	{
 8002ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8002cea:	4604      	mov	r4, r0
 8002cec:	b908      	cbnz	r0, 8002cf2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8002cee:	2000      	movs	r0, #0
 8002cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8002cf2:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <xTaskPriorityDisinherit+0x94>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4298      	cmp	r0, r3
 8002cf8:	d008      	beq.n	8002d0c <xTaskPriorityDisinherit+0x24>
 8002cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	e7fe      	b.n	8002d0a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8002d0c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002d0e:	b943      	cbnz	r3, 8002d22 <xTaskPriorityDisinherit+0x3a>
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	e7fe      	b.n	8002d20 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d22:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002d24:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8002d26:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d28:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8002d2a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d2c:	d0df      	beq.n	8002cee <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1dd      	bne.n	8002cee <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d32:	1d05      	adds	r5, r0, #4
 8002d34:	4628      	mov	r0, r5
 8002d36:	f7fe fe35 	bl	80019a4 <uxListRemove>
 8002d3a:	4e11      	ldr	r6, [pc, #68]	; (8002d80 <xTaskPriorityDisinherit+0x98>)
 8002d3c:	4a11      	ldr	r2, [pc, #68]	; (8002d84 <xTaskPriorityDisinherit+0x9c>)
 8002d3e:	b950      	cbnz	r0, 8002d56 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002d40:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002d42:	2114      	movs	r1, #20
 8002d44:	4379      	muls	r1, r7
 8002d46:	5873      	ldr	r3, [r6, r1]
 8002d48:	b92b      	cbnz	r3, 8002d56 <xTaskPriorityDisinherit+0x6e>
 8002d4a:	6813      	ldr	r3, [r2, #0]
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	40b8      	lsls	r0, r7
 8002d50:	ea23 0300 	bic.w	r3, r3, r0
 8002d54:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002d56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d58:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d5a:	f1c3 0107 	rsb	r1, r3, #7
 8002d5e:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002d60:	6811      	ldr	r1, [r2, #0]
 8002d62:	2401      	movs	r4, #1
 8002d64:	fa04 f003 	lsl.w	r0, r4, r3
 8002d68:	4308      	orrs	r0, r1
 8002d6a:	6010      	str	r0, [r2, #0]
 8002d6c:	2014      	movs	r0, #20
 8002d6e:	fb00 6003 	mla	r0, r0, r3, r6
 8002d72:	4629      	mov	r1, r5
 8002d74:	f7fe fdf3 	bl	800195e <vListInsertEnd>
					xReturn = pdTRUE;
 8002d78:	4620      	mov	r0, r4
	}
 8002d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d7c:	20003c44 	.word	0x20003c44
 8002d80:	20003c50 	.word	0x20003c50
 8002d84:	20003cf0 	.word	0x20003cf0

08002d88 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <pvTaskIncrementMutexHeldCount+0x14>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	b11a      	cbz	r2, 8002d96 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8002d8e:	6819      	ldr	r1, [r3, #0]
 8002d90:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8002d92:	3201      	adds	r2, #1
 8002d94:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8002d96:	6818      	ldr	r0, [r3, #0]
	}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20003c44 	.word	0x20003c44

08002da0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8002da2:	4c0f      	ldr	r4, [pc, #60]	; (8002de0 <prvCheckForValidListAndQueue+0x40>)
	taskENTER_CRITICAL();
 8002da4:	f7fe fe6e 	bl	8001a84 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8002da8:	6825      	ldr	r5, [r4, #0]
 8002daa:	b9ad      	cbnz	r5, 8002dd8 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8002dac:	4f0d      	ldr	r7, [pc, #52]	; (8002de4 <prvCheckForValidListAndQueue+0x44>)
			vListInitialise( &xActiveTimerList2 );
 8002dae:	4e0e      	ldr	r6, [pc, #56]	; (8002de8 <prvCheckForValidListAndQueue+0x48>)
			vListInitialise( &xActiveTimerList1 );
 8002db0:	4638      	mov	r0, r7
 8002db2:	f7fe fdc6 	bl	8001942 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002db6:	4630      	mov	r0, r6
 8002db8:	f7fe fdc3 	bl	8001942 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <prvCheckForValidListAndQueue+0x4c>)
 8002dbe:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <prvCheckForValidListAndQueue+0x50>)

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002dc2:	462a      	mov	r2, r5
 8002dc4:	210c      	movs	r1, #12
 8002dc6:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8002dc8:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002dca:	f7ff f93b 	bl	8002044 <xQueueGenericCreate>
 8002dce:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002dd0:	b110      	cbz	r0, 8002dd8 <prvCheckForValidListAndQueue+0x38>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002dd2:	4908      	ldr	r1, [pc, #32]	; (8002df4 <prvCheckForValidListAndQueue+0x54>)
 8002dd4:	f7ff fb34 	bl	8002440 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8002dd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8002ddc:	f7fe be74 	b.w	8001ac8 <vPortExitCritical>
 8002de0:	20003da4 	.word	0x20003da4
 8002de4:	20003d78 	.word	0x20003d78
 8002de8:	20003d8c 	.word	0x20003d8c
 8002dec:	20003d70 	.word	0x20003d70
 8002df0:	20003d74 	.word	0x20003d74
 8002df4:	08003ef1 	.word	0x08003ef1

08002df8 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8002df8:	4291      	cmp	r1, r2
{
 8002dfa:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002dfc:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002dfe:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8002e00:	d80a      	bhi.n	8002e18 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e02:	1ad2      	subs	r2, r2, r3
 8002e04:	6983      	ldr	r3, [r0, #24]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d20d      	bcs.n	8002e26 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002e0a:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <prvInsertTimerInActiveList+0x34>)
 8002e0c:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	f7fe fdb1 	bl	8001976 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8002e14:	2000      	movs	r0, #0
 8002e16:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d201      	bcs.n	8002e20 <prvInsertTimerInActiveList+0x28>
 8002e1c:	4299      	cmp	r1, r3
 8002e1e:	d202      	bcs.n	8002e26 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e20:	1d01      	adds	r1, r0, #4
 8002e22:	4b03      	ldr	r3, [pc, #12]	; (8002e30 <prvInsertTimerInActiveList+0x38>)
 8002e24:	e7f3      	b.n	8002e0e <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8002e26:	2001      	movs	r0, #1
}
 8002e28:	bd08      	pop	{r3, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20003d74 	.word	0x20003d74
 8002e30:	20003d70 	.word	0x20003d70

08002e34 <xTimerCreateTimerTask>:
{
 8002e34:	b507      	push	{r0, r1, r2, lr}
	prvCheckForValidListAndQueue();
 8002e36:	f7ff ffb3 	bl	8002da0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <xTimerCreateTimerTask+0x3c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	b15b      	cbz	r3, 8002e58 <xTimerCreateTimerTask+0x24>
			xReturn = xTaskCreate(	prvTimerTask,
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <xTimerCreateTimerTask+0x40>)
 8002e42:	9301      	str	r3, [sp, #4]
 8002e44:	2302      	movs	r3, #2
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	490a      	ldr	r1, [pc, #40]	; (8002e78 <xTimerCreateTimerTask+0x44>)
 8002e50:	480a      	ldr	r0, [pc, #40]	; (8002e7c <xTimerCreateTimerTask+0x48>)
 8002e52:	f7ff fb8d 	bl	8002570 <xTaskCreate>
	configASSERT( xReturn );
 8002e56:	b940      	cbnz	r0, 8002e6a <xTimerCreateTimerTask+0x36>
 8002e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	e7fe      	b.n	8002e68 <xTimerCreateTimerTask+0x34>
}
 8002e6a:	b003      	add	sp, #12
 8002e6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e70:	20003da4 	.word	0x20003da4
 8002e74:	20003da8 	.word	0x20003da8
 8002e78:	08003ef6 	.word	0x08003ef6
 8002e7c:	08002f55 	.word	0x08002f55

08002e80 <xTimerGenericCommand>:
{
 8002e80:	b530      	push	{r4, r5, lr}
 8002e82:	4615      	mov	r5, r2
 8002e84:	b085      	sub	sp, #20
 8002e86:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8002e88:	4603      	mov	r3, r0
 8002e8a:	b940      	cbnz	r0, 8002e9e <xTimerGenericCommand+0x1e>
 8002e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	e7fe      	b.n	8002e9c <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 8002e9e:	4c0d      	ldr	r4, [pc, #52]	; (8002ed4 <xTimerGenericCommand+0x54>)
 8002ea0:	6820      	ldr	r0, [r4, #0]
 8002ea2:	b180      	cbz	r0, 8002ec6 <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002ea4:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
 8002ea6:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002ea8:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002eaa:	9303      	str	r3, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002eac:	dc0d      	bgt.n	8002eca <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002eae:	f7ff fec5 	bl	8002c3c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002eb2:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002eb4:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002eb6:	bf08      	it	eq
 8002eb8:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002eba:	6820      	ldr	r0, [r4, #0]
 8002ebc:	bf18      	it	ne
 8002ebe:	461a      	movne	r2, r3
 8002ec0:	a901      	add	r1, sp, #4
 8002ec2:	f7ff f8e1 	bl	8002088 <xQueueGenericSend>
}
 8002ec6:	b005      	add	sp, #20
 8002ec8:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002eca:	2300      	movs	r3, #0
 8002ecc:	a901      	add	r1, sp, #4
 8002ece:	f7ff f991 	bl	80021f4 <xQueueGenericSendFromISR>
 8002ed2:	e7f8      	b.n	8002ec6 <xTimerGenericCommand+0x46>
 8002ed4:	20003da4 	.word	0x20003da4

08002ed8 <prvSwitchTimerLists>:
{
 8002ed8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002edc:	4d1b      	ldr	r5, [pc, #108]	; (8002f4c <prvSwitchTimerLists+0x74>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002ede:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ee2:	682b      	ldr	r3, [r5, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	b932      	cbnz	r2, 8002ef6 <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8002ee8:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <prvSwitchTimerLists+0x78>)
 8002eea:	6811      	ldr	r1, [r2, #0]
 8002eec:	6029      	str	r1, [r5, #0]
	pxOverflowTimerList = pxTemp;
 8002eee:	6013      	str	r3, [r2, #0]
}
 8002ef0:	b002      	add	sp, #8
 8002ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ef6:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ef8:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002efa:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002efc:	1d27      	adds	r7, r4, #4
 8002efe:	4638      	mov	r0, r7
 8002f00:	f7fe fd50 	bl	80019a4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f06:	4620      	mov	r0, r4
 8002f08:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002f0a:	69e3      	ldr	r3, [r4, #28]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d1e8      	bne.n	8002ee2 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002f10:	69a3      	ldr	r3, [r4, #24]
 8002f12:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8002f14:	429e      	cmp	r6, r3
 8002f16:	d206      	bcs.n	8002f26 <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002f18:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002f1a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002f1c:	4639      	mov	r1, r7
 8002f1e:	6828      	ldr	r0, [r5, #0]
 8002f20:	f7fe fd29 	bl	8001976 <vListInsert>
 8002f24:	e7dd      	b.n	8002ee2 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002f26:	2300      	movs	r3, #0
 8002f28:	f8cd 8000 	str.w	r8, [sp]
 8002f2c:	4632      	mov	r2, r6
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4620      	mov	r0, r4
 8002f32:	f7ff ffa5 	bl	8002e80 <xTimerGenericCommand>
				configASSERT( xResult );
 8002f36:	2800      	cmp	r0, #0
 8002f38:	d1d3      	bne.n	8002ee2 <prvSwitchTimerLists+0xa>
 8002f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3e:	f383 8811 	msr	BASEPRI, r3
 8002f42:	f3bf 8f6f 	isb	sy
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	e7fe      	b.n	8002f4a <prvSwitchTimerLists+0x72>
 8002f4c:	20003d70 	.word	0x20003d70
 8002f50:	20003d74 	.word	0x20003d74

08002f54 <prvTimerTask>:
{
 8002f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002f58:	4d6c      	ldr	r5, [pc, #432]	; (800310c <prvTimerTask+0x1b8>)
					portYIELD_WITHIN_API();
 8002f5a:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800311c <prvTimerTask+0x1c8>
{
 8002f5e:	b089      	sub	sp, #36	; 0x24
 8002f60:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002f62:	682b      	ldr	r3, [r5, #0]
 8002f64:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8002f68:	f1bb 0f00 	cmp.w	fp, #0
 8002f6c:	d042      	beq.n	8002ff4 <prvTimerTask+0xa0>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f8d3 9000 	ldr.w	r9, [r3]
	vTaskSuspendAll();
 8002f74:	f7ff fc0c 	bl	8002790 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8002f78:	f7ff fc12 	bl	80027a0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8002f7c:	4b64      	ldr	r3, [pc, #400]	; (8003110 <prvTimerTask+0x1bc>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 8002f82:	4682      	mov	sl, r0
 8002f84:	461e      	mov	r6, r3
	if( xTimeNow < xLastTime )
 8002f86:	d237      	bcs.n	8002ff8 <prvTimerTask+0xa4>
 8002f88:	9303      	str	r3, [sp, #12]
		prvSwitchTimerLists();
 8002f8a:	f7ff ffa5 	bl	8002ed8 <prvSwitchTimerLists>
 8002f8e:	9b03      	ldr	r3, [sp, #12]
		*pxTimerListsWereSwitched = pdTRUE;
 8002f90:	2401      	movs	r4, #1
	xLastTime = xTimeNow;
 8002f92:	f8c3 a000 	str.w	sl, [r3]
		if( xTimerListsWereSwitched == pdFALSE )
 8002f96:	2c00      	cmp	r4, #0
 8002f98:	d17e      	bne.n	8003098 <prvTimerTask+0x144>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002f9a:	f1bb 0f00 	cmp.w	fp, #0
 8002f9e:	d060      	beq.n	8003062 <prvTimerTask+0x10e>
 8002fa0:	45d1      	cmp	r9, sl
 8002fa2:	d877      	bhi.n	8003094 <prvTimerTask+0x140>
				( void ) xTaskResumeAll();
 8002fa4:	f7ff fc94 	bl	80028d0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002fb0:	f10b 0004 	add.w	r0, fp, #4
 8002fb4:	f7fe fcf6 	bl	80019a4 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002fb8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d11d      	bne.n	8002ffc <prvTimerTask+0xa8>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002fc0:	f8db 1018 	ldr.w	r1, [fp, #24]
 8002fc4:	464b      	mov	r3, r9
 8002fc6:	4652      	mov	r2, sl
 8002fc8:	4449      	add	r1, r9
 8002fca:	4658      	mov	r0, fp
 8002fcc:	f7ff ff14 	bl	8002df8 <prvInsertTimerInActiveList>
 8002fd0:	b1a0      	cbz	r0, 8002ffc <prvTimerTask+0xa8>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002fd2:	9400      	str	r4, [sp, #0]
 8002fd4:	4623      	mov	r3, r4
 8002fd6:	464a      	mov	r2, r9
 8002fd8:	4621      	mov	r1, r4
 8002fda:	4658      	mov	r0, fp
 8002fdc:	f7ff ff50 	bl	8002e80 <xTimerGenericCommand>
			configASSERT( xResult );
 8002fe0:	b960      	cbnz	r0, 8002ffc <prvTimerTask+0xa8>
 8002fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe6:	f383 8811 	msr	BASEPRI, r3
 8002fea:	f3bf 8f6f 	isb	sy
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	e7fe      	b.n	8002ff2 <prvTimerTask+0x9e>
		xNextExpireTime = ( TickType_t ) 0U;
 8002ff4:	46d9      	mov	r9, fp
 8002ff6:	e7bd      	b.n	8002f74 <prvTimerTask+0x20>
		*pxTimerListsWereSwitched = pdFALSE;
 8002ff8:	2400      	movs	r4, #0
 8002ffa:	e7ca      	b.n	8002f92 <prvTimerTask+0x3e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ffc:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8003000:	4658      	mov	r0, fp
 8003002:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003004:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8003118 <prvTimerTask+0x1c4>
 8003008:	f8d9 0000 	ldr.w	r0, [r9]
 800300c:	2300      	movs	r3, #0
 800300e:	461a      	mov	r2, r3
 8003010:	a905      	add	r1, sp, #20
 8003012:	f7ff f951 	bl	80022b8 <xQueueGenericReceive>
 8003016:	2800      	cmp	r0, #0
 8003018:	d0a3      	beq.n	8002f62 <prvTimerTask+0xe>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800301a:	9b05      	ldr	r3, [sp, #20]
 800301c:	2b00      	cmp	r3, #0
 800301e:	dbf3      	blt.n	8003008 <prvTimerTask+0xb4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003020:	9c07      	ldr	r4, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003022:	6963      	ldr	r3, [r4, #20]
 8003024:	b113      	cbz	r3, 800302c <prvTimerTask+0xd8>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003026:	1d20      	adds	r0, r4, #4
 8003028:	f7fe fcbc 	bl	80019a4 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800302c:	f7ff fbb8 	bl	80027a0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003030:	6833      	ldr	r3, [r6, #0]
 8003032:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8003034:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8003036:	d201      	bcs.n	800303c <prvTimerTask+0xe8>
		prvSwitchTimerLists();
 8003038:	f7ff ff4e 	bl	8002ed8 <prvSwitchTimerLists>
 800303c:	9a05      	ldr	r2, [sp, #20]
	xLastTime = xTimeNow;
 800303e:	f8c6 b000 	str.w	fp, [r6]
 8003042:	2a09      	cmp	r2, #9
 8003044:	d8e0      	bhi.n	8003008 <prvTimerTask+0xb4>
 8003046:	2301      	movs	r3, #1
 8003048:	4093      	lsls	r3, r2
 800304a:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 800304e:	d14a      	bne.n	80030e6 <prvTimerTask+0x192>
 8003050:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 8003054:	d123      	bne.n	800309e <prvTimerTask+0x14a>
 8003056:	069b      	lsls	r3, r3, #26
 8003058:	d5d6      	bpl.n	8003008 <prvTimerTask+0xb4>
						vPortFree( pxTimer );
 800305a:	4620      	mov	r0, r4
 800305c:	f7fe fefa 	bl	8001e54 <vPortFree>
 8003060:	e7d2      	b.n	8003008 <prvTimerTask+0xb4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003062:	4b2c      	ldr	r3, [pc, #176]	; (8003114 <prvTimerTask+0x1c0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	fab2 f282 	clz	r2, r2
 800306c:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800306e:	4b2a      	ldr	r3, [pc, #168]	; (8003118 <prvTimerTask+0x1c4>)
 8003070:	eba9 010a 	sub.w	r1, r9, sl
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	f7ff f9f5 	bl	8002464 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800307a:	f7ff fc29 	bl	80028d0 <xTaskResumeAll>
 800307e:	2800      	cmp	r0, #0
 8003080:	d1c0      	bne.n	8003004 <prvTimerTask+0xb0>
					portYIELD_WITHIN_API();
 8003082:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003086:	f8c8 3000 	str.w	r3, [r8]
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	e7b7      	b.n	8003004 <prvTimerTask+0xb0>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003094:	4622      	mov	r2, r4
 8003096:	e7ea      	b.n	800306e <prvTimerTask+0x11a>
			( void ) xTaskResumeAll();
 8003098:	f7ff fc1a 	bl	80028d0 <xTaskResumeAll>
 800309c:	e7b2      	b.n	8003004 <prvTimerTask+0xb0>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800309e:	69a1      	ldr	r1, [r4, #24]
 80030a0:	9b06      	ldr	r3, [sp, #24]
 80030a2:	465a      	mov	r2, fp
 80030a4:	4419      	add	r1, r3
 80030a6:	4620      	mov	r0, r4
 80030a8:	f7ff fea6 	bl	8002df8 <prvInsertTimerInActiveList>
 80030ac:	2800      	cmp	r0, #0
 80030ae:	d0ab      	beq.n	8003008 <prvTimerTask+0xb4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80030b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030b2:	4620      	mov	r0, r4
 80030b4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80030b6:	69e3      	ldr	r3, [r4, #28]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d1a5      	bne.n	8003008 <prvTimerTask+0xb4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80030bc:	69a2      	ldr	r2, [r4, #24]
 80030be:	9906      	ldr	r1, [sp, #24]
 80030c0:	f8cd a000 	str.w	sl, [sp]
 80030c4:	440a      	add	r2, r1
 80030c6:	4653      	mov	r3, sl
 80030c8:	4651      	mov	r1, sl
 80030ca:	4620      	mov	r0, r4
 80030cc:	f7ff fed8 	bl	8002e80 <xTimerGenericCommand>
							configASSERT( xResult );
 80030d0:	2800      	cmp	r0, #0
 80030d2:	d199      	bne.n	8003008 <prvTimerTask+0xb4>
 80030d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d8:	f383 8811 	msr	BASEPRI, r3
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	e7fe      	b.n	80030e4 <prvTimerTask+0x190>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80030e6:	9906      	ldr	r1, [sp, #24]
 80030e8:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80030ea:	b941      	cbnz	r1, 80030fe <prvTimerTask+0x1aa>
 80030ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f0:	f383 8811 	msr	BASEPRI, r3
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	e7fe      	b.n	80030fc <prvTimerTask+0x1a8>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80030fe:	465b      	mov	r3, fp
 8003100:	465a      	mov	r2, fp
 8003102:	4459      	add	r1, fp
 8003104:	4620      	mov	r0, r4
 8003106:	f7ff fe77 	bl	8002df8 <prvInsertTimerInActiveList>
 800310a:	e77d      	b.n	8003008 <prvTimerTask+0xb4>
 800310c:	20003d70 	.word	0x20003d70
 8003110:	20003da0 	.word	0x20003da0
 8003114:	20003d74 	.word	0x20003d74
 8003118:	20003da4 	.word	0x20003da4
 800311c:	e000ed04 	.word	0xe000ed04

08003120 <convertCANid2Reg.constprop.1>:
/* Konverter CAN-ID til leselig */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
  uint8_t wipSIDL = 0;
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 8003120:	2902      	cmp	r1, #2
 8003122:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <convertCANid2Reg.constprop.1+0x34>)
 8003124:	d110      	bne.n	8003148 <convertCANid2Reg.constprop.1+0x28>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
 8003126:	0a02      	lsrs	r2, r0, #8
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8003128:	70d8      	strb	r0, [r3, #3]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
 800312a:	0c00      	lsrs	r0, r0, #16
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800312c:	f000 0103 	and.w	r1, r0, #3
    tempPassedInID = tempPassedInID << 3;
 8003130:	00c0      	lsls	r0, r0, #3
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8003132:	709a      	strb	r2, [r3, #2]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8003134:	f000 02e0 	and.w	r2, r0, #224	; 0xe0
 8003138:	430a      	orrs	r2, r1
    wipSIDL = wipSIDL + 0x08;
 800313a:	3208      	adds	r2, #8
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 800313c:	f022 0214 	bic.w	r2, r2, #20
 8003140:	705a      	strb	r2, [r3, #1]
  {
    passedIdReg->tempEID8 = 0;
    passedIdReg->tempEID0 = 0;
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
 8003142:	0a00      	lsrs	r0, r0, #8
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8003144:	7018      	strb	r0, [r3, #0]
 8003146:	4770      	bx	lr
    passedIdReg->tempEID8 = 0;
 8003148:	2200      	movs	r2, #0
    tempPassedInID = tempPassedInID << 5;
 800314a:	0140      	lsls	r0, r0, #5
    passedIdReg->tempEID8 = 0;
 800314c:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 800314e:	70da      	strb	r2, [r3, #3]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8003150:	7058      	strb	r0, [r3, #1]
 8003152:	e7f6      	b.n	8003142 <convertCANid2Reg.constprop.1+0x22>
 8003154:	20003df8 	.word	0x20003df8

08003158 <CANSPI_Initialize>:
{
 8003158:	b510      	push	{r4, lr}
 800315a:	b088      	sub	sp, #32
  RXM0reg.RXM0SIDH = 0x00; //(mask0&0x7F8)>>3;
 800315c:	2400      	movs	r4, #0
 800315e:	f88d 4018 	strb.w	r4, [sp, #24]
  RXM0reg.RXM0SIDL = 0x00;// (mask0&0x7)<<5;
 8003162:	f88d 4019 	strb.w	r4, [sp, #25]
  RXM0reg.RXM0EID8 = 0x00;
 8003166:	f88d 401a 	strb.w	r4, [sp, #26]
  RXM0reg.RXM0EID0 = 0x00;
 800316a:	f88d 401b 	strb.w	r4, [sp, #27]
  RXM1reg.RXM1SIDH = 0x00; //(mask1&0x7F8)>>3;
 800316e:	f88d 401c 	strb.w	r4, [sp, #28]
  RXM1reg.RXM1SIDL = 0x00; //(mask1&0x7)<<5;
 8003172:	f88d 401d 	strb.w	r4, [sp, #29]
  RXM1reg.RXM1EID8 = 0x00;
 8003176:	f88d 401e 	strb.w	r4, [sp, #30]
  RXM1reg.RXM1EID0 = 0x00;
 800317a:	f88d 401f 	strb.w	r4, [sp, #31]
  RXF0reg.RXF0SIDH = 0x00; //(filter0&0x7F8)>>3;
 800317e:	f88d 4000 	strb.w	r4, [sp]
  RXF0reg.RXF0SIDL = 0x00; //(filter0&0x7)<<5;     //Standard Filter
 8003182:	f88d 4001 	strb.w	r4, [sp, #1]
  RXF0reg.RXF0EID8 = 0x00;
 8003186:	f88d 4002 	strb.w	r4, [sp, #2]
  RXF0reg.RXF0EID0 = 0x00;
 800318a:	f88d 4003 	strb.w	r4, [sp, #3]
  RXF1reg.RXF1SIDH = 0x00; //(filter1&0x7F8)>>3;
 800318e:	f88d 4004 	strb.w	r4, [sp, #4]
  RXF1reg.RXF1SIDL = 0x00; //(filter1&0x7)<<5;     //Extended Filter
 8003192:	f88d 4005 	strb.w	r4, [sp, #5]
  RXF1reg.RXF1EID8 = 0x00;
 8003196:	f88d 4006 	strb.w	r4, [sp, #6]
  RXF1reg.RXF1EID0 = 0x00;
 800319a:	f88d 4007 	strb.w	r4, [sp, #7]
  RXF2reg.RXF2SIDH = 0x00; //(filter2&0x7F8)>>3;
 800319e:	f88d 4008 	strb.w	r4, [sp, #8]
  RXF2reg.RXF2SIDL = 0x00; //(filter2&0x7)<<5;
 80031a2:	f88d 4009 	strb.w	r4, [sp, #9]
  RXF2reg.RXF2EID8 = 0x00;
 80031a6:	f88d 400a 	strb.w	r4, [sp, #10]
  RXF2reg.RXF2EID0 = 0x00;
 80031aa:	f88d 400b 	strb.w	r4, [sp, #11]
  RXF3reg.RXF3SIDH = 0x00; //(filter3&0x7F8)>>3;
 80031ae:	f88d 400c 	strb.w	r4, [sp, #12]
  RXF3reg.RXF3SIDL = 0x00; //(filter3&0x7)<<5;
 80031b2:	f88d 400d 	strb.w	r4, [sp, #13]
  RXF3reg.RXF3EID8 = 0x00;
 80031b6:	f88d 400e 	strb.w	r4, [sp, #14]
  RXF3reg.RXF3EID0 = 0x00;
 80031ba:	f88d 400f 	strb.w	r4, [sp, #15]
  RXF4reg.RXF4SIDH = 0x00; //(filter4&0x7F8)>>3;
 80031be:	f88d 4010 	strb.w	r4, [sp, #16]
  RXF4reg.RXF4SIDL = 0x00; //(filter4&0x7)<<5;
 80031c2:	f88d 4011 	strb.w	r4, [sp, #17]
  RXF4reg.RXF4EID8 = 0x00;
 80031c6:	f88d 4012 	strb.w	r4, [sp, #18]
  RXF4reg.RXF4EID0 = 0x00;
 80031ca:	f88d 4013 	strb.w	r4, [sp, #19]
  RXF5reg.RXF5SIDH = 0x00; //(filter5&0x7F8)>>3;
 80031ce:	f88d 4014 	strb.w	r4, [sp, #20]
  RXF5reg.RXF5SIDL = 0x00; //(filter5&0x7)<<5;
 80031d2:	f88d 4015 	strb.w	r4, [sp, #21]
  RXF5reg.RXF5EID8 = 0x00;
 80031d6:	f88d 4016 	strb.w	r4, [sp, #22]
  RXF5reg.RXF5EID0 = 0x00;
 80031da:	f88d 4017 	strb.w	r4, [sp, #23]
  if(!MCP2515_Initialize())
 80031de:	f000 f907 	bl	80033f0 <MCP2515_Initialize>
 80031e2:	b910      	cbnz	r0, 80031ea <CANSPI_Initialize+0x92>
    return false;
 80031e4:	2000      	movs	r0, #0
}
 80031e6:	b008      	add	sp, #32
 80031e8:	bd10      	pop	{r4, pc}
  if(!MCP2515_SetConfigMode())
 80031ea:	f000 f973 	bl	80034d4 <MCP2515_SetConfigMode>
 80031ee:	2800      	cmp	r0, #0
 80031f0:	d0f8      	beq.n	80031e4 <CANSPI_Initialize+0x8c>
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80031f2:	aa06      	add	r2, sp, #24
 80031f4:	2123      	movs	r1, #35	; 0x23
 80031f6:	2020      	movs	r0, #32
 80031f8:	f000 f996 	bl	8003528 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80031fc:	aa07      	add	r2, sp, #28
 80031fe:	2127      	movs	r1, #39	; 0x27
 8003200:	2024      	movs	r0, #36	; 0x24
 8003202:	f000 f991 	bl	8003528 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8003206:	466a      	mov	r2, sp
 8003208:	2103      	movs	r1, #3
 800320a:	4620      	mov	r0, r4
 800320c:	f000 f98c 	bl	8003528 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8003210:	aa01      	add	r2, sp, #4
 8003212:	2107      	movs	r1, #7
 8003214:	2004      	movs	r0, #4
 8003216:	f000 f987 	bl	8003528 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800321a:	aa02      	add	r2, sp, #8
 800321c:	210b      	movs	r1, #11
 800321e:	2008      	movs	r0, #8
 8003220:	f000 f982 	bl	8003528 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8003224:	aa03      	add	r2, sp, #12
 8003226:	2113      	movs	r1, #19
 8003228:	2010      	movs	r0, #16
 800322a:	f000 f97d 	bl	8003528 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 800322e:	aa04      	add	r2, sp, #16
 8003230:	2117      	movs	r1, #23
 8003232:	2014      	movs	r0, #20
 8003234:	f000 f978 	bl	8003528 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8003238:	aa05      	add	r2, sp, #20
 800323a:	211b      	movs	r1, #27
 800323c:	2018      	movs	r0, #24
 800323e:	f000 f973 	bl	8003528 <MCP2515_WriteByteSequence>
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8003242:	2104      	movs	r1, #4
 8003244:	2060      	movs	r0, #96	; 0x60
 8003246:	f000 f927 	bl	8003498 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 800324a:	2101      	movs	r1, #1
 800324c:	2070      	movs	r0, #112	; 0x70
 800324e:	f000 f923 	bl	8003498 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_CANINTE, 0x03);		//Enable interrupt on RXB0/RXB1
 8003252:	2103      	movs	r1, #3
 8003254:	202b      	movs	r0, #43	; 0x2b
 8003256:	f000 f91f 	bl	8003498 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 800325a:	4621      	mov	r1, r4
 800325c:	202a      	movs	r0, #42	; 0x2a
 800325e:	f000 f91b 	bl	8003498 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_CNF2, 0xE0);
 8003262:	21e0      	movs	r1, #224	; 0xe0
 8003264:	2029      	movs	r0, #41	; 0x29
 8003266:	f000 f917 	bl	8003498 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_CNF3, 0x82);
 800326a:	2182      	movs	r1, #130	; 0x82
 800326c:	2028      	movs	r0, #40	; 0x28
 800326e:	f000 f913 	bl	8003498 <MCP2515_WriteByte>
  if(!MCP2515_SetNormalMode())
 8003272:	f000 f944 	bl	80034fe <MCP2515_SetNormalMode>
    return false;
 8003276:	3000      	adds	r0, #0
 8003278:	bf18      	it	ne
 800327a:	2001      	movne	r0, #1
 800327c:	e7b3      	b.n	80031e6 <CANSPI_Initialize+0x8e>
	...

08003280 <CANSPI_Transmit>:
{
 8003280:	b570      	push	{r4, r5, r6, lr}
  idReg.tempSIDH = 0;
 8003282:	4e1e      	ldr	r6, [pc, #120]	; (80032fc <CANSPI_Transmit+0x7c>)
 8003284:	2500      	movs	r5, #0
{
 8003286:	4604      	mov	r4, r0
  idReg.tempSIDH = 0;
 8003288:	7035      	strb	r5, [r6, #0]
  idReg.tempSIDL = 0;
 800328a:	7075      	strb	r5, [r6, #1]
  idReg.tempEID8 = 0;
 800328c:	70b5      	strb	r5, [r6, #2]
  idReg.tempEID0 = 0;
 800328e:	70f5      	strb	r5, [r6, #3]
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8003290:	f000 f9b2 	bl	80035f8 <MCP2515_ReadStatus>
 8003294:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <CANSPI_Transmit+0x80>)
  if (ctrlStatus.TXB0REQ != 1)
 8003296:	0741      	lsls	r1, r0, #29
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8003298:	7018      	strb	r0, [r3, #0]
  if (ctrlStatus.TXB0REQ != 1)
 800329a:	d40f      	bmi.n	80032bc <CANSPI_Transmit+0x3c>
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800329c:	7821      	ldrb	r1, [r4, #0]
 800329e:	6860      	ldr	r0, [r4, #4]
 80032a0:	f7ff ff3e 	bl	8003120 <convertCANid2Reg.constprop.1>
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80032a4:	2040      	movs	r0, #64	; 0x40
 80032a6:	f104 0309 	add.w	r3, r4, #9
 80032aa:	7a22      	ldrb	r2, [r4, #8]
 80032ac:	4631      	mov	r1, r6
 80032ae:	f000 f961 	bl	8003574 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 80032b2:	2081      	movs	r0, #129	; 0x81
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 80032b4:	f000 f98a 	bl	80035cc <MCP2515_RequestToSend>
    returnValue = 1;
 80032b8:	2001      	movs	r0, #1
 80032ba:	bd70      	pop	{r4, r5, r6, pc}
  else if (ctrlStatus.TXB1REQ != 1)
 80032bc:	06c2      	lsls	r2, r0, #27
 80032be:	d40c      	bmi.n	80032da <CANSPI_Transmit+0x5a>
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80032c0:	7821      	ldrb	r1, [r4, #0]
 80032c2:	6860      	ldr	r0, [r4, #4]
 80032c4:	f7ff ff2c 	bl	8003120 <convertCANid2Reg.constprop.1>
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80032c8:	2042      	movs	r0, #66	; 0x42
 80032ca:	f104 0309 	add.w	r3, r4, #9
 80032ce:	7a22      	ldrb	r2, [r4, #8]
 80032d0:	4631      	mov	r1, r6
 80032d2:	f000 f94f 	bl	8003574 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 80032d6:	2082      	movs	r0, #130	; 0x82
 80032d8:	e7ec      	b.n	80032b4 <CANSPI_Transmit+0x34>
  else if (ctrlStatus.TXB2REQ != 1)
 80032da:	0643      	lsls	r3, r0, #25
 80032dc:	d40c      	bmi.n	80032f8 <CANSPI_Transmit+0x78>
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80032de:	7821      	ldrb	r1, [r4, #0]
 80032e0:	6860      	ldr	r0, [r4, #4]
 80032e2:	f7ff ff1d 	bl	8003120 <convertCANid2Reg.constprop.1>
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80032e6:	2044      	movs	r0, #68	; 0x44
 80032e8:	f104 0309 	add.w	r3, r4, #9
 80032ec:	7a22      	ldrb	r2, [r4, #8]
 80032ee:	4631      	mov	r1, r6
 80032f0:	f000 f940 	bl	8003574 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 80032f4:	2084      	movs	r0, #132	; 0x84
 80032f6:	e7dd      	b.n	80032b4 <CANSPI_Transmit+0x34>
  uint8_t returnValue = 0;
 80032f8:	4628      	mov	r0, r5
}
 80032fa:	bd70      	pop	{r4, r5, r6, pc}
 80032fc:	20003df8 	.word	0x20003df8
 8003300:	20003df4 	.word	0x20003df4

08003304 <CANSPI_Receive>:
{
 8003304:	b530      	push	{r4, r5, lr}
 8003306:	b085      	sub	sp, #20
 8003308:	4604      	mov	r4, r0
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 800330a:	f000 f98d 	bl	8003628 <MCP2515_GetRxStatus>
 800330e:	4605      	mov	r5, r0
  if (rxStatus.rxBuffer != 0)
 8003310:	f010 00c0 	ands.w	r0, r0, #192	; 0xc0
 8003314:	d040      	beq.n	8003398 <CANSPI_Receive+0x94>
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8003316:	066b      	lsls	r3, r5, #25
 8003318:	d540      	bpl.n	800339c <CANSPI_Receive+0x98>
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 800331a:	220d      	movs	r2, #13
 800331c:	4669      	mov	r1, sp
 800331e:	2090      	movs	r0, #144	; 0x90
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8003320:	f000 f89a 	bl	8003458 <MCP2515_ReadRxSequence>
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8003324:	f005 0518 	and.w	r5, r5, #24
 8003328:	2d10      	cmp	r5, #16
 800332a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800332e:	f89d 1000 	ldrb.w	r1, [sp]
 8003332:	d139      	bne.n	80033a8 <CANSPI_Receive+0xa4>
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8003334:	2202      	movs	r2, #2
 8003336:	7022      	strb	r2, [r4, #0]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8003338:	095a      	lsrs	r2, r3, #5
 800333a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8003346:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800334a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 800334e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003352:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8003356:	6063      	str	r3, [r4, #4]
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8003358:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800335c:	7223      	strb	r3, [r4, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800335e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003362:	7263      	strb	r3, [r4, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8003364:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003368:	72a3      	strb	r3, [r4, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800336a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800336e:	72e3      	strb	r3, [r4, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8003370:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003374:	7323      	strb	r3, [r4, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8003376:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800337a:	7363      	strb	r3, [r4, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 800337c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003380:	73a3      	strb	r3, [r4, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8003382:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003386:	73e3      	strb	r3, [r4, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8003388:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800338c:	7423      	strb	r3, [r4, #16]
    MCP2515_WriteByte(MCP2515_CANINTF,0x00); // Resetter flagg
 800338e:	202c      	movs	r0, #44	; 0x2c
 8003390:	2100      	movs	r1, #0
 8003392:	f000 f881 	bl	8003498 <MCP2515_WriteByte>
    returnValue = 1;
 8003396:	2001      	movs	r0, #1
}
 8003398:	b005      	add	sp, #20
 800339a:	bd30      	pop	{r4, r5, pc}
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 800339c:	2880      	cmp	r0, #128	; 0x80
 800339e:	d1c1      	bne.n	8003324 <CANSPI_Receive+0x20>
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80033a0:	220d      	movs	r2, #13
 80033a2:	4669      	mov	r1, sp
 80033a4:	2094      	movs	r0, #148	; 0x94
 80033a6:	e7bb      	b.n	8003320 <CANSPI_Receive+0x1c>
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80033a8:	2201      	movs	r2, #1
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80033aa:	095b      	lsrs	r3, r3, #5
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80033ac:	7022      	strb	r2, [r4, #0]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80033ae:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80033b2:	e7d0      	b.n	8003356 <CANSPI_Receive+0x52>

080033b4 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* E */
static void SPI_Tx(uint8_t data)
{
 80033b4:	b507      	push	{r0, r1, r2, lr}
 80033b6:	a902      	add	r1, sp, #8
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 80033b8:	230a      	movs	r3, #10
{
 80033ba:	f801 0d01 	strb.w	r0, [r1, #-1]!
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 80033be:	2201      	movs	r2, #1
 80033c0:	4802      	ldr	r0, [pc, #8]	; (80033cc <SPI_Tx+0x18>)
 80033c2:	f7fd fd71 	bl	8000ea8 <HAL_SPI_Transmit>
}
 80033c6:	b003      	add	sp, #12
 80033c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80033cc:	20003dfc 	.word	0x20003dfc

080033d0 <SPI_Rx>:
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
}

/* SPI Rx Wrapper funksjon*/
static uint8_t SPI_Rx(void)
{
 80033d0:	b507      	push	{r0, r1, r2, lr}
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 80033d2:	230a      	movs	r3, #10
 80033d4:	2201      	movs	r2, #1
 80033d6:	f10d 0107 	add.w	r1, sp, #7
 80033da:	4804      	ldr	r0, [pc, #16]	; (80033ec <SPI_Rx+0x1c>)
 80033dc:	f7fd ff09 	bl	80011f2 <HAL_SPI_Receive>
  return retVal;
}
 80033e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80033e4:	b003      	add	sp, #12
 80033e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80033ea:	bf00      	nop
 80033ec:	20003dfc 	.word	0x20003dfc

080033f0 <MCP2515_Initialize>:
{
 80033f0:	b538      	push	{r3, r4, r5, lr}
  MCP2515_CS_HIGH();    
 80033f2:	2201      	movs	r2, #1
 80033f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033f8:	4807      	ldr	r0, [pc, #28]	; (8003418 <MCP2515_Initialize+0x28>)
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80033fa:	4d08      	ldr	r5, [pc, #32]	; (800341c <MCP2515_Initialize+0x2c>)
  MCP2515_CS_HIGH();    
 80033fc:	f7fd fa3c 	bl	8000878 <HAL_GPIO_WritePin>
 8003400:	240a      	movs	r4, #10
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8003402:	4628      	mov	r0, r5
 8003404:	f7fd ff94 	bl	8001330 <HAL_SPI_GetState>
 8003408:	2801      	cmp	r0, #1
 800340a:	d004      	beq.n	8003416 <MCP2515_Initialize+0x26>
 800340c:	3c01      	subs	r4, #1
  } while(loop > 0); 
 800340e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003412:	d1f6      	bne.n	8003402 <MCP2515_Initialize+0x12>
  return false;
 8003414:	4620      	mov	r0, r4
}
 8003416:	bd38      	pop	{r3, r4, r5, pc}
 8003418:	40021000 	.word	0x40021000
 800341c:	20003dfc 	.word	0x20003dfc

08003420 <MCP2515_ReadByte>:
{
 8003420:	b538      	push	{r3, r4, r5, lr}
  MCP2515_CS_LOW();
 8003422:	4c0c      	ldr	r4, [pc, #48]	; (8003454 <MCP2515_ReadByte+0x34>)
 8003424:	2200      	movs	r2, #0
 8003426:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 800342a:	4605      	mov	r5, r0
  MCP2515_CS_LOW();
 800342c:	4620      	mov	r0, r4
 800342e:	f7fd fa23 	bl	8000878 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_READ);
 8003432:	2003      	movs	r0, #3
 8003434:	f7ff ffbe 	bl	80033b4 <SPI_Tx>
  SPI_Tx(address);
 8003438:	4628      	mov	r0, r5
 800343a:	f7ff ffbb 	bl	80033b4 <SPI_Tx>
  retVal = SPI_Rx();
 800343e:	f7ff ffc7 	bl	80033d0 <SPI_Rx>
  MCP2515_CS_HIGH();
 8003442:	2201      	movs	r2, #1
  retVal = SPI_Rx();
 8003444:	4605      	mov	r5, r0
  MCP2515_CS_HIGH();
 8003446:	f44f 7180 	mov.w	r1, #256	; 0x100
 800344a:	4620      	mov	r0, r4
 800344c:	f7fd fa14 	bl	8000878 <HAL_GPIO_WritePin>
}
 8003450:	4628      	mov	r0, r5
 8003452:	bd38      	pop	{r3, r4, r5, pc}
 8003454:	40021000 	.word	0x40021000

08003458 <MCP2515_ReadRxSequence>:
{
 8003458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MCP2515_CS_LOW();
 800345a:	4c0d      	ldr	r4, [pc, #52]	; (8003490 <MCP2515_ReadRxSequence+0x38>)
{
 800345c:	4607      	mov	r7, r0
 800345e:	460d      	mov	r5, r1
 8003460:	4616      	mov	r6, r2
  MCP2515_CS_LOW();
 8003462:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003466:	2200      	movs	r2, #0
 8003468:	4620      	mov	r0, r4
 800346a:	f7fd fa05 	bl	8000878 <HAL_GPIO_WritePin>
  SPI_Tx(instruction);        
 800346e:	4638      	mov	r0, r7
 8003470:	f7ff ffa0 	bl	80033b4 <SPI_Tx>

/* SPI Rx Wrapper funksjon*/
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8003474:	4632      	mov	r2, r6
 8003476:	4629      	mov	r1, r5
 8003478:	230a      	movs	r3, #10
 800347a:	4806      	ldr	r0, [pc, #24]	; (8003494 <MCP2515_ReadRxSequence+0x3c>)
 800347c:	f7fd feb9 	bl	80011f2 <HAL_SPI_Receive>
  MCP2515_CS_HIGH();
 8003480:	4620      	mov	r0, r4
 8003482:	2201      	movs	r2, #1
 8003484:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 8003488:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  MCP2515_CS_HIGH();
 800348c:	f7fd b9f4 	b.w	8000878 <HAL_GPIO_WritePin>
 8003490:	40021000 	.word	0x40021000
 8003494:	20003dfc 	.word	0x20003dfc

08003498 <MCP2515_WriteByte>:
{    
 8003498:	b570      	push	{r4, r5, r6, lr}
  MCP2515_CS_LOW();  
 800349a:	4c0d      	ldr	r4, [pc, #52]	; (80034d0 <MCP2515_WriteByte+0x38>)
 800349c:	2200      	movs	r2, #0
{    
 800349e:	4606      	mov	r6, r0
 80034a0:	460d      	mov	r5, r1
  MCP2515_CS_LOW();  
 80034a2:	4620      	mov	r0, r4
 80034a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034a8:	f7fd f9e6 	bl	8000878 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_WRITE);
 80034ac:	2002      	movs	r0, #2
 80034ae:	f7ff ff81 	bl	80033b4 <SPI_Tx>
  SPI_Tx(address);
 80034b2:	4630      	mov	r0, r6
 80034b4:	f7ff ff7e 	bl	80033b4 <SPI_Tx>
  SPI_Tx(data);  
 80034b8:	4628      	mov	r0, r5
 80034ba:	f7ff ff7b 	bl	80033b4 <SPI_Tx>
  MCP2515_CS_HIGH();
 80034be:	4620      	mov	r0, r4
 80034c0:	2201      	movs	r2, #1
 80034c2:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 80034c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MCP2515_CS_HIGH();
 80034ca:	f7fd b9d5 	b.w	8000878 <HAL_GPIO_WritePin>
 80034ce:	bf00      	nop
 80034d0:	40021000 	.word	0x40021000

080034d4 <MCP2515_SetConfigMode>:
{
 80034d4:	b510      	push	{r4, lr}
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80034d6:	2180      	movs	r1, #128	; 0x80
 80034d8:	200f      	movs	r0, #15
 80034da:	f7ff ffdd 	bl	8003498 <MCP2515_WriteByte>
 80034de:	240a      	movs	r4, #10
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80034e0:	200e      	movs	r0, #14
 80034e2:	f7ff ff9d 	bl	8003420 <MCP2515_ReadByte>
 80034e6:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
 80034ea:	2880      	cmp	r0, #128	; 0x80
 80034ec:	d005      	beq.n	80034fa <MCP2515_SetConfigMode+0x26>
 80034ee:	3c01      	subs	r4, #1
  } while(loop > 0); 
 80034f0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80034f4:	d1f4      	bne.n	80034e0 <MCP2515_SetConfigMode+0xc>
  return false;
 80034f6:	4620      	mov	r0, r4
 80034f8:	bd10      	pop	{r4, pc}
      return true;
 80034fa:	2001      	movs	r0, #1
}
 80034fc:	bd10      	pop	{r4, pc}

080034fe <MCP2515_SetNormalMode>:
{
 80034fe:	b510      	push	{r4, lr}
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8003500:	2100      	movs	r1, #0
 8003502:	200f      	movs	r0, #15
 8003504:	f7ff ffc8 	bl	8003498 <MCP2515_WriteByte>
 8003508:	240a      	movs	r4, #10
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 800350a:	200e      	movs	r0, #14
 800350c:	f7ff ff88 	bl	8003420 <MCP2515_ReadByte>
 8003510:	f010 0fe0 	tst.w	r0, #224	; 0xe0
 8003514:	d005      	beq.n	8003522 <MCP2515_SetNormalMode+0x24>
 8003516:	3c01      	subs	r4, #1
  } while(loop > 0);
 8003518:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800351c:	d1f5      	bne.n	800350a <MCP2515_SetNormalMode+0xc>
  return false;
 800351e:	4620      	mov	r0, r4
 8003520:	bd10      	pop	{r4, pc}
      return true;
 8003522:	2001      	movs	r0, #1
}
 8003524:	bd10      	pop	{r4, pc}
	...

08003528 <MCP2515_WriteByteSequence>:
{    
 8003528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MCP2515_CS_LOW();
 800352a:	4d10      	ldr	r5, [pc, #64]	; (800356c <MCP2515_WriteByteSequence+0x44>)
{    
 800352c:	4606      	mov	r6, r0
 800352e:	460c      	mov	r4, r1
 8003530:	4617      	mov	r7, r2
  MCP2515_CS_LOW();
 8003532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003536:	2200      	movs	r2, #0
 8003538:	4628      	mov	r0, r5
 800353a:	f7fd f99d 	bl	8000878 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_WRITE);
 800353e:	2002      	movs	r0, #2
 8003540:	f7ff ff38 	bl	80033b4 <SPI_Tx>
  SPI_Tx(startAddress);
 8003544:	4630      	mov	r0, r6
 8003546:	f7ff ff35 	bl	80033b4 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 800354a:	1c62      	adds	r2, r4, #1
 800354c:	1b92      	subs	r2, r2, r6
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 800354e:	4639      	mov	r1, r7
 8003550:	230a      	movs	r3, #10
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	4806      	ldr	r0, [pc, #24]	; (8003570 <MCP2515_WriteByteSequence+0x48>)
 8003556:	f7fd fca7 	bl	8000ea8 <HAL_SPI_Transmit>
  MCP2515_CS_HIGH();
 800355a:	4628      	mov	r0, r5
 800355c:	2201      	movs	r2, #1
 800355e:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 8003562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  MCP2515_CS_HIGH();
 8003566:	f7fd b987 	b.w	8000878 <HAL_GPIO_WritePin>
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	20003dfc 	.word	0x20003dfc

08003574 <MCP2515_LoadTxSequence>:
{    
 8003574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  MCP2515_CS_LOW();
 8003578:	4c12      	ldr	r4, [pc, #72]	; (80035c4 <MCP2515_LoadTxSequence+0x50>)
{    
 800357a:	4616      	mov	r6, r2
 800357c:	4605      	mov	r5, r0
 800357e:	4688      	mov	r8, r1
  MCP2515_CS_LOW();
 8003580:	2200      	movs	r2, #0
 8003582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003586:	4620      	mov	r0, r4
{    
 8003588:	461f      	mov	r7, r3
  MCP2515_CS_LOW();
 800358a:	f7fd f975 	bl	8000878 <HAL_GPIO_WritePin>
  SPI_Tx(instruction);
 800358e:	4628      	mov	r0, r5
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8003590:	4d0d      	ldr	r5, [pc, #52]	; (80035c8 <MCP2515_LoadTxSequence+0x54>)
  SPI_Tx(instruction);
 8003592:	f7ff ff0f 	bl	80033b4 <SPI_Tx>
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8003596:	4641      	mov	r1, r8
 8003598:	230a      	movs	r3, #10
 800359a:	2204      	movs	r2, #4
 800359c:	4628      	mov	r0, r5
 800359e:	f7fd fc83 	bl	8000ea8 <HAL_SPI_Transmit>
  SPI_Tx(dlc);
 80035a2:	4630      	mov	r0, r6
 80035a4:	f7ff ff06 	bl	80033b4 <SPI_Tx>
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 80035a8:	4632      	mov	r2, r6
 80035aa:	4639      	mov	r1, r7
 80035ac:	4628      	mov	r0, r5
 80035ae:	230a      	movs	r3, #10
 80035b0:	f7fd fc7a 	bl	8000ea8 <HAL_SPI_Transmit>
  MCP2515_CS_HIGH();
 80035b4:	4620      	mov	r0, r4
 80035b6:	2201      	movs	r2, #1
 80035b8:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 80035bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  MCP2515_CS_HIGH();
 80035c0:	f7fd b95a 	b.w	8000878 <HAL_GPIO_WritePin>
 80035c4:	40021000 	.word	0x40021000
 80035c8:	20003dfc 	.word	0x20003dfc

080035cc <MCP2515_RequestToSend>:
{
 80035cc:	b538      	push	{r3, r4, r5, lr}
  MCP2515_CS_LOW();
 80035ce:	4c09      	ldr	r4, [pc, #36]	; (80035f4 <MCP2515_RequestToSend+0x28>)
{
 80035d0:	4605      	mov	r5, r0
  MCP2515_CS_LOW();
 80035d2:	2200      	movs	r2, #0
 80035d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035d8:	4620      	mov	r0, r4
 80035da:	f7fd f94d 	bl	8000878 <HAL_GPIO_WritePin>
  SPI_Tx(instruction);
 80035de:	4628      	mov	r0, r5
 80035e0:	f7ff fee8 	bl	80033b4 <SPI_Tx>
  MCP2515_CS_HIGH();
 80035e4:	4620      	mov	r0, r4
 80035e6:	2201      	movs	r2, #1
 80035e8:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 80035ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  MCP2515_CS_HIGH();
 80035f0:	f7fd b942 	b.w	8000878 <HAL_GPIO_WritePin>
 80035f4:	40021000 	.word	0x40021000

080035f8 <MCP2515_ReadStatus>:
{
 80035f8:	b538      	push	{r3, r4, r5, lr}
  MCP2515_CS_LOW();
 80035fa:	4c0a      	ldr	r4, [pc, #40]	; (8003624 <MCP2515_ReadStatus+0x2c>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003602:	4620      	mov	r0, r4
 8003604:	f7fd f938 	bl	8000878 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_READ_STATUS);
 8003608:	20a0      	movs	r0, #160	; 0xa0
 800360a:	f7ff fed3 	bl	80033b4 <SPI_Tx>
  retVal = SPI_Rx();
 800360e:	f7ff fedf 	bl	80033d0 <SPI_Rx>
  MCP2515_CS_HIGH();
 8003612:	2201      	movs	r2, #1
  retVal = SPI_Rx();
 8003614:	4605      	mov	r5, r0
  MCP2515_CS_HIGH();
 8003616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800361a:	4620      	mov	r0, r4
 800361c:	f7fd f92c 	bl	8000878 <HAL_GPIO_WritePin>
}
 8003620:	4628      	mov	r0, r5
 8003622:	bd38      	pop	{r3, r4, r5, pc}
 8003624:	40021000 	.word	0x40021000

08003628 <MCP2515_GetRxStatus>:
{
 8003628:	b538      	push	{r3, r4, r5, lr}
  MCP2515_CS_LOW();
 800362a:	4c0a      	ldr	r4, [pc, #40]	; (8003654 <MCP2515_GetRxStatus+0x2c>)
 800362c:	2200      	movs	r2, #0
 800362e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003632:	4620      	mov	r0, r4
 8003634:	f7fd f920 	bl	8000878 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_RX_STATUS);
 8003638:	20b0      	movs	r0, #176	; 0xb0
 800363a:	f7ff febb 	bl	80033b4 <SPI_Tx>
  retVal = SPI_Rx();
 800363e:	f7ff fec7 	bl	80033d0 <SPI_Rx>
  MCP2515_CS_HIGH();
 8003642:	2201      	movs	r2, #1
  retVal = SPI_Rx();
 8003644:	4605      	mov	r5, r0
  MCP2515_CS_HIGH();
 8003646:	f44f 7180 	mov.w	r1, #256	; 0x100
 800364a:	4620      	mov	r0, r4
 800364c:	f7fd f914 	bl	8000878 <HAL_GPIO_WritePin>
}
 8003650:	4628      	mov	r0, r5
 8003652:	bd38      	pop	{r3, r4, r5, pc}
 8003654:	40021000 	.word	0x40021000

08003658 <SPI_CAN_Init>:

SPI_HandleTypeDef hspi;

/* SPI3 init function */
void SPI_CAN_Init(void)
{
 8003658:	b508      	push	{r3, lr}

  hspi.Instance = CAN_SPI;
 800365a:	480f      	ldr	r0, [pc, #60]	; (8003698 <SPI_CAN_Init+0x40>)
  hspi.Init.Mode = SPI_MODE_MASTER;
 800365c:	4b0f      	ldr	r3, [pc, #60]	; (800369c <SPI_CAN_Init+0x44>)
 800365e:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi.Init.Direction = SPI_DIRECTION_2LINES;
  hspi.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi.Init.NSS = SPI_NSS_SOFT;
 8003662:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi.Init.Mode = SPI_MODE_MASTER;
 8003666:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi.Init.Direction = SPI_DIRECTION_2LINES;
 800366a:	2300      	movs	r3, #0
 800366c:	6083      	str	r3, [r0, #8]
  hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 800366e:	60c3      	str	r3, [r0, #12]
  hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003670:	6103      	str	r3, [r0, #16]
  hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003672:	6143      	str	r3, [r0, #20]
  hspi.Init.NSS = SPI_NSS_SOFT;
 8003674:	6182      	str	r2, [r0, #24]
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003676:	6203      	str	r3, [r0, #32]
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003678:	2210      	movs	r2, #16
  hspi.Init.TIMode = SPI_TIMODE_DISABLE;
 800367a:	6243      	str	r3, [r0, #36]	; 0x24
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800367c:	6283      	str	r3, [r0, #40]	; 0x28
  hspi.Init.CRCPolynomial = 10;
 800367e:	230a      	movs	r3, #10
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003680:	61c2      	str	r2, [r0, #28]
  hspi.Init.CRCPolynomial = 10;
 8003682:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi) != HAL_OK)
 8003684:	f7fd fbd3 	bl	8000e2e <HAL_SPI_Init>
 8003688:	b128      	cbz	r0, 8003696 <SPI_CAN_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800368a:	211b      	movs	r1, #27
 800368c:	4804      	ldr	r0, [pc, #16]	; (80036a0 <SPI_CAN_Init+0x48>)
  }

}
 800368e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003692:	f000 bab8 	b.w	8003c06 <_Error_Handler>
 8003696:	bd08      	pop	{r3, pc}
 8003698:	20003dfc 	.word	0x20003dfc
 800369c:	40003c00 	.word	0x40003c00
 80036a0:	08003efe 	.word	0x08003efe

080036a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80036a4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI3)
 80036a6:	6802      	ldr	r2, [r0, #0]
 80036a8:	4b25      	ldr	r3, [pc, #148]	; (8003740 <HAL_SPI_MspInit+0x9c>)
 80036aa:	429a      	cmp	r2, r3
{
 80036ac:	b088      	sub	sp, #32
 80036ae:	4604      	mov	r4, r0
  if(spiHandle->Instance==SPI3)
 80036b0:	d11a      	bne.n	80036e8 <HAL_SPI_MspInit+0x44>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80036b2:	2100      	movs	r1, #0
 80036b4:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 80036b8:	9100      	str	r1, [sp, #0]
 80036ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036bc:	4821      	ldr	r0, [pc, #132]	; (8003744 <HAL_SPI_MspInit+0xa0>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80036be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	9105      	str	r1, [sp, #20]
    __HAL_RCC_SPI3_CLK_ENABLE();
 80036c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80036d0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80036d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d6:	2302      	movs	r3, #2
 80036d8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036da:	2303      	movs	r3, #3
 80036dc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036de:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80036e0:	2306      	movs	r3, #6
 80036e2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036e4:	f7fc ffe8 	bl	80006b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  if(spiHandle->Instance==SPI2)
 80036e8:	6822      	ldr	r2, [r4, #0]
 80036ea:	4b17      	ldr	r3, [pc, #92]	; (8003748 <HAL_SPI_MspInit+0xa4>)
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d124      	bne.n	800373a <HAL_SPI_MspInit+0x96>
  {

    /* SPI3 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80036f0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80036f4:	2200      	movs	r2, #0
 80036f6:	9201      	str	r2, [sp, #4]
 80036f8:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fa:	4814      	ldr	r0, [pc, #80]	; (800374c <HAL_SPI_MspInit+0xa8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80036fc:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003700:	6419      	str	r1, [r3, #64]	; 0x40
 8003702:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003704:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8003708:	9101      	str	r1, [sp, #4]
 800370a:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800370c:	9202      	str	r2, [sp, #8]
 800370e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003710:	f041 0102 	orr.w	r1, r1, #2
 8003714:	6319      	str	r1, [r3, #48]	; 0x30
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003718:	9205      	str	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	9302      	str	r3, [sp, #8]
 8003720:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003722:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003726:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003728:	2302      	movs	r3, #2
 800372a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372c:	2303      	movs	r3, #3
 800372e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003730:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003732:	2305      	movs	r3, #5
 8003734:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003736:	f7fc ffbf 	bl	80006b8 <HAL_GPIO_Init>

  }
}
 800373a:	b008      	add	sp, #32
 800373c:	bd10      	pop	{r4, pc}
 800373e:	bf00      	nop
 8003740:	40003c00 	.word	0x40003c00
 8003744:	40020800 	.word	0x40020800
 8003748:	40003800 	.word	0x40003800
 800374c:	40020400 	.word	0x40020400

08003750 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 8003750:	6803      	ldr	r3, [r0, #0]
 8003752:	4a11      	ldr	r2, [pc, #68]	; (8003798 <HAL_TIM_PWM_MspInit+0x48>)
 8003754:	4293      	cmp	r3, r2
{
 8003756:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM1)
 8003758:	d10d      	bne.n	8003776 <HAL_TIM_PWM_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */
//
  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	4b0f      	ldr	r3, [pc, #60]	; (800379c <HAL_TIM_PWM_MspInit+0x4c>)
 8003760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	645a      	str	r2, [r3, #68]	; 0x44
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */
//
  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003772:	b002      	add	sp, #8
 8003774:	4770      	bx	lr
  else if(tim_pwmHandle->Instance==TIM4)
 8003776:	4a0a      	ldr	r2, [pc, #40]	; (80037a0 <HAL_TIM_PWM_MspInit+0x50>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d1fa      	bne.n	8003772 <HAL_TIM_PWM_MspInit+0x22>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800377c:	2300      	movs	r3, #0
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_TIM_PWM_MspInit+0x4c>)
 8003782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003784:	f042 0204 	orr.w	r2, r2, #4
 8003788:	641a      	str	r2, [r3, #64]	; 0x40
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	9b01      	ldr	r3, [sp, #4]
}
 8003794:	e7ed      	b.n	8003772 <HAL_TIM_PWM_MspInit+0x22>
 8003796:	bf00      	nop
 8003798:	40010000 	.word	0x40010000
 800379c:	40023800 	.word	0x40023800
 80037a0:	40000800 	.word	0x40000800

080037a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 80037a6:	6803      	ldr	r3, [r0, #0]
 80037a8:	4a11      	ldr	r2, [pc, #68]	; (80037f0 <HAL_TIM_MspPostInit+0x4c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d111      	bne.n	80037d2 <HAL_TIM_MspPostInit+0x2e>
//
  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DRIVE_PWM_Pin;
 80037ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037b2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037b4:	2312      	movs	r3, #18
 80037b6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037bc:	2303      	movs	r3, #3
 80037be:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037c0:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = DRIVE_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(DRIVE_PWM_GPIO_Port, &GPIO_InitStruct);
 80037c2:	a901      	add	r1, sp, #4
 80037c4:	480b      	ldr	r0, [pc, #44]	; (80037f4 <HAL_TIM_MspPostInit+0x50>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037c6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DRIVE_PWM_GPIO_Port, &GPIO_InitStruct);
 80037c8:	f7fc ff76 	bl	80006b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */
//
  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80037cc:	b007      	add	sp, #28
 80037ce:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(timHandle->Instance==TIM4)
 80037d2:	4a09      	ldr	r2, [pc, #36]	; (80037f8 <HAL_TIM_MspPostInit+0x54>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d1f9      	bne.n	80037cc <HAL_TIM_MspPostInit+0x28>
    GPIO_InitStruct.Pin = DRIVE_PWM_Pin;
 80037d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037dc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037de:	2312      	movs	r3, #18
 80037e0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e6:	2303      	movs	r3, #3
 80037e8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037ea:	2302      	movs	r3, #2
 80037ec:	e7e9      	b.n	80037c2 <HAL_TIM_MspPostInit+0x1e>
 80037ee:	bf00      	nop
 80037f0:	40010000 	.word	0x40010000
 80037f4:	40020c00 	.word	0x40020c00
 80037f8:	40000800 	.word	0x40000800

080037fc <TIMER_Init>:
{
 80037fc:	b530      	push	{r4, r5, lr}
  htim.Instance = PWM_TIMER;
 80037fe:	4c2c      	ldr	r4, [pc, #176]	; (80038b0 <TIMER_Init+0xb4>)
  htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003800:	4a2c      	ldr	r2, [pc, #176]	; (80038b4 <TIMER_Init+0xb8>)
 8003802:	2500      	movs	r5, #0
{
 8003804:	b091      	sub	sp, #68	; 0x44
  htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003806:	2307      	movs	r3, #7
  if (HAL_TIM_PWM_Init(&htim) != HAL_OK)
 8003808:	4620      	mov	r0, r4
  htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800380a:	e884 002c 	stmia.w	r4, {r2, r3, r5}
  htim.Init.Period = 0;
 800380e:	60e5      	str	r5, [r4, #12]
  htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003810:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim) != HAL_OK)
 8003812:	f7fd ff53 	bl	80016bc <HAL_TIM_PWM_Init>
 8003816:	b118      	cbz	r0, 8003820 <TIMER_Init+0x24>
    _Error_Handler(__FILE__, __LINE__);
 8003818:	211f      	movs	r1, #31
 800381a:	4827      	ldr	r0, [pc, #156]	; (80038b8 <TIMER_Init+0xbc>)
 800381c:	f000 f9f3 	bl	8003c06 <_Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig) != HAL_OK)
 8003820:	4669      	mov	r1, sp
 8003822:	4823      	ldr	r0, [pc, #140]	; (80038b0 <TIMER_Init+0xb4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003824:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003826:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig) != HAL_OK)
 8003828:	f7fe f81a 	bl	8001860 <HAL_TIMEx_MasterConfigSynchronization>
 800382c:	b118      	cbz	r0, 8003836 <TIMER_Init+0x3a>
    _Error_Handler(__FILE__, __LINE__);
 800382e:	2126      	movs	r1, #38	; 0x26
 8003830:	4821      	ldr	r0, [pc, #132]	; (80038b8 <TIMER_Init+0xbc>)
 8003832:	f000 f9e8 	bl	8003c06 <_Error_Handler>
  if (htim.Instance == TIM1)
 8003836:	6821      	ldr	r1, [r4, #0]
 8003838:	4a20      	ldr	r2, [pc, #128]	; (80038bc <TIMER_Init+0xc0>)
  if (HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800383a:	481d      	ldr	r0, [pc, #116]	; (80038b0 <TIMER_Init+0xb4>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800383c:	2360      	movs	r3, #96	; 0x60
  if (htim.Instance == TIM1)
 800383e:	4291      	cmp	r1, r2
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003840:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003842:	f04f 0200 	mov.w	r2, #0
  sConfigOC.Pulse = 0;
 8003846:	f04f 0300 	mov.w	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800384a:	a902      	add	r1, sp, #8
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800384c:	bf02      	ittt	eq
 800384e:	9305      	streq	r3, [sp, #20]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003850:	9307      	streq	r3, [sp, #28]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003852:	9308      	streq	r3, [sp, #32]
  sConfigOC.Pulse = 0;
 8003854:	9303      	str	r3, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003856:	9304      	str	r3, [sp, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003858:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800385a:	f7fd ff79 	bl	8001750 <HAL_TIM_PWM_ConfigChannel>
 800385e:	b118      	cbz	r0, 8003868 <TIMER_Init+0x6c>
    _Error_Handler(__FILE__, __LINE__);
 8003860:	2137      	movs	r1, #55	; 0x37
 8003862:	4815      	ldr	r0, [pc, #84]	; (80038b8 <TIMER_Init+0xbc>)
 8003864:	f000 f9cf 	bl	8003c06 <_Error_Handler>
  if (htim.Instance == TIM1)
 8003868:	6822      	ldr	r2, [r4, #0]
 800386a:	4b14      	ldr	r3, [pc, #80]	; (80038bc <TIMER_Init+0xc0>)
 800386c:	429a      	cmp	r2, r3
 800386e:	d112      	bne.n	8003896 <TIMER_Init+0x9a>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003870:	2300      	movs	r3, #0
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim, &sBreakDeadTimeConfig) != HAL_OK)
 8003876:	a909      	add	r1, sp, #36	; 0x24
 8003878:	480d      	ldr	r0, [pc, #52]	; (80038b0 <TIMER_Init+0xb4>)
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800387a:	9309      	str	r3, [sp, #36]	; 0x24
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800387c:	930a      	str	r3, [sp, #40]	; 0x28
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800387e:	930b      	str	r3, [sp, #44]	; 0x2c
	sBreakDeadTimeConfig.DeadTime = 0;
 8003880:	930c      	str	r3, [sp, #48]	; 0x30
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003882:	930d      	str	r3, [sp, #52]	; 0x34
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003884:	920e      	str	r2, [sp, #56]	; 0x38
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003886:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim, &sBreakDeadTimeConfig) != HAL_OK)
 8003888:	f7fe f80c 	bl	80018a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800388c:	b118      	cbz	r0, 8003896 <TIMER_Init+0x9a>
	  _Error_Handler(__FILE__, __LINE__);
 800388e:	2145      	movs	r1, #69	; 0x45
 8003890:	4809      	ldr	r0, [pc, #36]	; (80038b8 <TIMER_Init+0xbc>)
 8003892:	f000 f9b8 	bl	8003c06 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim);
 8003896:	4806      	ldr	r0, [pc, #24]	; (80038b0 <TIMER_Init+0xb4>)
 8003898:	f7ff ff84 	bl	80037a4 <HAL_TIM_MspPostInit>
  HAL_TIM_Base_Start(&htim);
 800389c:	4804      	ldr	r0, [pc, #16]	; (80038b0 <TIMER_Init+0xb4>)
 800389e:	f7fd fdd0 	bl	8001442 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim,TIM_CHANNEL_1);
 80038a2:	2100      	movs	r1, #0
 80038a4:	4802      	ldr	r0, [pc, #8]	; (80038b0 <TIMER_Init+0xb4>)
 80038a6:	f7fd ffc1 	bl	800182c <HAL_TIM_PWM_Start>
}
 80038aa:	b011      	add	sp, #68	; 0x44
 80038ac:	bd30      	pop	{r4, r5, pc}
 80038ae:	bf00      	nop
 80038b0:	20003e54 	.word	0x20003e54
 80038b4:	40000800 	.word	0x40000800
 80038b8:	08003f13 	.word	0x08003f13
 80038bc:	40010000 	.word	0x40010000

080038c0 <StartDefaultTask>:
}


/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 80038c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uCAN_MSG tempmessage;

  for(;;)
  {
	  if(CANSPI_Receive(&tempmessage)){
		  xQueueSend(MeldingQueueHandle,&tempmessage,osWaitForever);
 80038c2:	4c07      	ldr	r4, [pc, #28]	; (80038e0 <StartDefaultTask+0x20>)
	  if(CANSPI_Receive(&tempmessage)){
 80038c4:	a801      	add	r0, sp, #4
 80038c6:	f7ff fd1d 	bl	8003304 <CANSPI_Receive>
 80038ca:	2800      	cmp	r0, #0
 80038cc:	d0fa      	beq.n	80038c4 <StartDefaultTask+0x4>
		  xQueueSend(MeldingQueueHandle,&tempmessage,osWaitForever);
 80038ce:	2300      	movs	r3, #0
 80038d0:	f04f 32ff 	mov.w	r2, #4294967295
 80038d4:	a901      	add	r1, sp, #4
 80038d6:	6820      	ldr	r0, [r4, #0]
 80038d8:	f7fe fbd6 	bl	8002088 <xQueueGenericSend>
 80038dc:	e7f2      	b.n	80038c4 <StartDefaultTask+0x4>
 80038de:	bf00      	nop
 80038e0:	20003ea4 	.word	0x20003ea4

080038e4 <StartTask03>:
  /* USER CODE END StartTask02 */
}

/* StartTask03 function */
void StartTask03(void const * argument)
{
 80038e4:	b507      	push	{r0, r1, r2, lr}
	uint16_t radius;
  /* Infinite loop */
  for(;;)

  {
	  if(xQueueReceive(AckerQueueHandle,&radius,osWaitForever)){
 80038e6:	4c05      	ldr	r4, [pc, #20]	; (80038fc <StartTask03+0x18>)
 80038e8:	6820      	ldr	r0, [r4, #0]
 80038ea:	2300      	movs	r3, #0
 80038ec:	f04f 32ff 	mov.w	r2, #4294967295
 80038f0:	f10d 0106 	add.w	r1, sp, #6
 80038f4:	f7fe fce0 	bl	80022b8 <xQueueGenericReceive>
 80038f8:	e7f6      	b.n	80038e8 <StartTask03+0x4>
 80038fa:	bf00      	nop
 80038fc:	20003ea8 	.word	0x20003ea8

08003900 <StartTask02>:
{
 8003900:	b507      	push	{r0, r1, r2, lr}
	uint16_t fart = 0;
 8003902:	ac02      	add	r4, sp, #8
 8003904:	2300      	movs	r3, #0
 8003906:	f824 3d02 	strh.w	r3, [r4, #-2]!
	if(xQueueReceive(FartQueueHandle,&fart,osWaitForever)){
 800390a:	4d07      	ldr	r5, [pc, #28]	; (8003928 <StartTask02+0x28>)
 800390c:	6828      	ldr	r0, [r5, #0]
 800390e:	2300      	movs	r3, #0
 8003910:	f04f 32ff 	mov.w	r2, #4294967295
 8003914:	4621      	mov	r1, r4
 8003916:	f7fe fccf 	bl	80022b8 <xQueueGenericReceive>
 800391a:	2800      	cmp	r0, #0
 800391c:	d0f6      	beq.n	800390c <StartTask02+0xc>
		PWM_Set_Frekvens(fart);
 800391e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003922:	f000 f971 	bl	8003c08 <PWM_Set_Frekvens>
 8003926:	e7f1      	b.n	800390c <StartTask02+0xc>
 8003928:	20003e98 	.word	0x20003e98

0800392c <StartTask04>:
  /* USER CODE END StartTask03 */
}

/* StartTask04 function */
void StartTask04(void const * argument)
{
 800392c:	b500      	push	{lr}
	uCAN_MSG temptxmessage;
	uint16_t fart;
	uint32_t radius;
  for(;;)
  {
	  if(xQueueReceive(MeldingQueueHandle,&tempRxMessage,osWaitForever)){
 800392e:	4d0f      	ldr	r5, [pc, #60]	; (800396c <StartTask04+0x40>)
		  fart = (tempRxMessage.frame.data0<<8)+tempRxMessage.frame.data1;
		  xQueueSend(FartQueueHandle,&fart,0);
 8003930:	4c0f      	ldr	r4, [pc, #60]	; (8003970 <StartTask04+0x44>)
{
 8003932:	b08d      	sub	sp, #52	; 0x34
	  if(xQueueReceive(MeldingQueueHandle,&tempRxMessage,osWaitForever)){
 8003934:	2300      	movs	r3, #0
 8003936:	f04f 32ff 	mov.w	r2, #4294967295
 800393a:	a902      	add	r1, sp, #8
 800393c:	6828      	ldr	r0, [r5, #0]
 800393e:	f7fe fcbb 	bl	80022b8 <xQueueGenericReceive>
 8003942:	2800      	cmp	r0, #0
 8003944:	d0f6      	beq.n	8003934 <StartTask04+0x8>
		  fart = (tempRxMessage.frame.data0<<8)+tempRxMessage.frame.data1;
 8003946:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800394a:	f89d 3012 	ldrb.w	r3, [sp, #18]
		  xQueueSend(FartQueueHandle,&fart,0);
 800394e:	6820      	ldr	r0, [r4, #0]
		  fart = (tempRxMessage.frame.data0<<8)+tempRxMessage.frame.data1;
 8003950:	a90c      	add	r1, sp, #48	; 0x30
 8003952:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003956:	f821 3d2a 	strh.w	r3, [r1, #-42]!
		  xQueueSend(FartQueueHandle,&fart,0);
 800395a:	2300      	movs	r3, #0
 800395c:	461a      	mov	r2, r3
 800395e:	f7fe fb93 	bl	8002088 <xQueueGenericSend>
		  CANSPI_Transmit(&temptxmessage);
 8003962:	a807      	add	r0, sp, #28
 8003964:	f7ff fc8c 	bl	8003280 <CANSPI_Transmit>
 8003968:	e7e4      	b.n	8003934 <StartTask04+0x8>
 800396a:	bf00      	nop
 800396c:	20003ea4 	.word	0x20003ea4
 8003970:	20003e98 	.word	0x20003e98

08003974 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8003974:	b570      	push	{r4, r5, r6, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003976:	4c25      	ldr	r4, [pc, #148]	; (8003a0c <MX_FREERTOS_Init+0x98>)
 8003978:	4626      	mov	r6, r4
 800397a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 800397c:	b094      	sub	sp, #80	; 0x50
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800397e:	466d      	mov	r5, sp
 8003980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003982:	6833      	ldr	r3, [r6, #0]
 8003984:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003986:	2100      	movs	r1, #0
 8003988:	4668      	mov	r0, sp
 800398a:	f7fd ffb8 	bl	80018fe <osThreadCreate>
 800398e:	4b20      	ldr	r3, [pc, #128]	; (8003a10 <MX_FREERTOS_Init+0x9c>)
  osThreadDef(SettFartTask, StartTask02, osPriorityNormal, 0, 128);
 8003990:	f104 0614 	add.w	r6, r4, #20
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003994:	6018      	str	r0, [r3, #0]
  osThreadDef(SettFartTask, StartTask02, osPriorityNormal, 0, 128);
 8003996:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003998:	ad05      	add	r5, sp, #20
 800399a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800399c:	6833      	ldr	r3, [r6, #0]
 800399e:	602b      	str	r3, [r5, #0]
  SettFartTaskHandle = osThreadCreate(osThread(SettFartTask), NULL);
 80039a0:	2100      	movs	r1, #0
 80039a2:	a805      	add	r0, sp, #20
 80039a4:	f7fd ffab 	bl	80018fe <osThreadCreate>
 80039a8:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <MX_FREERTOS_Init+0xa0>)
  osThreadDef(AckermannTask, StartTask03, osPriorityNormal, 0, 128);
 80039aa:	f104 0628 	add.w	r6, r4, #40	; 0x28
  SettFartTaskHandle = osThreadCreate(osThread(SettFartTask), NULL);
 80039ae:	6018      	str	r0, [r3, #0]
  osThreadDef(AckermannTask, StartTask03, osPriorityNormal, 0, 128);
 80039b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80039b2:	ad0a      	add	r5, sp, #40	; 0x28
 80039b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039b6:	6833      	ldr	r3, [r6, #0]
 80039b8:	602b      	str	r3, [r5, #0]
  AckermannTaskHandle = osThreadCreate(osThread(AckermannTask), NULL);
 80039ba:	2100      	movs	r1, #0
 80039bc:	a80a      	add	r0, sp, #40	; 0x28
 80039be:	f7fd ff9e 	bl	80018fe <osThreadCreate>
 80039c2:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <MX_FREERTOS_Init+0xa4>)
  osThreadDef(CANbehandling, StartTask04, osPriorityRealtime, 0, 128);
 80039c4:	343c      	adds	r4, #60	; 0x3c
  AckermannTaskHandle = osThreadCreate(osThread(AckermannTask), NULL);
 80039c6:	6018      	str	r0, [r3, #0]
  osThreadDef(CANbehandling, StartTask04, osPriorityRealtime, 0, 128);
 80039c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ca:	ad0f      	add	r5, sp, #60	; 0x3c
 80039cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	602b      	str	r3, [r5, #0]
  CANbehandlingHandle = osThreadCreate(osThread(CANbehandling), NULL);
 80039d2:	2100      	movs	r1, #0
 80039d4:	a80f      	add	r0, sp, #60	; 0x3c
 80039d6:	f7fd ff92 	bl	80018fe <osThreadCreate>
 80039da:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <MX_FREERTOS_Init+0xa8>)
  MeldingQueueHandle = xQueueCreate(16,sizeof(uCAN_MSG));
 80039dc:	2200      	movs	r2, #0
  CANbehandlingHandle = osThreadCreate(osThread(CANbehandling), NULL);
 80039de:	6018      	str	r0, [r3, #0]
  MeldingQueueHandle = xQueueCreate(16,sizeof(uCAN_MSG));
 80039e0:	2114      	movs	r1, #20
 80039e2:	2010      	movs	r0, #16
 80039e4:	f7fe fb2e 	bl	8002044 <xQueueGenericCreate>
 80039e8:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <MX_FREERTOS_Init+0xac>)
  FartQueueHandle = xQueueCreate(16,sizeof(uint16_t));
 80039ea:	2200      	movs	r2, #0
  MeldingQueueHandle = xQueueCreate(16,sizeof(uCAN_MSG));
 80039ec:	6018      	str	r0, [r3, #0]
  FartQueueHandle = xQueueCreate(16,sizeof(uint16_t));
 80039ee:	2102      	movs	r1, #2
 80039f0:	2010      	movs	r0, #16
 80039f2:	f7fe fb27 	bl	8002044 <xQueueGenericCreate>
 80039f6:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <MX_FREERTOS_Init+0xb0>)
  AckerQueueHandle = xQueueCreate(16,sizeof(uint32_t));
 80039f8:	2200      	movs	r2, #0
  FartQueueHandle = xQueueCreate(16,sizeof(uint16_t));
 80039fa:	6018      	str	r0, [r3, #0]
  AckerQueueHandle = xQueueCreate(16,sizeof(uint32_t));
 80039fc:	2104      	movs	r1, #4
 80039fe:	2010      	movs	r0, #16
 8003a00:	f7fe fb20 	bl	8002044 <xQueueGenericCreate>
 8003a04:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <MX_FREERTOS_Init+0xb4>)
 8003a06:	6018      	str	r0, [r3, #0]
}
 8003a08:	b014      	add	sp, #80	; 0x50
 8003a0a:	bd70      	pop	{r4, r5, r6, pc}
 8003a0c:	08003e9c 	.word	0x08003e9c
 8003a10:	20003e90 	.word	0x20003e90
 8003a14:	20003ea0 	.word	0x20003ea0
 8003a18:	20003e9c 	.word	0x20003e9c
 8003a1c:	20003e94 	.word	0x20003e94
 8003a20:	20003ea4 	.word	0x20003ea4
 8003a24:	20003e98 	.word	0x20003e98
 8003a28:	20003ea8 	.word	0x20003ea8

08003a2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a2e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a30:	4b38      	ldr	r3, [pc, #224]	; (8003b14 <MX_GPIO_Init+0xe8>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRIVE_EN_GPIO_Port, DRIVE_EN_Pin, GPIO_PIN_RESET);
 8003a32:	4e39      	ldr	r6, [pc, #228]	; (8003b18 <MX_GPIO_Init+0xec>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8003a34:	4d39      	ldr	r5, [pc, #228]	; (8003b1c <MX_GPIO_Init+0xf0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a36:	2400      	movs	r4, #0
 8003a38:	9400      	str	r4, [sp, #0]
 8003a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30
 8003a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a44:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003a48:	9200      	str	r2, [sp, #0]
 8003a4a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4c:	9401      	str	r4, [sp, #4]
 8003a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a50:	f042 0201 	orr.w	r2, r2, #1
 8003a54:	631a      	str	r2, [r3, #48]	; 0x30
 8003a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a58:	f002 0201 	and.w	r2, r2, #1
 8003a5c:	9201      	str	r2, [sp, #4]
 8003a5e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a60:	9402      	str	r4, [sp, #8]
 8003a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a64:	f042 0210 	orr.w	r2, r2, #16
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
 8003a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a6c:	f002 0210 	and.w	r2, r2, #16
 8003a70:	9202      	str	r2, [sp, #8]
 8003a72:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a74:	9403      	str	r4, [sp, #12]
 8003a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a78:	f042 0208 	orr.w	r2, r2, #8
 8003a7c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a80:	f002 0208 	and.w	r2, r2, #8
 8003a84:	9203      	str	r2, [sp, #12]
 8003a86:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a88:	9404      	str	r4, [sp, #16]
 8003a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a8c:	f042 0204 	orr.w	r2, r2, #4
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(DRIVE_EN_GPIO_Port, DRIVE_EN_Pin, GPIO_PIN_RESET);
 8003a9a:	4622      	mov	r2, r4
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	2108      	movs	r1, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aa0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(DRIVE_EN_GPIO_Port, DRIVE_EN_Pin, GPIO_PIN_RESET);
 8003aa2:	f7fc fee9 	bl	8000878 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003aae:	f7fc fee3 	bl	8000878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRIVE_DIR_GPIO_Port, DRIVE_DIR_Pin, GPIO_PIN_RESET);
 8003ab2:	4622      	mov	r2, r4
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003aba:	f7fc fedd 	bl	8000878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRIVE_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003abe:	2711      	movs	r7, #17
  GPIO_InitStruct.Pin = DRIVE_EN_Pin;
 8003ac0:	2308      	movs	r3, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DRIVE_EN_GPIO_Port, &GPIO_InitStruct);
 8003ac2:	a905      	add	r1, sp, #20
 8003ac4:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = DRIVE_EN_Pin;
 8003ac6:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ac8:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003aca:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ace:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(DRIVE_EN_GPIO_Port, &GPIO_InitStruct);
 8003ad0:	f7fc fdf2 	bl	80006b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8003ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8003ad8:	a905      	add	r1, sp, #20
 8003ada:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8003adc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ade:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003ae2:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8003ae4:	f7fc fde8 	bl	80006b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_INT_Pin;
 8003ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aec:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 8003aee:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <MX_GPIO_Init+0xf4>)
 8003af2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 8003af4:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 8003af8:	f7fc fdde 	bl	80006b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRIVE_DIR_Pin;
 8003afc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(DRIVE_DIR_GPIO_Port, &GPIO_InitStruct);
 8003b00:	a905      	add	r1, sp, #20
 8003b02:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = DRIVE_DIR_Pin;
 8003b04:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003b06:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003b0a:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(DRIVE_DIR_GPIO_Port, &GPIO_InitStruct);
 8003b0c:	f7fc fdd4 	bl	80006b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 8003b10:	b00b      	add	sp, #44	; 0x2c
 8003b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40020000 	.word	0x40020000
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	10210000 	.word	0x10210000

08003b24 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003b24:	b570      	push	{r4, r5, r6, lr}
 8003b26:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b28:	4b28      	ldr	r3, [pc, #160]	; (8003bcc <SystemClock_Config+0xa8>)
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	9101      	str	r1, [sp, #4]
 8003b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b40:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <SystemClock_Config+0xac>)
 8003b42:	9102      	str	r1, [sp, #8]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b52:	9302      	str	r3, [sp, #8]
 8003b54:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b56:	2301      	movs	r3, #1
 8003b58:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b5e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b64:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003b66:	2319      	movs	r3, #25
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b68:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003b6a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003b6c:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003b6e:	f44f 73a8 	mov.w	r3, #336	; 0x150
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b72:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b74:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003b76:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b78:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003b7a:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b7c:	f7fc fe8e 	bl	800089c <HAL_RCC_OscConfig>
 8003b80:	b100      	cbz	r0, 8003b84 <SystemClock_Config+0x60>
 8003b82:	e7fe      	b.n	8003b82 <SystemClock_Config+0x5e>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b88:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b8a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b8c:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003b92:	2105      	movs	r1, #5
 8003b94:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b96:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b98:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b9a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003b9c:	f7fd f822 	bl	8000be4 <HAL_RCC_ClockConfig>
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	b100      	cbz	r0, 8003ba6 <SystemClock_Config+0x82>
 8003ba4:	e7fe      	b.n	8003ba4 <SystemClock_Config+0x80>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003ba6:	f7fd f8b7 	bl	8000d18 <HAL_RCC_GetHCLKFreq>
 8003baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bae:	fbb0 f0f3 	udiv	r0, r0, r3
 8003bb2:	f7fc fd5f 	bl	8000674 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	f7fc fd72 	bl	80006a0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003bbc:	4622      	mov	r2, r4
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc4:	f7fc fd16 	bl	80005f4 <HAL_NVIC_SetPriority>
}
 8003bc8:	b014      	add	sp, #80	; 0x50
 8003bca:	bd70      	pop	{r4, r5, r6, pc}
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40007000 	.word	0x40007000

08003bd4 <main>:
{
 8003bd4:	b508      	push	{r3, lr}
  HAL_Init();
 8003bd6:	f7fc fcd3 	bl	8000580 <HAL_Init>
  SystemClock_Config();
 8003bda:	f7ff ffa3 	bl	8003b24 <SystemClock_Config>
  MX_GPIO_Init();
 8003bde:	f7ff ff25 	bl	8003a2c <MX_GPIO_Init>
  SPI_CAN_Init();
 8003be2:	f7ff fd39 	bl	8003658 <SPI_CAN_Init>
  TIMER_Init();
 8003be6:	f7ff fe09 	bl	80037fc <TIMER_Init>
  CANSPI_Initialize();
 8003bea:	f7ff fab5 	bl	8003158 <CANSPI_Initialize>
  MX_FREERTOS_Init();
 8003bee:	f7ff fec1 	bl	8003974 <MX_FREERTOS_Init>
  osKernelStart();
 8003bf2:	f7fd fe7f 	bl	80018f4 <osKernelStart>
 8003bf6:	e7fe      	b.n	8003bf6 <main+0x22>

08003bf8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8003bf8:	6803      	ldr	r3, [r0, #0]
 8003bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfe:	d101      	bne.n	8003c04 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003c00:	f7fc bcd8 	b.w	80005b4 <HAL_IncTick>
 8003c04:	4770      	bx	lr

08003c06 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8003c06:	e7fe      	b.n	8003c06 <_Error_Handler>

08003c08 <PWM_Set_Frekvens>:





void PWM_Set_Frekvens(uint16_t tempfart){
 8003c08:	b508      	push	{r3, lr}
//	}
//	else{
//		MOTOR_BAK();
//	}

	if(tempfart >= 1){
 8003c0a:	b1c0      	cbz	r0, 8003c3e <PWM_Set_Frekvens+0x36>

		tempfart = 10500000000 / (tempfart*5826); //*128
 8003c0c:	f241 62c2 	movw	r2, #5826	; 0x16c2
 8003c10:	4342      	muls	r2, r0
 8003c12:	17d3      	asrs	r3, r2, #31
 8003c14:	a10f      	add	r1, pc, #60	; (adr r1, 8003c54 <PWM_Set_Frekvens+0x4c>)
 8003c16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c1a:	f7fc fad9 	bl	80001d0 <__aeabi_ldivmod>
 8003c1e:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 8003c22:	b280      	uxth	r0, r0
 8003c24:	4298      	cmp	r0, r3
 8003c26:	bf28      	it	cs
 8003c28:	4618      	movcs	r0, r3
 8003c2a:	2837      	cmp	r0, #55	; 0x37
		if (tempfart <=55){tempfart = 55;}
		if (tempfart >= 65000){tempfart = 65000;}

		PWM_TIMER->ARR = tempfart;
 8003c2c:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <PWM_Set_Frekvens+0x48>)
 8003c2e:	bf38      	it	cc
 8003c30:	2037      	movcc	r0, #55	; 0x37
 8003c32:	62d8      	str	r0, [r3, #44]	; 0x2c
		PWM_TIMER->CCR1 = (tempfart/2);
 8003c34:	0840      	lsrs	r0, r0, #1
 8003c36:	6358      	str	r0, [r3, #52]	; 0x34
	}else{
//		HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_1);
//		MOTOR_DISABLE()
		PWM_TIMER->ARR = 10000;
		PWM_TIMER->CCR1 = 10000;
		PWM_TIMER->CR1 = 0x81;
 8003c38:	2281      	movs	r2, #129	; 0x81
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	bd08      	pop	{r3, pc}
		PWM_TIMER->ARR = 10000;
 8003c3e:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <PWM_Set_Frekvens+0x48>)
 8003c40:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c44:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_TIMER->CCR1 = 10000;
 8003c46:	635a      	str	r2, [r3, #52]	; 0x34
 8003c48:	e7f6      	b.n	8003c38 <PWM_Set_Frekvens+0x30>
 8003c4a:	bf00      	nop
 8003c4c:	f3af 8000 	nop.w
 8003c50:	40000800 	.word	0x40000800
 8003c54:	71d94900 	.word	0x71d94900
 8003c58:	00000002 	.word	0x00000002

08003c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c5e:	2003      	movs	r0, #3
 8003c60:	f7fc fcb6 	bl	80005d0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003c64:	2200      	movs	r2, #0
 8003c66:	4611      	mov	r1, r2
 8003c68:	f06f 000b 	mvn.w	r0, #11
 8003c6c:	f7fc fcc2 	bl	80005f4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003c70:	2200      	movs	r2, #0
 8003c72:	4611      	mov	r1, r2
 8003c74:	f06f 000a 	mvn.w	r0, #10
 8003c78:	f7fc fcbc 	bl	80005f4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	4611      	mov	r1, r2
 8003c80:	f06f 0009 	mvn.w	r0, #9
 8003c84:	f7fc fcb6 	bl	80005f4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003c88:	2200      	movs	r2, #0
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	f06f 0004 	mvn.w	r0, #4
 8003c90:	f7fc fcb0 	bl	80005f4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003c94:	2200      	movs	r2, #0
 8003c96:	4611      	mov	r1, r2
 8003c98:	f06f 0003 	mvn.w	r0, #3
 8003c9c:	f7fc fcaa 	bl	80005f4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	210f      	movs	r1, #15
 8003ca4:	f06f 0001 	mvn.w	r0, #1
 8003ca8:	f7fc fca4 	bl	80005f4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003cac:	2200      	movs	r2, #0
 8003cae:	210f      	movs	r1, #15
 8003cb0:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003cb8:	f7fc bc9c 	b.w	80005f4 <HAL_NVIC_SetPriority>

08003cbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cbc:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8003cbe:	4601      	mov	r1, r0
{
 8003cc0:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	201c      	movs	r0, #28
 8003cc6:	f7fc fc95 	bl	80005f4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8003cca:	201c      	movs	r0, #28
 8003ccc:	f7fc fcc6 	bl	800065c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003cd0:	2500      	movs	r5, #0
 8003cd2:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <HAL_InitTick+0x6c>)
 8003cd4:	9502      	str	r5, [sp, #8]
 8003cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003cd8:	4c14      	ldr	r4, [pc, #80]	; (8003d2c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ce8:	a901      	add	r1, sp, #4
 8003cea:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003cec:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003cee:	f7fd f829 	bl	8000d44 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003cf2:	f7fd f817 	bl	8000d24 <HAL_RCC_GetPCLK1Freq>
  htim2.Instance = TIM2;
 8003cf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cfa:	6023      	str	r3, [r4, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8003cfc:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003d00:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003d02:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003d04:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <HAL_InitTick+0x74>)
 8003d06:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d0a:	3801      	subs	r0, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8003d0c:	6060      	str	r0, [r4, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8003d0e:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = 0;
 8003d10:	6125      	str	r5, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d12:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8003d14:	f7fd fcb8 	bl	8001688 <HAL_TIM_Base_Init>
 8003d18:	b920      	cbnz	r0, 8003d24 <HAL_InitTick+0x68>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	f7fd fb9e 	bl	800145c <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8003d20:	b009      	add	sp, #36	; 0x24
 8003d22:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8003d24:	2001      	movs	r0, #1
 8003d26:	e7fb      	b.n	8003d20 <HAL_InitTick+0x64>
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	20003eac 	.word	0x20003eac
 8003d30:	000f4240 	.word	0x000f4240

08003d34 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8003d34:	f7fd bdfb 	b.w	800192e <osSystickHandler>

08003d38 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d38:	4801      	ldr	r0, [pc, #4]	; (8003d40 <TIM2_IRQHandler+0x8>)
 8003d3a:	f7fd bb9e 	b.w	800147a <HAL_TIM_IRQHandler>
 8003d3e:	bf00      	nop
 8003d40:	20003eac 	.word	0x20003eac

08003d44 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8003d44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	uCAN_MSG tempmsg;
	if(CANSPI_Receive(&tempmsg)){
 8003d46:	a801      	add	r0, sp, #4
 8003d48:	f7ff fadc 	bl	8003304 <CANSPI_Receive>
 8003d4c:	b130      	cbz	r0, 8003d5c <EXTI15_10_IRQHandler+0x18>
		xQueueSend(MeldingQueueHandle,&tempmsg,0);
 8003d4e:	480b      	ldr	r0, [pc, #44]	; (8003d7c <EXTI15_10_IRQHandler+0x38>)
 8003d50:	2300      	movs	r3, #0
 8003d52:	461a      	mov	r2, r3
 8003d54:	a901      	add	r1, sp, #4
 8003d56:	6800      	ldr	r0, [r0, #0]
 8003d58:	f7fe f996 	bl	8002088 <xQueueGenericSend>
////		}
	// }


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003d5c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003d60:	f7fc fd90 	bl	8000884 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  portEND_SWITCHING_ISR(pdTRUE);
 8003d64:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <EXTI15_10_IRQHandler+0x3c>)
 8003d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	f3bf 8f6f 	isb	sy
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d74:	b007      	add	sp, #28
 8003d76:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d7a:	bf00      	nop
 8003d7c:	20003ea4 	.word	0x20003ea4
 8003d80:	e000ed04 	.word	0xe000ed04

08003d84 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d84:	490f      	ldr	r1, [pc, #60]	; (8003dc4 <SystemInit+0x40>)
 8003d86:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003d8a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003d92:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <SystemInit+0x44>)
 8003d94:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d96:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003d98:	f042 0201 	orr.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003d9e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003da6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003daa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003dac:	4a07      	ldr	r2, [pc, #28]	; (8003dcc <SystemInit+0x48>)
 8003dae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003db6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003db8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003dba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dbe:	608b      	str	r3, [r1, #8]
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	e000ed00 	.word	0xe000ed00
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	24003010 	.word	0x24003010

08003dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003dd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003dd6:	e003      	b.n	8003de0 <LoopCopyDataInit>

08003dd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003dda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ddc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003dde:	3104      	adds	r1, #4

08003de0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003de0:	480b      	ldr	r0, [pc, #44]	; (8003e10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003de2:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003de4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003de6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003de8:	d3f6      	bcc.n	8003dd8 <CopyDataInit>
  ldr  r2, =_sbss
 8003dea:	4a0b      	ldr	r2, [pc, #44]	; (8003e18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003dec:	e002      	b.n	8003df4 <LoopFillZerobss>

08003dee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003dee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003df0:	f842 3b04 	str.w	r3, [r2], #4

08003df4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003df4:	4b09      	ldr	r3, [pc, #36]	; (8003e1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003df6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003df8:	d3f9      	bcc.n	8003dee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003dfa:	f7ff ffc3 	bl	8003d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dfe:	f000 f811 	bl	8003e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e02:	f7ff fee7 	bl	8003bd4 <main>
  bx  lr    
 8003e06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003e08:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003e0c:	08003f88 	.word	0x08003f88
  ldr  r0, =_sdata
 8003e10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e14:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8003e18:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8003e1c:	20003ee8 	.word	0x20003ee8

08003e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e20:	e7fe      	b.n	8003e20 <ADC_IRQHandler>
	...

08003e24 <__libc_init_array>:
 8003e24:	b570      	push	{r4, r5, r6, lr}
 8003e26:	4e0d      	ldr	r6, [pc, #52]	; (8003e5c <__libc_init_array+0x38>)
 8003e28:	4c0d      	ldr	r4, [pc, #52]	; (8003e60 <__libc_init_array+0x3c>)
 8003e2a:	1ba4      	subs	r4, r4, r6
 8003e2c:	10a4      	asrs	r4, r4, #2
 8003e2e:	2500      	movs	r5, #0
 8003e30:	42a5      	cmp	r5, r4
 8003e32:	d109      	bne.n	8003e48 <__libc_init_array+0x24>
 8003e34:	4e0b      	ldr	r6, [pc, #44]	; (8003e64 <__libc_init_array+0x40>)
 8003e36:	4c0c      	ldr	r4, [pc, #48]	; (8003e68 <__libc_init_array+0x44>)
 8003e38:	f000 f824 	bl	8003e84 <_init>
 8003e3c:	1ba4      	subs	r4, r4, r6
 8003e3e:	10a4      	asrs	r4, r4, #2
 8003e40:	2500      	movs	r5, #0
 8003e42:	42a5      	cmp	r5, r4
 8003e44:	d105      	bne.n	8003e52 <__libc_init_array+0x2e>
 8003e46:	bd70      	pop	{r4, r5, r6, pc}
 8003e48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e4c:	4798      	blx	r3
 8003e4e:	3501      	adds	r5, #1
 8003e50:	e7ee      	b.n	8003e30 <__libc_init_array+0xc>
 8003e52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e56:	4798      	blx	r3
 8003e58:	3501      	adds	r5, #1
 8003e5a:	e7f2      	b.n	8003e42 <__libc_init_array+0x1e>
 8003e5c:	08003f80 	.word	0x08003f80
 8003e60:	08003f80 	.word	0x08003f80
 8003e64:	08003f80 	.word	0x08003f80
 8003e68:	08003f84 	.word	0x08003f84

08003e6c <memcpy>:
 8003e6c:	b510      	push	{r4, lr}
 8003e6e:	1e43      	subs	r3, r0, #1
 8003e70:	440a      	add	r2, r1
 8003e72:	4291      	cmp	r1, r2
 8003e74:	d100      	bne.n	8003e78 <memcpy+0xc>
 8003e76:	bd10      	pop	{r4, pc}
 8003e78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e80:	e7f7      	b.n	8003e72 <memcpy+0x6>
	...

08003e84 <_init>:
 8003e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e86:	bf00      	nop
 8003e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8a:	bc08      	pop	{r3}
 8003e8c:	469e      	mov	lr, r3
 8003e8e:	4770      	bx	lr

08003e90 <_fini>:
 8003e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e92:	bf00      	nop
 8003e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e96:	bc08      	pop	{r3}
 8003e98:	469e      	mov	lr, r3
 8003e9a:	4770      	bx	lr
