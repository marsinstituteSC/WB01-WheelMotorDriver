
WheelMotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021f0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002378  08002378  00012378  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002388  08002388  00012388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002390  08002390  00012390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002394  08002394  00012394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08002398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  8 .bss          000000ec  20000004  20000004  00020004  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000f0  200000f0  00020004  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 11 .debug_info   00015034  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000027dc  00000000  00000000  00035068  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006470  00000000  00000000  00037844  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000920  00000000  00000000  0003dcb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b38  00000000  00000000  0003e5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005015  00000000  00000000  0003f110  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003cd8  00000000  00000000  00044125  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00047dfd  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001b94  00000000  00000000  00047e7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002360 	.word	0x08002360

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002360 	.word	0x08002360

080001c8 <__aeabi_ldivmod>:
 80001c8:	b97b      	cbnz	r3, 80001ea <__aeabi_ldivmod+0x22>
 80001ca:	b972      	cbnz	r2, 80001ea <__aeabi_ldivmod+0x22>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bfbe      	ittt	lt
 80001d0:	2000      	movlt	r0, #0
 80001d2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001d6:	e006      	blt.n	80001e6 <__aeabi_ldivmod+0x1e>
 80001d8:	bf08      	it	eq
 80001da:	2800      	cmpeq	r0, #0
 80001dc:	bf1c      	itt	ne
 80001de:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001e2:	f04f 30ff 	movne.w	r0, #4294967295
 80001e6:	f000 b9c5 	b.w	8000574 <__aeabi_idiv0>
 80001ea:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f2:	2900      	cmp	r1, #0
 80001f4:	db09      	blt.n	800020a <__aeabi_ldivmod+0x42>
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db1a      	blt.n	8000230 <__aeabi_ldivmod+0x68>
 80001fa:	f000 f84d 	bl	8000298 <__udivmoddi4>
 80001fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000206:	b004      	add	sp, #16
 8000208:	4770      	bx	lr
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	db1b      	blt.n	800024c <__aeabi_ldivmod+0x84>
 8000214:	f000 f840 	bl	8000298 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4240      	negs	r0, r0
 8000224:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000228:	4252      	negs	r2, r2
 800022a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800022e:	4770      	bx	lr
 8000230:	4252      	negs	r2, r2
 8000232:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000236:	f000 f82f 	bl	8000298 <__udivmoddi4>
 800023a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000242:	b004      	add	sp, #16
 8000244:	4240      	negs	r0, r0
 8000246:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024a:	4770      	bx	lr
 800024c:	4252      	negs	r2, r2
 800024e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000252:	f000 f821 	bl	8000298 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4252      	negs	r2, r2
 8000262:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000266:	4770      	bx	lr

08000268 <__aeabi_uldivmod>:
 8000268:	b953      	cbnz	r3, 8000280 <__aeabi_uldivmod+0x18>
 800026a:	b94a      	cbnz	r2, 8000280 <__aeabi_uldivmod+0x18>
 800026c:	2900      	cmp	r1, #0
 800026e:	bf08      	it	eq
 8000270:	2800      	cmpeq	r0, #0
 8000272:	bf1c      	itt	ne
 8000274:	f04f 31ff 	movne.w	r1, #4294967295
 8000278:	f04f 30ff 	movne.w	r0, #4294967295
 800027c:	f000 b97a 	b.w	8000574 <__aeabi_idiv0>
 8000280:	f1ad 0c08 	sub.w	ip, sp, #8
 8000284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000288:	f000 f806 	bl	8000298 <__udivmoddi4>
 800028c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000294:	b004      	add	sp, #16
 8000296:	4770      	bx	lr

08000298 <__udivmoddi4>:
 8000298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800029c:	468c      	mov	ip, r1
 800029e:	460d      	mov	r5, r1
 80002a0:	4604      	mov	r4, r0
 80002a2:	9e08      	ldr	r6, [sp, #32]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d151      	bne.n	800034c <__udivmoddi4+0xb4>
 80002a8:	428a      	cmp	r2, r1
 80002aa:	4617      	mov	r7, r2
 80002ac:	d96d      	bls.n	800038a <__udivmoddi4+0xf2>
 80002ae:	fab2 fe82 	clz	lr, r2
 80002b2:	f1be 0f00 	cmp.w	lr, #0
 80002b6:	d00b      	beq.n	80002d0 <__udivmoddi4+0x38>
 80002b8:	f1ce 0c20 	rsb	ip, lr, #32
 80002bc:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002c4:	fa02 f70e 	lsl.w	r7, r2, lr
 80002c8:	ea4c 0c05 	orr.w	ip, ip, r5
 80002cc:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002d4:	0c25      	lsrs	r5, r4, #16
 80002d6:	fbbc f8fa 	udiv	r8, ip, sl
 80002da:	fa1f f987 	uxth.w	r9, r7
 80002de:	fb0a cc18 	mls	ip, sl, r8, ip
 80002e2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002e6:	fb08 f309 	mul.w	r3, r8, r9
 80002ea:	42ab      	cmp	r3, r5
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x6c>
 80002ee:	19ed      	adds	r5, r5, r7
 80002f0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002f4:	f080 8123 	bcs.w	800053e <__udivmoddi4+0x2a6>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	f240 8120 	bls.w	800053e <__udivmoddi4+0x2a6>
 80002fe:	f1a8 0802 	sub.w	r8, r8, #2
 8000302:	443d      	add	r5, r7
 8000304:	1aed      	subs	r5, r5, r3
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb5 f0fa 	udiv	r0, r5, sl
 800030c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000310:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000314:	fb00 f909 	mul.w	r9, r0, r9
 8000318:	45a1      	cmp	r9, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x98>
 800031c:	19e4      	adds	r4, r4, r7
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	f080 810a 	bcs.w	800053a <__udivmoddi4+0x2a2>
 8000326:	45a1      	cmp	r9, r4
 8000328:	f240 8107 	bls.w	800053a <__udivmoddi4+0x2a2>
 800032c:	3802      	subs	r0, #2
 800032e:	443c      	add	r4, r7
 8000330:	eba4 0409 	sub.w	r4, r4, r9
 8000334:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000338:	2100      	movs	r1, #0
 800033a:	2e00      	cmp	r6, #0
 800033c:	d061      	beq.n	8000402 <__udivmoddi4+0x16a>
 800033e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000342:	2300      	movs	r3, #0
 8000344:	6034      	str	r4, [r6, #0]
 8000346:	6073      	str	r3, [r6, #4]
 8000348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034c:	428b      	cmp	r3, r1
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0xc8>
 8000350:	2e00      	cmp	r6, #0
 8000352:	d054      	beq.n	80003fe <__udivmoddi4+0x166>
 8000354:	2100      	movs	r1, #0
 8000356:	e886 0021 	stmia.w	r6, {r0, r5}
 800035a:	4608      	mov	r0, r1
 800035c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	f040 808e 	bne.w	8000486 <__udivmoddi4+0x1ee>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xdc>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80fa 	bhi.w	8000568 <__udivmoddi4+0x2d0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb65 0503 	sbc.w	r5, r5, r3
 800037a:	2001      	movs	r0, #1
 800037c:	46ac      	mov	ip, r5
 800037e:	2e00      	cmp	r6, #0
 8000380:	d03f      	beq.n	8000402 <__udivmoddi4+0x16a>
 8000382:	e886 1010 	stmia.w	r6, {r4, ip}
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	b912      	cbnz	r2, 8000392 <__udivmoddi4+0xfa>
 800038c:	2701      	movs	r7, #1
 800038e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000392:	fab7 fe87 	clz	lr, r7
 8000396:	f1be 0f00 	cmp.w	lr, #0
 800039a:	d134      	bne.n	8000406 <__udivmoddi4+0x16e>
 800039c:	1beb      	subs	r3, r5, r7
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa1f fc87 	uxth.w	ip, r7
 80003a4:	2101      	movs	r1, #1
 80003a6:	fbb3 f8f2 	udiv	r8, r3, r2
 80003aa:	0c25      	lsrs	r5, r4, #16
 80003ac:	fb02 3318 	mls	r3, r2, r8, r3
 80003b0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003b4:	fb0c f308 	mul.w	r3, ip, r8
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x134>
 80003bc:	19ed      	adds	r5, r5, r7
 80003be:	f108 30ff 	add.w	r0, r8, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x132>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	f200 80d1 	bhi.w	800056c <__udivmoddi4+0x2d4>
 80003ca:	4680      	mov	r8, r0
 80003cc:	1aed      	subs	r5, r5, r3
 80003ce:	b2a3      	uxth	r3, r4
 80003d0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003d4:	fb02 5510 	mls	r5, r2, r0, r5
 80003d8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003dc:	fb0c fc00 	mul.w	ip, ip, r0
 80003e0:	45a4      	cmp	ip, r4
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x15c>
 80003e4:	19e4      	adds	r4, r4, r7
 80003e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x15a>
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	f200 80b8 	bhi.w	8000562 <__udivmoddi4+0x2ca>
 80003f2:	4618      	mov	r0, r3
 80003f4:	eba4 040c 	sub.w	r4, r4, ip
 80003f8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fc:	e79d      	b.n	800033a <__udivmoddi4+0xa2>
 80003fe:	4631      	mov	r1, r6
 8000400:	4630      	mov	r0, r6
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	f1ce 0420 	rsb	r4, lr, #32
 800040a:	fa05 f30e 	lsl.w	r3, r5, lr
 800040e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000412:	fa20 f804 	lsr.w	r8, r0, r4
 8000416:	0c3a      	lsrs	r2, r7, #16
 8000418:	fa25 f404 	lsr.w	r4, r5, r4
 800041c:	ea48 0803 	orr.w	r8, r8, r3
 8000420:	fbb4 f1f2 	udiv	r1, r4, r2
 8000424:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000428:	fb02 4411 	mls	r4, r2, r1, r4
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000434:	fb01 f30c 	mul.w	r3, r1, ip
 8000438:	42ab      	cmp	r3, r5
 800043a:	fa00 f40e 	lsl.w	r4, r0, lr
 800043e:	d909      	bls.n	8000454 <__udivmoddi4+0x1bc>
 8000440:	19ed      	adds	r5, r5, r7
 8000442:	f101 30ff 	add.w	r0, r1, #4294967295
 8000446:	f080 808a 	bcs.w	800055e <__udivmoddi4+0x2c6>
 800044a:	42ab      	cmp	r3, r5
 800044c:	f240 8087 	bls.w	800055e <__udivmoddi4+0x2c6>
 8000450:	3902      	subs	r1, #2
 8000452:	443d      	add	r5, r7
 8000454:	1aeb      	subs	r3, r5, r3
 8000456:	fa1f f588 	uxth.w	r5, r8
 800045a:	fbb3 f0f2 	udiv	r0, r3, r2
 800045e:	fb02 3310 	mls	r3, r2, r0, r3
 8000462:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000466:	fb00 f30c 	mul.w	r3, r0, ip
 800046a:	42ab      	cmp	r3, r5
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x1e6>
 800046e:	19ed      	adds	r5, r5, r7
 8000470:	f100 38ff 	add.w	r8, r0, #4294967295
 8000474:	d26f      	bcs.n	8000556 <__udivmoddi4+0x2be>
 8000476:	42ab      	cmp	r3, r5
 8000478:	d96d      	bls.n	8000556 <__udivmoddi4+0x2be>
 800047a:	3802      	subs	r0, #2
 800047c:	443d      	add	r5, r7
 800047e:	1aeb      	subs	r3, r5, r3
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	e78f      	b.n	80003a6 <__udivmoddi4+0x10e>
 8000486:	f1c1 0720 	rsb	r7, r1, #32
 800048a:	fa22 f807 	lsr.w	r8, r2, r7
 800048e:	408b      	lsls	r3, r1
 8000490:	fa05 f401 	lsl.w	r4, r5, r1
 8000494:	ea48 0303 	orr.w	r3, r8, r3
 8000498:	fa20 fe07 	lsr.w	lr, r0, r7
 800049c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	ea4e 0e04 	orr.w	lr, lr, r4
 80004a6:	fbb5 f9fc 	udiv	r9, r5, ip
 80004aa:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004ae:	fb0c 5519 	mls	r5, ip, r9, r5
 80004b2:	fa1f f883 	uxth.w	r8, r3
 80004b6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004ba:	fb09 f408 	mul.w	r4, r9, r8
 80004be:	42ac      	cmp	r4, r5
 80004c0:	fa02 f201 	lsl.w	r2, r2, r1
 80004c4:	fa00 fa01 	lsl.w	sl, r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x244>
 80004ca:	18ed      	adds	r5, r5, r3
 80004cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d0:	d243      	bcs.n	800055a <__udivmoddi4+0x2c2>
 80004d2:	42ac      	cmp	r4, r5
 80004d4:	d941      	bls.n	800055a <__udivmoddi4+0x2c2>
 80004d6:	f1a9 0902 	sub.w	r9, r9, #2
 80004da:	441d      	add	r5, r3
 80004dc:	1b2d      	subs	r5, r5, r4
 80004de:	fa1f fe8e 	uxth.w	lr, lr
 80004e2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004e6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ea:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004ee:	fb00 f808 	mul.w	r8, r0, r8
 80004f2:	45a0      	cmp	r8, r4
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x26e>
 80004f6:	18e4      	adds	r4, r4, r3
 80004f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004fc:	d229      	bcs.n	8000552 <__udivmoddi4+0x2ba>
 80004fe:	45a0      	cmp	r8, r4
 8000500:	d927      	bls.n	8000552 <__udivmoddi4+0x2ba>
 8000502:	3802      	subs	r0, #2
 8000504:	441c      	add	r4, r3
 8000506:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050a:	eba4 0408 	sub.w	r4, r4, r8
 800050e:	fba0 8902 	umull	r8, r9, r0, r2
 8000512:	454c      	cmp	r4, r9
 8000514:	46c6      	mov	lr, r8
 8000516:	464d      	mov	r5, r9
 8000518:	d315      	bcc.n	8000546 <__udivmoddi4+0x2ae>
 800051a:	d012      	beq.n	8000542 <__udivmoddi4+0x2aa>
 800051c:	b156      	cbz	r6, 8000534 <__udivmoddi4+0x29c>
 800051e:	ebba 030e 	subs.w	r3, sl, lr
 8000522:	eb64 0405 	sbc.w	r4, r4, r5
 8000526:	fa04 f707 	lsl.w	r7, r4, r7
 800052a:	40cb      	lsrs	r3, r1
 800052c:	431f      	orrs	r7, r3
 800052e:	40cc      	lsrs	r4, r1
 8000530:	6037      	str	r7, [r6, #0]
 8000532:	6074      	str	r4, [r6, #4]
 8000534:	2100      	movs	r1, #0
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	4618      	mov	r0, r3
 800053c:	e6f8      	b.n	8000330 <__udivmoddi4+0x98>
 800053e:	4690      	mov	r8, r2
 8000540:	e6e0      	b.n	8000304 <__udivmoddi4+0x6c>
 8000542:	45c2      	cmp	sl, r8
 8000544:	d2ea      	bcs.n	800051c <__udivmoddi4+0x284>
 8000546:	ebb8 0e02 	subs.w	lr, r8, r2
 800054a:	eb69 0503 	sbc.w	r5, r9, r3
 800054e:	3801      	subs	r0, #1
 8000550:	e7e4      	b.n	800051c <__udivmoddi4+0x284>
 8000552:	4628      	mov	r0, r5
 8000554:	e7d7      	b.n	8000506 <__udivmoddi4+0x26e>
 8000556:	4640      	mov	r0, r8
 8000558:	e791      	b.n	800047e <__udivmoddi4+0x1e6>
 800055a:	4681      	mov	r9, r0
 800055c:	e7be      	b.n	80004dc <__udivmoddi4+0x244>
 800055e:	4601      	mov	r1, r0
 8000560:	e778      	b.n	8000454 <__udivmoddi4+0x1bc>
 8000562:	3802      	subs	r0, #2
 8000564:	443c      	add	r4, r7
 8000566:	e745      	b.n	80003f4 <__udivmoddi4+0x15c>
 8000568:	4608      	mov	r0, r1
 800056a:	e708      	b.n	800037e <__udivmoddi4+0xe6>
 800056c:	f1a8 0802 	sub.w	r8, r8, #2
 8000570:	443d      	add	r5, r7
 8000572:	e72b      	b.n	80003cc <__udivmoddi4+0x134>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000578:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <HAL_InitTick+0x24>)
{
 800057c:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000584:	fbb0 f0f3 	udiv	r0, r0, r3
 8000588:	f000 f894 	bl	80006b4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	4621      	mov	r1, r4
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f000 f84e 	bl	8000634 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000598:	2000      	movs	r0, #0
 800059a:	bd10      	pop	{r4, pc}
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_Init>:
{
 80005a0:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x30>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005aa:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005b2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005ba:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005bc:	2003      	movs	r0, #3
 80005be:	f000 f827 	bl	8000610 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f7ff ffd8 	bl	8000578 <HAL_InitTick>
  HAL_MspInit();
 80005c8:	f001 fdb4 	bl	8002134 <HAL_MspInit>
}
 80005cc:	2000      	movs	r0, #0
 80005ce:	bd08      	pop	{r3, pc}
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005d4:	4a02      	ldr	r2, [pc, #8]	; (80005e0 <HAL_IncTick+0xc>)
 80005d6:	6813      	ldr	r3, [r2, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000020 	.word	0x20000020

080005e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005e4:	4b01      	ldr	r3, [pc, #4]	; (80005ec <HAL_GetTick+0x8>)
 80005e6:	6818      	ldr	r0, [r3, #0]
}
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000020 	.word	0x20000020

080005f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80005f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80005f2:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f4:	f7ff fff6 	bl	80005e4 <HAL_GetTick>
  uint32_t wait = Delay;
 80005f8:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80005fc:	4605      	mov	r5, r0
  {
     wait++;
 80005fe:	bf18      	it	ne
 8000600:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000602:	f7ff ffef 	bl	80005e4 <HAL_GetTick>
 8000606:	1b40      	subs	r0, r0, r5
 8000608:	42a0      	cmp	r0, r4
 800060a:	d3fa      	bcc.n	8000602 <HAL_Delay+0x12>
  {
  }
}
 800060c:	b003      	add	sp, #12
 800060e:	bd30      	pop	{r4, r5, pc}

08000610 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000612:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000614:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000618:	041b      	lsls	r3, r3, #16
 800061a:	0c1b      	lsrs	r3, r3, #16
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000620:	0200      	lsls	r0, r0, #8
 8000622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000626:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800062a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800062c:	60d3      	str	r3, [r2, #12]
 800062e:	4770      	bx	lr
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000636:	b530      	push	{r4, r5, lr}
 8000638:	68dc      	ldr	r4, [r3, #12]
 800063a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800063e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000642:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000644:	2b04      	cmp	r3, #4
 8000646:	bf28      	it	cs
 8000648:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064c:	f04f 0501 	mov.w	r5, #1
 8000650:	fa05 f303 	lsl.w	r3, r5, r3
 8000654:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000658:	bf8c      	ite	hi
 800065a:	3c03      	subhi	r4, #3
 800065c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800065e:	4019      	ands	r1, r3
 8000660:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000662:	fa05 f404 	lsl.w	r4, r5, r4
 8000666:	3c01      	subs	r4, #1
 8000668:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800066a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800066c:	ea42 0201 	orr.w	r2, r2, r1
 8000670:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	bfaf      	iteee	ge
 8000676:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	f000 000f 	andlt.w	r0, r0, #15
 800067e:	4b06      	ldrlt	r3, [pc, #24]	; (8000698 <HAL_NVIC_SetPriority+0x64>)
 8000680:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	bfa5      	ittet	ge
 8000684:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000688:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000690:	bd30      	pop	{r4, r5, pc}
 8000692:	bf00      	nop
 8000694:	e000ed00 	.word	0xe000ed00
 8000698:	e000ed14 	.word	0xe000ed14

0800069c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800069c:	0942      	lsrs	r2, r0, #5
 800069e:	2301      	movs	r3, #1
 80006a0:	f000 001f 	and.w	r0, r0, #31
 80006a4:	fa03 f000 	lsl.w	r0, r3, r0
 80006a8:	4b01      	ldr	r3, [pc, #4]	; (80006b0 <HAL_NVIC_EnableIRQ+0x14>)
 80006aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006ae:	4770      	bx	lr
 80006b0:	e000e100 	.word	0xe000e100

080006b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006b4:	3801      	subs	r0, #1
 80006b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ba:	d20a      	bcs.n	80006d2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	4a07      	ldr	r2, [pc, #28]	; (80006dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	21f0      	movs	r1, #240	; 0xf0
 80006c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000e010 	.word	0xe000e010
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006e2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006e4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006e6:	bf0c      	ite	eq
 80006e8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006ec:	f022 0204 	bicne.w	r2, r2, #4
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	4770      	bx	lr
 80006f4:	e000e010 	.word	0xe000e010

080006f8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80006f8:	4770      	bx	lr

080006fa <HAL_SYSTICK_IRQHandler>:
{
 80006fa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80006fc:	f7ff fffc 	bl	80006f8 <HAL_SYSTICK_Callback>
 8000700:	bd08      	pop	{r3, pc}
	...

08000704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000708:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800070a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80008bc <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000710:	4a68      	ldr	r2, [pc, #416]	; (80008b4 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000712:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80008c0 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000716:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000718:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800071a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800071e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000720:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000724:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000728:	45b6      	cmp	lr, r6
 800072a:	f040 80ae 	bne.w	800088a <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800072e:	684c      	ldr	r4, [r1, #4]
 8000730:	f024 0710 	bic.w	r7, r4, #16
 8000734:	2f02      	cmp	r7, #2
 8000736:	d116      	bne.n	8000766 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000738:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800073c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000740:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000744:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000748:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800074c:	f04f 0c0f 	mov.w	ip, #15
 8000750:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000754:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000758:	690d      	ldr	r5, [r1, #16]
 800075a:	fa05 f50b 	lsl.w	r5, r5, fp
 800075e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000762:	f8ca 5020 	str.w	r5, [sl, #32]
 8000766:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800076a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800076c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000770:	fa05 f50a 	lsl.w	r5, r5, sl
 8000774:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000776:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800077a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800077e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000782:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000784:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000788:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800078a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800078e:	d811      	bhi.n	80007b4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000790:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000792:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000796:	68cf      	ldr	r7, [r1, #12]
 8000798:	fa07 fc0a 	lsl.w	ip, r7, sl
 800079c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80007a0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007a2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007a4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007a8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80007ac:	409f      	lsls	r7, r3
 80007ae:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80007b2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007b4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007b6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007b8:	688f      	ldr	r7, [r1, #8]
 80007ba:	fa07 f70a 	lsl.w	r7, r7, sl
 80007be:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007c0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007c2:	00e5      	lsls	r5, r4, #3
 80007c4:	d561      	bpl.n	800088a <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	f04f 0b00 	mov.w	fp, #0
 80007ca:	f8cd b00c 	str.w	fp, [sp, #12]
 80007ce:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007d2:	4d39      	ldr	r5, [pc, #228]	; (80008b8 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d4:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007d8:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80007dc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80007e0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80007e4:	9703      	str	r7, [sp, #12]
 80007e6:	9f03      	ldr	r7, [sp, #12]
 80007e8:	f023 0703 	bic.w	r7, r3, #3
 80007ec:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007f0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007f4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007f8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007fc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000800:	f04f 0e0f 	mov.w	lr, #15
 8000804:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000808:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800080a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800080e:	d043      	beq.n	8000898 <HAL_GPIO_Init+0x194>
 8000810:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000814:	42a8      	cmp	r0, r5
 8000816:	d041      	beq.n	800089c <HAL_GPIO_Init+0x198>
 8000818:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800081c:	42a8      	cmp	r0, r5
 800081e:	d03f      	beq.n	80008a0 <HAL_GPIO_Init+0x19c>
 8000820:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000824:	42a8      	cmp	r0, r5
 8000826:	d03d      	beq.n	80008a4 <HAL_GPIO_Init+0x1a0>
 8000828:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800082c:	42a8      	cmp	r0, r5
 800082e:	d03b      	beq.n	80008a8 <HAL_GPIO_Init+0x1a4>
 8000830:	4548      	cmp	r0, r9
 8000832:	d03b      	beq.n	80008ac <HAL_GPIO_Init+0x1a8>
 8000834:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000838:	42a8      	cmp	r0, r5
 800083a:	d039      	beq.n	80008b0 <HAL_GPIO_Init+0x1ac>
 800083c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000840:	42a8      	cmp	r0, r5
 8000842:	bf14      	ite	ne
 8000844:	2508      	movne	r5, #8
 8000846:	2507      	moveq	r5, #7
 8000848:	fa05 f50c 	lsl.w	r5, r5, ip
 800084c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000850:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000852:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000854:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000856:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800085a:	bf0c      	ite	eq
 800085c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800085e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000860:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000862:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000864:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000868:	bf0c      	ite	eq
 800086a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800086c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800086e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000870:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000872:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000876:	bf0c      	ite	eq
 8000878:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800087a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800087c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800087e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000880:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000882:	bf54      	ite	pl
 8000884:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000886:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000888:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800088a:	3301      	adds	r3, #1
 800088c:	2b10      	cmp	r3, #16
 800088e:	f47f af44 	bne.w	800071a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000892:	b005      	add	sp, #20
 8000894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000898:	465d      	mov	r5, fp
 800089a:	e7d5      	b.n	8000848 <HAL_GPIO_Init+0x144>
 800089c:	2501      	movs	r5, #1
 800089e:	e7d3      	b.n	8000848 <HAL_GPIO_Init+0x144>
 80008a0:	2502      	movs	r5, #2
 80008a2:	e7d1      	b.n	8000848 <HAL_GPIO_Init+0x144>
 80008a4:	2503      	movs	r5, #3
 80008a6:	e7cf      	b.n	8000848 <HAL_GPIO_Init+0x144>
 80008a8:	2504      	movs	r5, #4
 80008aa:	e7cd      	b.n	8000848 <HAL_GPIO_Init+0x144>
 80008ac:	2505      	movs	r5, #5
 80008ae:	e7cb      	b.n	8000848 <HAL_GPIO_Init+0x144>
 80008b0:	2506      	movs	r5, #6
 80008b2:	e7c9      	b.n	8000848 <HAL_GPIO_Init+0x144>
 80008b4:	40013c00 	.word	0x40013c00
 80008b8:	40020000 	.word	0x40020000
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40021400 	.word	0x40021400

080008c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008c4:	b10a      	cbz	r2, 80008ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008c6:	6181      	str	r1, [r0, #24]
 80008c8:	4770      	bx	lr
 80008ca:	0409      	lsls	r1, r1, #16
 80008cc:	e7fb      	b.n	80008c6 <HAL_GPIO_WritePin+0x2>

080008ce <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008ce:	4770      	bx	lr

080008d0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80008d0:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80008d2:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80008d4:	6959      	ldr	r1, [r3, #20]
 80008d6:	4201      	tst	r1, r0
 80008d8:	d002      	beq.n	80008e0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80008da:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80008dc:	f7ff fff7 	bl	80008ce <HAL_GPIO_EXTI_Callback>
 80008e0:	bd08      	pop	{r3, pc}
 80008e2:	bf00      	nop
 80008e4:	40013c00 	.word	0x40013c00

080008e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008ea:	4604      	mov	r4, r0
 80008ec:	b910      	cbnz	r0, 80008f4 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 80008ee:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80008f0:	b003      	add	sp, #12
 80008f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008f4:	6803      	ldr	r3, [r0, #0]
 80008f6:	07d8      	lsls	r0, r3, #31
 80008f8:	d43b      	bmi.n	8000972 <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008fa:	6823      	ldr	r3, [r4, #0]
 80008fc:	0799      	lsls	r1, r3, #30
 80008fe:	f100 8084 	bmi.w	8000a0a <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000902:	6823      	ldr	r3, [r4, #0]
 8000904:	071e      	lsls	r6, r3, #28
 8000906:	f100 80c6 	bmi.w	8000a96 <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800090a:	6823      	ldr	r3, [r4, #0]
 800090c:	075d      	lsls	r5, r3, #29
 800090e:	d52a      	bpl.n	8000966 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	9301      	str	r3, [sp, #4]
 8000914:	4baa      	ldr	r3, [pc, #680]	; (8000bc0 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 8000916:	4dab      	ldr	r5, [pc, #684]	; (8000bc4 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800091a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800091e:	641a      	str	r2, [r3, #64]	; 0x40
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000926:	9301      	str	r3, [sp, #4]
 8000928:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800092a:	682b      	ldr	r3, [r5, #0]
 800092c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000930:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000932:	f7ff fe57 	bl	80005e4 <HAL_GetTick>
 8000936:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000938:	682b      	ldr	r3, [r5, #0]
 800093a:	05da      	lsls	r2, r3, #23
 800093c:	f140 80cd 	bpl.w	8000ada <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000940:	68a3      	ldr	r3, [r4, #8]
 8000942:	4d9f      	ldr	r5, [pc, #636]	; (8000bc0 <HAL_RCC_OscConfig+0x2d8>)
 8000944:	2b01      	cmp	r3, #1
 8000946:	f040 80cf 	bne.w	8000ae8 <HAL_RCC_OscConfig+0x200>
 800094a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000952:	f7ff fe47 	bl	80005e4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000956:	4d9a      	ldr	r5, [pc, #616]	; (8000bc0 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000958:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800095a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800095e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000960:	079b      	lsls	r3, r3, #30
 8000962:	f140 80e2 	bpl.w	8000b2a <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000966:	69a2      	ldr	r2, [r4, #24]
 8000968:	2a00      	cmp	r2, #0
 800096a:	f040 80e5 	bne.w	8000b38 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 800096e:	2000      	movs	r0, #0
 8000970:	e7be      	b.n	80008f0 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000972:	4b93      	ldr	r3, [pc, #588]	; (8000bc0 <HAL_RCC_OscConfig+0x2d8>)
 8000974:	689a      	ldr	r2, [r3, #8]
 8000976:	f002 020c 	and.w	r2, r2, #12
 800097a:	2a04      	cmp	r2, #4
 800097c:	d007      	beq.n	800098e <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000984:	2a08      	cmp	r2, #8
 8000986:	d10a      	bne.n	800099e <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	025a      	lsls	r2, r3, #9
 800098c:	d507      	bpl.n	800099e <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800098e:	4b8c      	ldr	r3, [pc, #560]	; (8000bc0 <HAL_RCC_OscConfig+0x2d8>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	039b      	lsls	r3, r3, #14
 8000994:	d5b1      	bpl.n	80008fa <HAL_RCC_OscConfig+0x12>
 8000996:	6863      	ldr	r3, [r4, #4]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1ae      	bne.n	80008fa <HAL_RCC_OscConfig+0x12>
 800099c:	e7a7      	b.n	80008ee <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800099e:	6863      	ldr	r3, [r4, #4]
 80009a0:	4d87      	ldr	r5, [pc, #540]	; (8000bc0 <HAL_RCC_OscConfig+0x2d8>)
 80009a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009a6:	d111      	bne.n	80009cc <HAL_RCC_OscConfig+0xe4>
 80009a8:	682b      	ldr	r3, [r5, #0]
 80009aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80009b0:	f7ff fe18 	bl	80005e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009b4:	4d82      	ldr	r5, [pc, #520]	; (8000bc0 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80009b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009b8:	682b      	ldr	r3, [r5, #0]
 80009ba:	039f      	lsls	r7, r3, #14
 80009bc:	d49d      	bmi.n	80008fa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009be:	f7ff fe11 	bl	80005e4 <HAL_GetTick>
 80009c2:	1b80      	subs	r0, r0, r6
 80009c4:	2864      	cmp	r0, #100	; 0x64
 80009c6:	d9f7      	bls.n	80009b8 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80009c8:	2003      	movs	r0, #3
 80009ca:	e791      	b.n	80008f0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009d0:	d104      	bne.n	80009dc <HAL_RCC_OscConfig+0xf4>
 80009d2:	682b      	ldr	r3, [r5, #0]
 80009d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d8:	602b      	str	r3, [r5, #0]
 80009da:	e7e5      	b.n	80009a8 <HAL_RCC_OscConfig+0xc0>
 80009dc:	682a      	ldr	r2, [r5, #0]
 80009de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009e2:	602a      	str	r2, [r5, #0]
 80009e4:	682a      	ldr	r2, [r5, #0]
 80009e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009ea:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1df      	bne.n	80009b0 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 80009f0:	f7ff fdf8 	bl	80005e4 <HAL_GetTick>
 80009f4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009f6:	682b      	ldr	r3, [r5, #0]
 80009f8:	0398      	lsls	r0, r3, #14
 80009fa:	f57f af7e 	bpl.w	80008fa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009fe:	f7ff fdf1 	bl	80005e4 <HAL_GetTick>
 8000a02:	1b80      	subs	r0, r0, r6
 8000a04:	2864      	cmp	r0, #100	; 0x64
 8000a06:	d9f6      	bls.n	80009f6 <HAL_RCC_OscConfig+0x10e>
 8000a08:	e7de      	b.n	80009c8 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a0a:	4b6d      	ldr	r3, [pc, #436]	; (8000bc0 <HAL_RCC_OscConfig+0x2d8>)
 8000a0c:	689a      	ldr	r2, [r3, #8]
 8000a0e:	f012 0f0c 	tst.w	r2, #12
 8000a12:	d007      	beq.n	8000a24 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a14:	689a      	ldr	r2, [r3, #8]
 8000a16:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a1a:	2a08      	cmp	r2, #8
 8000a1c:	d112      	bne.n	8000a44 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	0259      	lsls	r1, r3, #9
 8000a22:	d40f      	bmi.n	8000a44 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a24:	4b66      	ldr	r3, [pc, #408]	; (8000bc0 <HAL_RCC_OscConfig+0x2d8>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	0792      	lsls	r2, r2, #30
 8000a2a:	d503      	bpl.n	8000a34 <HAL_RCC_OscConfig+0x14c>
 8000a2c:	68e2      	ldr	r2, [r4, #12]
 8000a2e:	2a01      	cmp	r2, #1
 8000a30:	f47f af5d 	bne.w	80008ee <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	6921      	ldr	r1, [r4, #16]
 8000a38:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a3c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a40:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a42:	e75e      	b.n	8000902 <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a44:	68e2      	ldr	r2, [r4, #12]
 8000a46:	4b60      	ldr	r3, [pc, #384]	; (8000bc8 <HAL_RCC_OscConfig+0x2e0>)
 8000a48:	b1b2      	cbz	r2, 8000a78 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a4e:	f7ff fdc9 	bl	80005e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a52:	4d5b      	ldr	r5, [pc, #364]	; (8000bc0 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000a54:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a56:	682b      	ldr	r3, [r5, #0]
 8000a58:	079b      	lsls	r3, r3, #30
 8000a5a:	d507      	bpl.n	8000a6c <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a5c:	682b      	ldr	r3, [r5, #0]
 8000a5e:	6922      	ldr	r2, [r4, #16]
 8000a60:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a64:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a68:	602b      	str	r3, [r5, #0]
 8000a6a:	e74a      	b.n	8000902 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a6c:	f7ff fdba 	bl	80005e4 <HAL_GetTick>
 8000a70:	1b80      	subs	r0, r0, r6
 8000a72:	2802      	cmp	r0, #2
 8000a74:	d9ef      	bls.n	8000a56 <HAL_RCC_OscConfig+0x16e>
 8000a76:	e7a7      	b.n	80009c8 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8000a78:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a7a:	f7ff fdb3 	bl	80005e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a7e:	4d50      	ldr	r5, [pc, #320]	; (8000bc0 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000a80:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a82:	682b      	ldr	r3, [r5, #0]
 8000a84:	079f      	lsls	r7, r3, #30
 8000a86:	f57f af3c 	bpl.w	8000902 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a8a:	f7ff fdab 	bl	80005e4 <HAL_GetTick>
 8000a8e:	1b80      	subs	r0, r0, r6
 8000a90:	2802      	cmp	r0, #2
 8000a92:	d9f6      	bls.n	8000a82 <HAL_RCC_OscConfig+0x19a>
 8000a94:	e798      	b.n	80009c8 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a96:	6962      	ldr	r2, [r4, #20]
 8000a98:	4b4c      	ldr	r3, [pc, #304]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000a9a:	b17a      	cbz	r2, 8000abc <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000aa0:	f7ff fda0 	bl	80005e4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aa4:	4d46      	ldr	r5, [pc, #280]	; (8000bc0 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000aa6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aa8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000aaa:	0798      	lsls	r0, r3, #30
 8000aac:	f53f af2d 	bmi.w	800090a <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ab0:	f7ff fd98 	bl	80005e4 <HAL_GetTick>
 8000ab4:	1b80      	subs	r0, r0, r6
 8000ab6:	2802      	cmp	r0, #2
 8000ab8:	d9f6      	bls.n	8000aa8 <HAL_RCC_OscConfig+0x1c0>
 8000aba:	e785      	b.n	80009c8 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 8000abc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000abe:	f7ff fd91 	bl	80005e4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ac2:	4d3f      	ldr	r5, [pc, #252]	; (8000bc0 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000ac4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ac6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ac8:	0799      	lsls	r1, r3, #30
 8000aca:	f57f af1e 	bpl.w	800090a <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ace:	f7ff fd89 	bl	80005e4 <HAL_GetTick>
 8000ad2:	1b80      	subs	r0, r0, r6
 8000ad4:	2802      	cmp	r0, #2
 8000ad6:	d9f6      	bls.n	8000ac6 <HAL_RCC_OscConfig+0x1de>
 8000ad8:	e776      	b.n	80009c8 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000ada:	f7ff fd83 	bl	80005e4 <HAL_GetTick>
 8000ade:	1b80      	subs	r0, r0, r6
 8000ae0:	2802      	cmp	r0, #2
 8000ae2:	f67f af29 	bls.w	8000938 <HAL_RCC_OscConfig+0x50>
 8000ae6:	e76f      	b.n	80009c8 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ae8:	2b05      	cmp	r3, #5
 8000aea:	d104      	bne.n	8000af6 <HAL_RCC_OscConfig+0x20e>
 8000aec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	672b      	str	r3, [r5, #112]	; 0x70
 8000af4:	e729      	b.n	800094a <HAL_RCC_OscConfig+0x62>
 8000af6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000af8:	f022 0201 	bic.w	r2, r2, #1
 8000afc:	672a      	str	r2, [r5, #112]	; 0x70
 8000afe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b00:	f022 0204 	bic.w	r2, r2, #4
 8000b04:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f47f af23 	bne.w	8000952 <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8000b0c:	f7ff fd6a 	bl	80005e4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b10:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b14:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b16:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b18:	0798      	lsls	r0, r3, #30
 8000b1a:	f57f af24 	bpl.w	8000966 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b1e:	f7ff fd61 	bl	80005e4 <HAL_GetTick>
 8000b22:	1b80      	subs	r0, r0, r6
 8000b24:	42b8      	cmp	r0, r7
 8000b26:	d9f6      	bls.n	8000b16 <HAL_RCC_OscConfig+0x22e>
 8000b28:	e74e      	b.n	80009c8 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b2a:	f7ff fd5b 	bl	80005e4 <HAL_GetTick>
 8000b2e:	1b80      	subs	r0, r0, r6
 8000b30:	42b8      	cmp	r0, r7
 8000b32:	f67f af14 	bls.w	800095e <HAL_RCC_OscConfig+0x76>
 8000b36:	e747      	b.n	80009c8 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b38:	4d21      	ldr	r5, [pc, #132]	; (8000bc0 <HAL_RCC_OscConfig+0x2d8>)
 8000b3a:	68ab      	ldr	r3, [r5, #8]
 8000b3c:	f003 030c 	and.w	r3, r3, #12
 8000b40:	2b08      	cmp	r3, #8
 8000b42:	f43f aed4 	beq.w	80008ee <HAL_RCC_OscConfig+0x6>
 8000b46:	4e22      	ldr	r6, [pc, #136]	; (8000bd0 <HAL_RCC_OscConfig+0x2e8>)
 8000b48:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b4a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b4c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b4e:	d12a      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8000b50:	f7ff fd48 	bl	80005e4 <HAL_GetTick>
 8000b54:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b56:	682b      	ldr	r3, [r5, #0]
 8000b58:	0199      	lsls	r1, r3, #6
 8000b5a:	d41e      	bmi.n	8000b9a <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b5c:	6a22      	ldr	r2, [r4, #32]
 8000b5e:	69e3      	ldr	r3, [r4, #28]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b64:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b6e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b70:	4c13      	ldr	r4, [pc, #76]	; (8000bc0 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b72:	0852      	lsrs	r2, r2, #1
 8000b74:	3a01      	subs	r2, #1
 8000b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b7a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b80:	f7ff fd30 	bl	80005e4 <HAL_GetTick>
 8000b84:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	019a      	lsls	r2, r3, #6
 8000b8a:	f53f aef0 	bmi.w	800096e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b8e:	f7ff fd29 	bl	80005e4 <HAL_GetTick>
 8000b92:	1b40      	subs	r0, r0, r5
 8000b94:	2802      	cmp	r0, #2
 8000b96:	d9f6      	bls.n	8000b86 <HAL_RCC_OscConfig+0x29e>
 8000b98:	e716      	b.n	80009c8 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b9a:	f7ff fd23 	bl	80005e4 <HAL_GetTick>
 8000b9e:	1bc0      	subs	r0, r0, r7
 8000ba0:	2802      	cmp	r0, #2
 8000ba2:	d9d8      	bls.n	8000b56 <HAL_RCC_OscConfig+0x26e>
 8000ba4:	e710      	b.n	80009c8 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8000ba6:	f7ff fd1d 	bl	80005e4 <HAL_GetTick>
 8000baa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bac:	682b      	ldr	r3, [r5, #0]
 8000bae:	019b      	lsls	r3, r3, #6
 8000bb0:	f57f aedd 	bpl.w	800096e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bb4:	f7ff fd16 	bl	80005e4 <HAL_GetTick>
 8000bb8:	1b00      	subs	r0, r0, r4
 8000bba:	2802      	cmp	r0, #2
 8000bbc:	d9f6      	bls.n	8000bac <HAL_RCC_OscConfig+0x2c4>
 8000bbe:	e703      	b.n	80009c8 <HAL_RCC_OscConfig+0xe0>
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40007000 	.word	0x40007000
 8000bc8:	42470000 	.word	0x42470000
 8000bcc:	42470e80 	.word	0x42470e80
 8000bd0:	42470060 	.word	0x42470060

08000bd4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bd4:	4913      	ldr	r1, [pc, #76]	; (8000c24 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bd6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bd8:	688b      	ldr	r3, [r1, #8]
 8000bda:	f003 030c 	and.w	r3, r3, #12
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	d003      	beq.n	8000bea <HAL_RCC_GetSysClockFreq+0x16>
 8000be2:	2b08      	cmp	r3, #8
 8000be4:	d003      	beq.n	8000bee <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000be6:	4810      	ldr	r0, [pc, #64]	; (8000c28 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000be8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000bea:	4810      	ldr	r0, [pc, #64]	; (8000c2c <HAL_RCC_GetSysClockFreq+0x58>)
 8000bec:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bee:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bf0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bf2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bf4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bf8:	bf14      	ite	ne
 8000bfa:	480c      	ldrne	r0, [pc, #48]	; (8000c2c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bfc:	480a      	ldreq	r0, [pc, #40]	; (8000c28 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bfe:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c02:	bf18      	it	ne
 8000c04:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c06:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c0a:	fba1 0100 	umull	r0, r1, r1, r0
 8000c0e:	f7ff fb2b 	bl	8000268 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c1e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c22:	bd08      	pop	{r3, pc}
 8000c24:	40023800 	.word	0x40023800
 8000c28:	00f42400 	.word	0x00f42400
 8000c2c:	017d7840 	.word	0x017d7840

08000c30 <HAL_RCC_ClockConfig>:
{
 8000c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c34:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c36:	4604      	mov	r4, r0
 8000c38:	b910      	cbnz	r0, 8000c40 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c40:	4b44      	ldr	r3, [pc, #272]	; (8000d54 <HAL_RCC_ClockConfig+0x124>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	f002 020f 	and.w	r2, r2, #15
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	d328      	bcc.n	8000c9e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c4c:	6821      	ldr	r1, [r4, #0]
 8000c4e:	078f      	lsls	r7, r1, #30
 8000c50:	d42d      	bmi.n	8000cae <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c52:	07c8      	lsls	r0, r1, #31
 8000c54:	d440      	bmi.n	8000cd8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c56:	4b3f      	ldr	r3, [pc, #252]	; (8000d54 <HAL_RCC_ClockConfig+0x124>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	f002 020f 	and.w	r2, r2, #15
 8000c5e:	4295      	cmp	r5, r2
 8000c60:	d366      	bcc.n	8000d30 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c62:	6822      	ldr	r2, [r4, #0]
 8000c64:	0751      	lsls	r1, r2, #29
 8000c66:	d46c      	bmi.n	8000d42 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c68:	0713      	lsls	r3, r2, #28
 8000c6a:	d507      	bpl.n	8000c7c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c6c:	4a3a      	ldr	r2, [pc, #232]	; (8000d58 <HAL_RCC_ClockConfig+0x128>)
 8000c6e:	6921      	ldr	r1, [r4, #16]
 8000c70:	6893      	ldr	r3, [r2, #8]
 8000c72:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c76:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c7a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c7c:	f7ff ffaa 	bl	8000bd4 <HAL_RCC_GetSysClockFreq>
 8000c80:	4b35      	ldr	r3, [pc, #212]	; (8000d58 <HAL_RCC_ClockConfig+0x128>)
 8000c82:	4a36      	ldr	r2, [pc, #216]	; (8000d5c <HAL_RCC_ClockConfig+0x12c>)
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c8a:	5cd3      	ldrb	r3, [r2, r3]
 8000c8c:	40d8      	lsrs	r0, r3
 8000c8e:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <HAL_RCC_ClockConfig+0x130>)
 8000c90:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff fc70 	bl	8000578 <HAL_InitTick>
  return HAL_OK;
 8000c98:	2000      	movs	r0, #0
 8000c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c9e:	b2ca      	uxtb	r2, r1
 8000ca0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 030f 	and.w	r3, r3, #15
 8000ca8:	4299      	cmp	r1, r3
 8000caa:	d1c6      	bne.n	8000c3a <HAL_RCC_ClockConfig+0xa>
 8000cac:	e7ce      	b.n	8000c4c <HAL_RCC_ClockConfig+0x1c>
 8000cae:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cb0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	689a      	ldrne	r2, [r3, #8]
 8000cb8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000cbc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cbe:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cc0:	bf42      	ittt	mi
 8000cc2:	689a      	ldrmi	r2, [r3, #8]
 8000cc4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000cc8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	68a0      	ldr	r0, [r4, #8]
 8000cce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cd2:	4302      	orrs	r2, r0
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	e7bc      	b.n	8000c52 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cd8:	6862      	ldr	r2, [r4, #4]
 8000cda:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <HAL_RCC_ClockConfig+0x128>)
 8000cdc:	2a01      	cmp	r2, #1
 8000cde:	d11d      	bne.n	8000d1c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce6:	d0a8      	beq.n	8000c3a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ce8:	4e1b      	ldr	r6, [pc, #108]	; (8000d58 <HAL_RCC_ClockConfig+0x128>)
 8000cea:	68b3      	ldr	r3, [r6, #8]
 8000cec:	f023 0303 	bic.w	r3, r3, #3
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000cf4:	f7ff fc76 	bl	80005e4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cf8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cfc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cfe:	68b3      	ldr	r3, [r6, #8]
 8000d00:	6862      	ldr	r2, [r4, #4]
 8000d02:	f003 030c 	and.w	r3, r3, #12
 8000d06:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d0a:	d0a4      	beq.n	8000c56 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d0c:	f7ff fc6a 	bl	80005e4 <HAL_GetTick>
 8000d10:	1bc0      	subs	r0, r0, r7
 8000d12:	4540      	cmp	r0, r8
 8000d14:	d9f3      	bls.n	8000cfe <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d16:	2003      	movs	r0, #3
}
 8000d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d1c:	1e91      	subs	r1, r2, #2
 8000d1e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d20:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d22:	d802      	bhi.n	8000d2a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d24:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d28:	e7dd      	b.n	8000ce6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d2a:	f013 0f02 	tst.w	r3, #2
 8000d2e:	e7da      	b.n	8000ce6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d30:	b2ea      	uxtb	r2, r5
 8000d32:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	429d      	cmp	r5, r3
 8000d3c:	f47f af7d 	bne.w	8000c3a <HAL_RCC_ClockConfig+0xa>
 8000d40:	e78f      	b.n	8000c62 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d42:	4905      	ldr	r1, [pc, #20]	; (8000d58 <HAL_RCC_ClockConfig+0x128>)
 8000d44:	68e0      	ldr	r0, [r4, #12]
 8000d46:	688b      	ldr	r3, [r1, #8]
 8000d48:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d4c:	4303      	orrs	r3, r0
 8000d4e:	608b      	str	r3, [r1, #8]
 8000d50:	e78a      	b.n	8000c68 <HAL_RCC_ClockConfig+0x38>
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	08002378 	.word	0x08002378
 8000d60:	20000000 	.word	0x20000000

08000d64 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000d64:	4b01      	ldr	r3, [pc, #4]	; (8000d6c <HAL_RCC_GetHCLKFreq+0x8>)
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000000 	.word	0x20000000

08000d70 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d74:	9e06      	ldr	r6, [sp, #24]
 8000d76:	4604      	mov	r4, r0
 8000d78:	4688      	mov	r8, r1
 8000d7a:	4617      	mov	r7, r2
 8000d7c:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000d7e:	6822      	ldr	r2, [r4, #0]
 8000d80:	6893      	ldr	r3, [r2, #8]
 8000d82:	ea38 0303 	bics.w	r3, r8, r3
 8000d86:	bf0c      	ite	eq
 8000d88:	2301      	moveq	r3, #1
 8000d8a:	2300      	movne	r3, #0
 8000d8c:	429f      	cmp	r7, r3
 8000d8e:	d102      	bne.n	8000d96 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000d90:	2000      	movs	r0, #0
}
 8000d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000d96:	1c6b      	adds	r3, r5, #1
 8000d98:	d0f2      	beq.n	8000d80 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000d9a:	bb55      	cbnz	r5, 8000df2 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000da4:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000da6:	6862      	ldr	r2, [r4, #4]
 8000da8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000dac:	d10a      	bne.n	8000dc4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8000dae:	68a2      	ldr	r2, [r4, #8]
 8000db0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000db4:	d002      	beq.n	8000dbc <SPI_WaitFlagStateUntilTimeout+0x4c>
 8000db6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000dba:	d103      	bne.n	8000dc4 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dc2:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000dc4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000dc6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000dca:	d109      	bne.n	8000de0 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000dd2:	0412      	lsls	r2, r2, #16
 8000dd4:	0c12      	lsrs	r2, r2, #16
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000dde:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8000de0:	2301      	movs	r3, #1
 8000de2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000de6:	2300      	movs	r3, #0
 8000de8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000dec:	2003      	movs	r0, #3
 8000dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000df2:	f7ff fbf7 	bl	80005e4 <HAL_GetTick>
 8000df6:	1b80      	subs	r0, r0, r6
 8000df8:	4285      	cmp	r5, r0
 8000dfa:	d8c0      	bhi.n	8000d7e <SPI_WaitFlagStateUntilTimeout+0xe>
 8000dfc:	e7ce      	b.n	8000d9c <SPI_WaitFlagStateUntilTimeout+0x2c>

08000dfe <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000dfe:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e00:	460b      	mov	r3, r1
 8000e02:	9200      	str	r2, [sp, #0]
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	2200      	movs	r2, #0
{
 8000e08:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e0a:	f7ff ffb1 	bl	8000d70 <SPI_WaitFlagStateUntilTimeout>
 8000e0e:	b120      	cbz	r0, 8000e1a <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e12:	f043 0320 	orr.w	r3, r3, #32
 8000e16:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8000e18:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8000e1a:	b002      	add	sp, #8
 8000e1c:	bd10      	pop	{r4, pc}

08000e1e <HAL_SPI_Init>:
{
 8000e1e:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8000e20:	4604      	mov	r4, r0
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d036      	beq.n	8000e94 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8000e2a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000e2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e32:	b91b      	cbnz	r3, 8000e3c <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000e34:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000e38:	f001 f9ac 	bl	8002194 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000e3c:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e3e:	68a0      	ldr	r0, [r4, #8]
 8000e40:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e42:	2302      	movs	r3, #2
 8000e44:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000e48:	680b      	ldr	r3, [r1, #0]
 8000e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e4e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e50:	6863      	ldr	r3, [r4, #4]
 8000e52:	4303      	orrs	r3, r0
 8000e54:	68e0      	ldr	r0, [r4, #12]
 8000e56:	4303      	orrs	r3, r0
 8000e58:	6920      	ldr	r0, [r4, #16]
 8000e5a:	4303      	orrs	r3, r0
 8000e5c:	6960      	ldr	r0, [r4, #20]
 8000e5e:	4303      	orrs	r3, r0
 8000e60:	69e0      	ldr	r0, [r4, #28]
 8000e62:	4303      	orrs	r3, r0
 8000e64:	6a20      	ldr	r0, [r4, #32]
 8000e66:	4303      	orrs	r3, r0
 8000e68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000e6a:	4303      	orrs	r3, r0
 8000e6c:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000e70:	4303      	orrs	r3, r0
 8000e72:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000e74:	0c12      	lsrs	r2, r2, #16
 8000e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e78:	f002 0204 	and.w	r2, r2, #4
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000e80:	69cb      	ldr	r3, [r1, #28]
 8000e82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e86:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e88:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000e8a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e8c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000e8e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000e92:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e94:	2001      	movs	r0, #1
}
 8000e96:	bd10      	pop	{r4, pc}

08000e98 <HAL_SPI_Transmit>:
{
 8000e98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000e9c:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000e9e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000ea2:	2b01      	cmp	r3, #1
{
 8000ea4:	4604      	mov	r4, r0
 8000ea6:	460d      	mov	r5, r1
 8000ea8:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000eaa:	f000 809c 	beq.w	8000fe6 <HAL_SPI_Transmit+0x14e>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000eb4:	f7ff fb96 	bl	80005e4 <HAL_GetTick>
 8000eb8:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000eba:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000ebe:	b2c0      	uxtb	r0, r0
 8000ec0:	2801      	cmp	r0, #1
 8000ec2:	f040 808e 	bne.w	8000fe2 <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0))
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	d04e      	beq.n	8000f68 <HAL_SPI_Transmit+0xd0>
 8000eca:	f1b8 0f00 	cmp.w	r8, #0
 8000ece:	d04b      	beq.n	8000f68 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000eda:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000edc:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000ee0:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000ee2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000ee4:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000ee6:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ee8:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000eea:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ef0:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8000ef2:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000ef6:	bf02      	ittt	eq
 8000ef8:	681a      	ldreq	r2, [r3, #0]
 8000efa:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8000efe:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000f04:	bf5e      	ittt	pl
 8000f06:	681a      	ldrpl	r2, [r3, #0]
 8000f08:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000f0c:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000f0e:	68e2      	ldr	r2, [r4, #12]
 8000f10:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000f14:	6862      	ldr	r2, [r4, #4]
 8000f16:	d138      	bne.n	8000f8a <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000f18:	b11a      	cbz	r2, 8000f22 <HAL_SPI_Transmit+0x8a>
 8000f1a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000f1c:	b292      	uxth	r2, r2
 8000f1e:	2a01      	cmp	r2, #1
 8000f20:	d106      	bne.n	8000f30 <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000f22:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000f26:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8000f28:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000f30:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	b993      	cbnz	r3, 8000f5c <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000f36:	9700      	str	r7, [sp, #0]
 8000f38:	4633      	mov	r3, r6
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	4620      	mov	r0, r4
 8000f40:	f7ff ff16 	bl	8000d70 <SPI_WaitFlagStateUntilTimeout>
 8000f44:	b978      	cbnz	r0, 8000f66 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000f46:	463a      	mov	r2, r7
 8000f48:	4631      	mov	r1, r6
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	f7ff ff57 	bl	8000dfe <SPI_CheckFlag_BSY>
 8000f50:	2800      	cmp	r0, #0
 8000f52:	d038      	beq.n	8000fc6 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000f54:	2320      	movs	r3, #32
 8000f56:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000f58:	2001      	movs	r0, #1
    goto error;
 8000f5a:	e005      	b.n	8000f68 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	0790      	lsls	r0, r2, #30
 8000f62:	d4de      	bmi.n	8000f22 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000f64:	b94e      	cbnz	r6, 8000f7a <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8000f66:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000f74:	b004      	add	sp, #16
 8000f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000f7a:	1c71      	adds	r1, r6, #1
 8000f7c:	d0d8      	beq.n	8000f30 <HAL_SPI_Transmit+0x98>
 8000f7e:	f7ff fb31 	bl	80005e4 <HAL_GetTick>
 8000f82:	1bc0      	subs	r0, r0, r7
 8000f84:	4286      	cmp	r6, r0
 8000f86:	d8d3      	bhi.n	8000f30 <HAL_SPI_Transmit+0x98>
 8000f88:	e7ed      	b.n	8000f66 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8000f8a:	b11a      	cbz	r2, 8000f94 <HAL_SPI_Transmit+0xfc>
 8000f8c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	2a01      	cmp	r2, #1
 8000f92:	d106      	bne.n	8000fa2 <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000f94:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000f98:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000f9a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000fa2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0c5      	beq.n	8000f36 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	0792      	lsls	r2, r2, #30
 8000fb0:	d4f0      	bmi.n	8000f94 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000fb2:	2e00      	cmp	r6, #0
 8000fb4:	d0d7      	beq.n	8000f66 <HAL_SPI_Transmit+0xce>
 8000fb6:	1c73      	adds	r3, r6, #1
 8000fb8:	d0f3      	beq.n	8000fa2 <HAL_SPI_Transmit+0x10a>
 8000fba:	f7ff fb13 	bl	80005e4 <HAL_GetTick>
 8000fbe:	1bc0      	subs	r0, r0, r7
 8000fc0:	4286      	cmp	r6, r0
 8000fc2:	d8ee      	bhi.n	8000fa2 <HAL_SPI_Transmit+0x10a>
 8000fc4:	e7cf      	b.n	8000f66 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000fc6:	68a3      	ldr	r3, [r4, #8]
 8000fc8:	b933      	cbnz	r3, 8000fd8 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000fca:	9303      	str	r3, [sp, #12]
 8000fcc:	6823      	ldr	r3, [r4, #0]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	9203      	str	r2, [sp, #12]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	9303      	str	r3, [sp, #12]
 8000fd6:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000fd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000fda:	3000      	adds	r0, #0
 8000fdc:	bf18      	it	ne
 8000fde:	2001      	movne	r0, #1
 8000fe0:	e7c2      	b.n	8000f68 <HAL_SPI_Transmit+0xd0>
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	e7c0      	b.n	8000f68 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8000fe6:	2002      	movs	r0, #2
 8000fe8:	e7c4      	b.n	8000f74 <HAL_SPI_Transmit+0xdc>

08000fea <HAL_SPI_TransmitReceive>:
{
 8000fea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fee:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8000ff0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000ff4:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8000ff6:	2b01      	cmp	r3, #1
{
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	460d      	mov	r5, r1
 8000ffc:	4616      	mov	r6, r2
 8000ffe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8001000:	f000 80ed 	beq.w	80011de <HAL_SPI_TransmitReceive+0x1f4>
 8001004:	2301      	movs	r3, #1
 8001006:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800100a:	f7ff faeb 	bl	80005e4 <HAL_GetTick>
  tmp  = hspi->State;
 800100e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8001012:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8001014:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001016:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001018:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 800101a:	d00a      	beq.n	8001032 <HAL_SPI_TransmitReceive+0x48>
 800101c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001020:	f040 80db 	bne.w	80011da <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001024:	68a2      	ldr	r2, [r4, #8]
 8001026:	2a00      	cmp	r2, #0
 8001028:	f040 80d7 	bne.w	80011da <HAL_SPI_TransmitReceive+0x1f0>
 800102c:	2b04      	cmp	r3, #4
 800102e:	f040 80d4 	bne.w	80011da <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8001032:	2d00      	cmp	r5, #0
 8001034:	d04e      	beq.n	80010d4 <HAL_SPI_TransmitReceive+0xea>
 8001036:	2e00      	cmp	r6, #0
 8001038:	d04c      	beq.n	80010d4 <HAL_SPI_TransmitReceive+0xea>
 800103a:	f1b9 0f00 	cmp.w	r9, #0
 800103e:	d049      	beq.n	80010d4 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8001040:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001044:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8001046:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001048:	bf04      	itt	eq
 800104a:	2305      	moveq	r3, #5
 800104c:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001050:	2300      	movs	r3, #0
 8001052:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001054:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001056:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001058:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800105a:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800105e:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001062:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001064:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001068:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800106a:	bf58      	it	pl
 800106c:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800106e:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001070:	bf58      	it	pl
 8001072:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001076:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800107a:	bf58      	it	pl
 800107c:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800107e:	68e2      	ldr	r2, [r4, #12]
 8001080:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001084:	d15d      	bne.n	8001142 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001086:	b119      	cbz	r1, 8001090 <HAL_SPI_TransmitReceive+0xa6>
 8001088:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800108a:	b292      	uxth	r2, r2
 800108c:	2a01      	cmp	r2, #1
 800108e:	d106      	bne.n	800109e <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001090:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001094:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001096:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001098:	3b01      	subs	r3, #1
 800109a:	b29b      	uxth	r3, r3
 800109c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800109e:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80010a2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	b9bb      	cbnz	r3, 80010d8 <HAL_SPI_TransmitReceive+0xee>
 80010a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	b9a3      	cbnz	r3, 80010d8 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80010ae:	f8cd 8000 	str.w	r8, [sp]
 80010b2:	463b      	mov	r3, r7
 80010b4:	2201      	movs	r2, #1
 80010b6:	2102      	movs	r1, #2
 80010b8:	4620      	mov	r0, r4
 80010ba:	f7ff fe59 	bl	8000d70 <SPI_WaitFlagStateUntilTimeout>
 80010be:	2800      	cmp	r0, #0
 80010c0:	d135      	bne.n	800112e <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80010c2:	4642      	mov	r2, r8
 80010c4:	4639      	mov	r1, r7
 80010c6:	4620      	mov	r0, r4
 80010c8:	f7ff fe99 	bl	8000dfe <SPI_CheckFlag_BSY>
 80010cc:	2800      	cmp	r0, #0
 80010ce:	d079      	beq.n	80011c4 <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80010d0:	2320      	movs	r3, #32
 80010d2:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80010d4:	2001      	movs	r0, #1
 80010d6:	e02b      	b.n	8001130 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80010d8:	f1b9 0f00 	cmp.w	r9, #0
 80010dc:	d00f      	beq.n	80010fe <HAL_SPI_TransmitReceive+0x114>
 80010de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	b163      	cbz	r3, 80010fe <HAL_SPI_TransmitReceive+0x114>
 80010e4:	6823      	ldr	r3, [r4, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	0791      	lsls	r1, r2, #30
 80010ea:	d508      	bpl.n	80010fe <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80010ec:	f835 2b02 	ldrh.w	r2, [r5], #2
 80010f0:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80010f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010f4:	3b01      	subs	r3, #1
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80010fa:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80010fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001100:	b29b      	uxth	r3, r3
 8001102:	b163      	cbz	r3, 800111e <HAL_SPI_TransmitReceive+0x134>
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	07d2      	lsls	r2, r2, #31
 800110a:	d508      	bpl.n	800111e <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8001112:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001114:	3b01      	subs	r3, #1
 8001116:	b29b      	uxth	r3, r3
 8001118:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800111a:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800111e:	1c78      	adds	r0, r7, #1
 8001120:	d0bf      	beq.n	80010a2 <HAL_SPI_TransmitReceive+0xb8>
 8001122:	f7ff fa5f 	bl	80005e4 <HAL_GetTick>
 8001126:	eba0 0008 	sub.w	r0, r0, r8
 800112a:	4287      	cmp	r7, r0
 800112c:	d8b9      	bhi.n	80010a2 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 800112e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001130:	2301      	movs	r3, #1
 8001132:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001136:	2300      	movs	r3, #0
 8001138:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800113c:	b005      	add	sp, #20
 800113e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001142:	b119      	cbz	r1, 800114c <HAL_SPI_TransmitReceive+0x162>
 8001144:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001146:	b292      	uxth	r2, r2
 8001148:	2a01      	cmp	r2, #1
 800114a:	d106      	bne.n	800115a <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 800114c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001150:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8001152:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001154:	3b01      	subs	r3, #1
 8001156:	b29b      	uxth	r3, r3
 8001158:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800115a:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800115e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001160:	b29b      	uxth	r3, r3
 8001162:	b91b      	cbnz	r3, 800116c <HAL_SPI_TransmitReceive+0x182>
 8001164:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001166:	b29b      	uxth	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0a0      	beq.n	80010ae <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800116c:	f1b9 0f00 	cmp.w	r9, #0
 8001170:	d00f      	beq.n	8001192 <HAL_SPI_TransmitReceive+0x1a8>
 8001172:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001174:	b29b      	uxth	r3, r3
 8001176:	b163      	cbz	r3, 8001192 <HAL_SPI_TransmitReceive+0x1a8>
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	0791      	lsls	r1, r2, #30
 800117e:	d508      	bpl.n	8001192 <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001180:	782a      	ldrb	r2, [r5, #0]
 8001182:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001184:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001186:	3b01      	subs	r3, #1
 8001188:	b29b      	uxth	r3, r3
 800118a:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800118c:	3501      	adds	r5, #1
        txallowed = 0U;
 800118e:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001192:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001194:	b29b      	uxth	r3, r3
 8001196:	b163      	cbz	r3, 80011b2 <HAL_SPI_TransmitReceive+0x1c8>
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	07d2      	lsls	r2, r2, #31
 800119e:	d508      	bpl.n	80011b2 <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 80011a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011a6:	3b01      	subs	r3, #1
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80011ac:	3601      	adds	r6, #1
        txallowed = 1U;
 80011ae:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80011b2:	1c7b      	adds	r3, r7, #1
 80011b4:	d0d3      	beq.n	800115e <HAL_SPI_TransmitReceive+0x174>
 80011b6:	f7ff fa15 	bl	80005e4 <HAL_GetTick>
 80011ba:	eba0 0008 	sub.w	r0, r0, r8
 80011be:	4287      	cmp	r7, r0
 80011c0:	d8cd      	bhi.n	800115e <HAL_SPI_TransmitReceive+0x174>
 80011c2:	e7b4      	b.n	800112e <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80011c4:	68a3      	ldr	r3, [r4, #8]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1b2      	bne.n	8001130 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80011ca:	6823      	ldr	r3, [r4, #0]
 80011cc:	9003      	str	r0, [sp, #12]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	9203      	str	r2, [sp, #12]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	9303      	str	r3, [sp, #12]
 80011d6:	9b03      	ldr	r3, [sp, #12]
 80011d8:	e7aa      	b.n	8001130 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 80011da:	2002      	movs	r0, #2
 80011dc:	e7a8      	b.n	8001130 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 80011de:	2002      	movs	r0, #2
 80011e0:	e7ac      	b.n	800113c <HAL_SPI_TransmitReceive+0x152>

080011e2 <HAL_SPI_Receive>:
{
 80011e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80011e6:	461e      	mov	r6, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80011e8:	6843      	ldr	r3, [r0, #4]
 80011ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80011ee:	4604      	mov	r4, r0
 80011f0:	460d      	mov	r5, r1
 80011f2:	4690      	mov	r8, r2
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80011f4:	d10c      	bne.n	8001210 <HAL_SPI_Receive+0x2e>
 80011f6:	6883      	ldr	r3, [r0, #8]
 80011f8:	b953      	cbnz	r3, 8001210 <HAL_SPI_Receive+0x2e>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 80011fa:	2304      	movs	r3, #4
 80011fc:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 8001200:	4613      	mov	r3, r2
 8001202:	9600      	str	r6, [sp, #0]
 8001204:	460a      	mov	r2, r1
 8001206:	f7ff fef0 	bl	8000fea <HAL_SPI_TransmitReceive>
}
 800120a:	b002      	add	sp, #8
 800120c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8001210:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001214:	2b01      	cmp	r3, #1
 8001216:	f000 8081 	beq.w	800131c <HAL_SPI_Receive+0x13a>
 800121a:	2301      	movs	r3, #1
 800121c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001220:	f7ff f9e0 	bl	80005e4 <HAL_GetTick>
 8001224:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8001226:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800122a:	b2c0      	uxtb	r0, r0
 800122c:	2801      	cmp	r0, #1
 800122e:	d173      	bne.n	8001318 <HAL_SPI_Receive+0x136>
  if((pData == NULL ) || (Size == 0))
 8001230:	2d00      	cmp	r5, #0
 8001232:	d058      	beq.n	80012e6 <HAL_SPI_Receive+0x104>
 8001234:	f1b8 0f00 	cmp.w	r8, #0
 8001238:	d055      	beq.n	80012e6 <HAL_SPI_Receive+0x104>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800123a:	2304      	movs	r3, #4
 800123c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001240:	2300      	movs	r3, #0
 8001242:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001244:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8001246:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 800124a:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800124c:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800124e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001250:	6463      	str	r3, [r4, #68]	; 0x44
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001252:	68a3      	ldr	r3, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001254:	63a5      	str	r5, [r4, #56]	; 0x38
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800125a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferSize  = Size;
 800125c:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 8001260:	bf02      	ittt	eq
 8001262:	681a      	ldreq	r2, [r3, #0]
 8001264:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8001268:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800126e:	bf5e      	ittt	pl
 8001270:	681a      	ldrpl	r2, [r3, #0]
 8001272:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001276:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001278:	68e3      	ldr	r3, [r4, #12]
 800127a:	b1cb      	cbz	r3, 80012b0 <HAL_SPI_Receive+0xce>
    while(hspi->RxXferCount > 0U)
 800127c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800127e:	b29b      	uxth	r3, r3
 8001280:	b1d3      	cbz	r3, 80012b8 <HAL_SPI_Receive+0xd6>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001282:	6823      	ldr	r3, [r4, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	07d2      	lsls	r2, r2, #31
 8001288:	d53c      	bpl.n	8001304 <HAL_SPI_Receive+0x122>
        *((uint16_t*)pData) = hspi->Instance->DR;
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 8001290:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001292:	3b01      	subs	r3, #1
 8001294:	b29b      	uxth	r3, r3
 8001296:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001298:	e7f0      	b.n	800127c <HAL_SPI_Receive+0x9a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	07d0      	lsls	r0, r2, #31
 80012a0:	d51f      	bpl.n	80012e2 <HAL_SPI_Receive+0x100>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 80012a2:	7b1b      	ldrb	r3, [r3, #12]
 80012a4:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 80012a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012aa:	3b01      	subs	r3, #1
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while(hspi->RxXferCount > 0U)
 80012b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1f0      	bne.n	800129a <HAL_SPI_Receive+0xb8>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80012b8:	6863      	ldr	r3, [r4, #4]
 80012ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80012be:	d10b      	bne.n	80012d8 <HAL_SPI_Receive+0xf6>
 80012c0:	68a3      	ldr	r3, [r4, #8]
 80012c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012c6:	d002      	beq.n	80012ce <HAL_SPI_Receive+0xec>
 80012c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012cc:	d104      	bne.n	80012d8 <HAL_SPI_Receive+0xf6>
    __HAL_SPI_DISABLE(hspi);
 80012ce:	6822      	ldr	r2, [r4, #0]
 80012d0:	6813      	ldr	r3, [r2, #0]
 80012d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012d6:	6013      	str	r3, [r2, #0]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80012d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80012da:	3000      	adds	r0, #0
 80012dc:	bf18      	it	ne
 80012de:	2001      	movne	r0, #1
 80012e0:	e001      	b.n	80012e6 <HAL_SPI_Receive+0x104>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80012e2:	b93e      	cbnz	r6, 80012f4 <HAL_SPI_Receive+0x112>
          errorcode = HAL_TIMEOUT;
 80012e4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80012e6:	2301      	movs	r3, #1
 80012e8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80012ec:	2300      	movs	r3, #0
 80012ee:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 80012f2:	e78a      	b.n	800120a <HAL_SPI_Receive+0x28>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80012f4:	1c71      	adds	r1, r6, #1
 80012f6:	d0db      	beq.n	80012b0 <HAL_SPI_Receive+0xce>
 80012f8:	f7ff f974 	bl	80005e4 <HAL_GetTick>
 80012fc:	1bc0      	subs	r0, r0, r7
 80012fe:	4286      	cmp	r6, r0
 8001300:	d8d6      	bhi.n	80012b0 <HAL_SPI_Receive+0xce>
 8001302:	e7ef      	b.n	80012e4 <HAL_SPI_Receive+0x102>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001304:	2e00      	cmp	r6, #0
 8001306:	d0ed      	beq.n	80012e4 <HAL_SPI_Receive+0x102>
 8001308:	1c73      	adds	r3, r6, #1
 800130a:	d0b7      	beq.n	800127c <HAL_SPI_Receive+0x9a>
 800130c:	f7ff f96a 	bl	80005e4 <HAL_GetTick>
 8001310:	1bc0      	subs	r0, r0, r7
 8001312:	4286      	cmp	r6, r0
 8001314:	d8b2      	bhi.n	800127c <HAL_SPI_Receive+0x9a>
 8001316:	e7e5      	b.n	80012e4 <HAL_SPI_Receive+0x102>
    errorcode = HAL_BUSY;
 8001318:	2002      	movs	r0, #2
 800131a:	e7e4      	b.n	80012e6 <HAL_SPI_Receive+0x104>
  __HAL_LOCK(hspi);
 800131c:	2002      	movs	r0, #2
 800131e:	e774      	b.n	800120a <HAL_SPI_Receive+0x28>

08001320 <HAL_SPI_GetState>:
  return hspi->State;
 8001320:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8001324:	4770      	bx	lr
	...

08001328 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001328:	6a03      	ldr	r3, [r0, #32]
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001330:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001332:	6842      	ldr	r2, [r0, #4]
{
 8001334:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001336:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001338:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800133a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800133e:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001340:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001342:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001346:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001348:	4c0c      	ldr	r4, [pc, #48]	; (800137c <TIM_OC1_SetConfig+0x54>)
 800134a:	42a0      	cmp	r0, r4
 800134c:	d009      	beq.n	8001362 <TIM_OC1_SetConfig+0x3a>
 800134e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001352:	42a0      	cmp	r0, r4
 8001354:	d005      	beq.n	8001362 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001356:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001358:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800135a:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800135c:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800135e:	6203      	str	r3, [r0, #32]
} 
 8001360:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001362:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001364:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001366:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800136a:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800136c:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800136e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001372:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001374:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001378:	4322      	orrs	r2, r4
 800137a:	e7ec      	b.n	8001356 <TIM_OC1_SetConfig+0x2e>
 800137c:	40010000 	.word	0x40010000

08001380 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001380:	6a03      	ldr	r3, [r0, #32]
 8001382:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001386:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001388:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800138a:	6842      	ldr	r2, [r0, #4]
{
 800138c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800138e:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001390:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001392:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001396:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001398:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800139a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800139e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80013a2:	4c0e      	ldr	r4, [pc, #56]	; (80013dc <TIM_OC3_SetConfig+0x5c>)
 80013a4:	42a0      	cmp	r0, r4
 80013a6:	d009      	beq.n	80013bc <TIM_OC3_SetConfig+0x3c>
 80013a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80013ac:	42a0      	cmp	r0, r4
 80013ae:	d005      	beq.n	80013bc <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013b0:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80013b2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80013b4:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80013b6:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013b8:	6203      	str	r3, [r0, #32]
}
 80013ba:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80013bc:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80013be:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 80013c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80013c4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80013c8:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80013ca:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80013ce:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80013d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80013d4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 80013d8:	e7ea      	b.n	80013b0 <TIM_OC3_SetConfig+0x30>
 80013da:	bf00      	nop
 80013dc:	40010000 	.word	0x40010000

080013e0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80013e0:	6a03      	ldr	r3, [r0, #32]
 80013e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013e6:	6203      	str	r3, [r0, #32]
{
 80013e8:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013ea:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80013ec:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80013ee:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80013f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80013f2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80013f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80013fa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80013fc:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001400:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001404:	4d09      	ldr	r5, [pc, #36]	; (800142c <TIM_OC4_SetConfig+0x4c>)
 8001406:	42a8      	cmp	r0, r5
 8001408:	d009      	beq.n	800141e <TIM_OC4_SetConfig+0x3e>
 800140a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800140e:	42a8      	cmp	r0, r5
 8001410:	d005      	beq.n	800141e <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001412:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001414:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001416:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001418:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800141a:	6204      	str	r4, [r0, #32]
}
 800141c:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800141e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001424:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001428:	e7f3      	b.n	8001412 <TIM_OC4_SetConfig+0x32>
 800142a:	bf00      	nop
 800142c:	40010000 	.word	0x40010000

08001430 <HAL_TIM_Base_Start>:
  __HAL_TIM_ENABLE(htim);
 8001430:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001432:	2302      	movs	r3, #2
 8001434:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE(htim);
 8001438:	6813      	ldr	r3, [r2, #0]
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 8001440:	2301      	movs	r3, #1
 8001442:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8001446:	2000      	movs	r0, #0
 8001448:	4770      	bx	lr

0800144a <HAL_TIM_PWM_MspInit>:
 800144a:	4770      	bx	lr

0800144c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800144c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001450:	2b01      	cmp	r3, #1
{
 8001452:	b570      	push	{r4, r5, r6, lr}
 8001454:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001458:	d01c      	beq.n	8001494 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800145a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 800145e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001460:	2201      	movs	r2, #1
 8001462:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8001466:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001468:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800146c:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001470:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001472:	680a      	ldr	r2, [r1, #0]
 8001474:	2a40      	cmp	r2, #64	; 0x40
 8001476:	d079      	beq.n	800156c <HAL_TIM_ConfigClockSource+0x120>
 8001478:	d819      	bhi.n	80014ae <HAL_TIM_ConfigClockSource+0x62>
 800147a:	2a10      	cmp	r2, #16
 800147c:	f000 8093 	beq.w	80015a6 <HAL_TIM_ConfigClockSource+0x15a>
 8001480:	d80a      	bhi.n	8001498 <HAL_TIM_ConfigClockSource+0x4c>
 8001482:	2a00      	cmp	r2, #0
 8001484:	f000 8089 	beq.w	800159a <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001488:	2301      	movs	r3, #1
 800148a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800148e:	2300      	movs	r3, #0
 8001490:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001494:	4618      	mov	r0, r3
}
 8001496:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001498:	2a20      	cmp	r2, #32
 800149a:	f000 808a 	beq.w	80015b2 <HAL_TIM_ConfigClockSource+0x166>
 800149e:	2a30      	cmp	r2, #48	; 0x30
 80014a0:	d1f2      	bne.n	8001488 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80014a2:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80014a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80014a8:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80014ac:	e036      	b.n	800151c <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80014ae:	2a70      	cmp	r2, #112	; 0x70
 80014b0:	d036      	beq.n	8001520 <HAL_TIM_ConfigClockSource+0xd4>
 80014b2:	d81b      	bhi.n	80014ec <HAL_TIM_ConfigClockSource+0xa0>
 80014b4:	2a50      	cmp	r2, #80	; 0x50
 80014b6:	d042      	beq.n	800153e <HAL_TIM_ConfigClockSource+0xf2>
 80014b8:	2a60      	cmp	r2, #96	; 0x60
 80014ba:	d1e5      	bne.n	8001488 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80014bc:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80014be:	684d      	ldr	r5, [r1, #4]
 80014c0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80014c2:	f024 0410 	bic.w	r4, r4, #16
 80014c6:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014c8:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80014ca:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80014cc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80014d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80014d4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80014d8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80014dc:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80014de:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80014e0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80014e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80014e6:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80014ea:	e017      	b.n	800151c <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80014ec:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80014f0:	d011      	beq.n	8001516 <HAL_TIM_ConfigClockSource+0xca>
 80014f2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80014f6:	d1c7      	bne.n	8001488 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80014f8:	688a      	ldr	r2, [r1, #8]
 80014fa:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80014fc:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80014fe:	68c9      	ldr	r1, [r1, #12]
 8001500:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001502:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001506:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800150a:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800150c:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001514:	e002      	b.n	800151c <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	e7b3      	b.n	8001488 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001520:	688a      	ldr	r2, [r1, #8]
 8001522:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001524:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001526:	68c9      	ldr	r1, [r1, #12]
 8001528:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800152a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800152e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001532:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001534:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001536:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001538:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800153c:	e7ee      	b.n	800151c <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800153e:	684c      	ldr	r4, [r1, #4]
 8001540:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001542:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001544:	6a1d      	ldr	r5, [r3, #32]
 8001546:	f025 0501 	bic.w	r5, r5, #1
 800154a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800154c:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800154e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001552:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001556:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800155a:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800155c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800155e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001560:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001562:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001566:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800156a:	e7d7      	b.n	800151c <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800156c:	684c      	ldr	r4, [r1, #4]
 800156e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001570:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001572:	6a1d      	ldr	r5, [r3, #32]
 8001574:	f025 0501 	bic.w	r5, r5, #1
 8001578:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800157a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800157c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001580:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001584:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001588:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800158a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800158c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800158e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001590:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001594:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001598:	e7c0      	b.n	800151c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800159a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800159c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80015a0:	f042 0207 	orr.w	r2, r2, #7
 80015a4:	e7ba      	b.n	800151c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80015a6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80015ac:	f042 0217 	orr.w	r2, r2, #23
 80015b0:	e7b4      	b.n	800151c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80015b2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80015b8:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80015bc:	e7ae      	b.n	800151c <HAL_TIM_ConfigClockSource+0xd0>
	...

080015c0 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80015c0:	4a2e      	ldr	r2, [pc, #184]	; (800167c <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80015c2:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80015c4:	4290      	cmp	r0, r2
 80015c6:	d012      	beq.n	80015ee <TIM_Base_SetConfig+0x2e>
 80015c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80015cc:	d00f      	beq.n	80015ee <TIM_Base_SetConfig+0x2e>
 80015ce:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80015d2:	4290      	cmp	r0, r2
 80015d4:	d00b      	beq.n	80015ee <TIM_Base_SetConfig+0x2e>
 80015d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015da:	4290      	cmp	r0, r2
 80015dc:	d007      	beq.n	80015ee <TIM_Base_SetConfig+0x2e>
 80015de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015e2:	4290      	cmp	r0, r2
 80015e4:	d003      	beq.n	80015ee <TIM_Base_SetConfig+0x2e>
 80015e6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80015ea:	4290      	cmp	r0, r2
 80015ec:	d11d      	bne.n	800162a <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80015ee:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80015f4:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80015f6:	4a21      	ldr	r2, [pc, #132]	; (800167c <TIM_Base_SetConfig+0xbc>)
 80015f8:	4290      	cmp	r0, r2
 80015fa:	d104      	bne.n	8001606 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015fc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80015fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001602:	4313      	orrs	r3, r2
 8001604:	e028      	b.n	8001658 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001606:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800160a:	d0f7      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 800160c:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <TIM_Base_SetConfig+0xc0>)
 800160e:	4290      	cmp	r0, r2
 8001610:	d0f4      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 8001612:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001616:	4290      	cmp	r0, r2
 8001618:	d0f0      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 800161a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800161e:	4290      	cmp	r0, r2
 8001620:	d0ec      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 8001622:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001626:	4290      	cmp	r0, r2
 8001628:	d0e8      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 800162a:	4a16      	ldr	r2, [pc, #88]	; (8001684 <TIM_Base_SetConfig+0xc4>)
 800162c:	4290      	cmp	r0, r2
 800162e:	d0e5      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 8001630:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001634:	4290      	cmp	r0, r2
 8001636:	d0e1      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 8001638:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800163c:	4290      	cmp	r0, r2
 800163e:	d0dd      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 8001640:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001644:	4290      	cmp	r0, r2
 8001646:	d0d9      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 8001648:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800164c:	4290      	cmp	r0, r2
 800164e:	d0d5      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
 8001650:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001654:	4290      	cmp	r0, r2
 8001656:	d0d1      	beq.n	80015fc <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8001658:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800165a:	688b      	ldr	r3, [r1, #8]
 800165c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800165e:	680b      	ldr	r3, [r1, #0]
 8001660:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <TIM_Base_SetConfig+0xbc>)
 8001664:	4298      	cmp	r0, r3
 8001666:	d006      	beq.n	8001676 <TIM_Base_SetConfig+0xb6>
 8001668:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800166c:	4298      	cmp	r0, r3
 800166e:	d002      	beq.n	8001676 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8001670:	2301      	movs	r3, #1
 8001672:	6143      	str	r3, [r0, #20]
}
 8001674:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001676:	690b      	ldr	r3, [r1, #16]
 8001678:	6303      	str	r3, [r0, #48]	; 0x30
 800167a:	e7f9      	b.n	8001670 <TIM_Base_SetConfig+0xb0>
 800167c:	40010000 	.word	0x40010000
 8001680:	40000400 	.word	0x40000400
 8001684:	40014000 	.word	0x40014000

08001688 <HAL_TIM_Base_Init>:
{ 
 8001688:	b510      	push	{r4, lr}
  if(htim == NULL)
 800168a:	4604      	mov	r4, r0
 800168c:	b1a0      	cbz	r0, 80016b8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800168e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001692:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001696:	b91b      	cbnz	r3, 80016a0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001698:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800169c:	f000 fda2 	bl	80021e4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80016a0:	2302      	movs	r3, #2
 80016a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80016a6:	6820      	ldr	r0, [r4, #0]
 80016a8:	1d21      	adds	r1, r4, #4
 80016aa:	f7ff ff89 	bl	80015c0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80016b4:	2000      	movs	r0, #0
 80016b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016b8:	2001      	movs	r0, #1
}
 80016ba:	bd10      	pop	{r4, pc}

080016bc <HAL_TIM_PWM_Init>:
{
 80016bc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80016be:	4604      	mov	r4, r0
 80016c0:	b1a0      	cbz	r0, 80016ec <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80016c2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80016c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016ca:	b91b      	cbnz	r3, 80016d4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80016cc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80016d0:	f7ff febb 	bl	800144a <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 80016d4:	2302      	movs	r3, #2
 80016d6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80016da:	6820      	ldr	r0, [r4, #0]
 80016dc:	1d21      	adds	r1, r4, #4
 80016de:	f7ff ff6f 	bl	80015c0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80016e2:	2301      	movs	r3, #1
 80016e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80016e8:	2000      	movs	r0, #0
 80016ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016ec:	2001      	movs	r0, #1
}  
 80016ee:	bd10      	pop	{r4, pc}

080016f0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016f0:	6a03      	ldr	r3, [r0, #32]
 80016f2:	f023 0310 	bic.w	r3, r3, #16
 80016f6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80016f8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80016fa:	6842      	ldr	r2, [r0, #4]
{
 80016fc:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 80016fe:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001700:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001702:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001706:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800170a:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800170c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001710:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001714:	4c0d      	ldr	r4, [pc, #52]	; (800174c <TIM_OC2_SetConfig+0x5c>)
 8001716:	42a0      	cmp	r0, r4
 8001718:	d009      	beq.n	800172e <TIM_OC2_SetConfig+0x3e>
 800171a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800171e:	42a0      	cmp	r0, r4
 8001720:	d005      	beq.n	800172e <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8001722:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001724:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001726:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001728:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800172a:	6203      	str	r3, [r0, #32]
}
 800172c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800172e:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001730:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001736:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800173a:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800173c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001740:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001746:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 800174a:	e7ea      	b.n	8001722 <TIM_OC2_SetConfig+0x32>
 800174c:	40010000 	.word	0x40010000

08001750 <HAL_TIM_PWM_ConfigChannel>:
{
 8001750:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001752:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001756:	2b01      	cmp	r3, #1
{
 8001758:	4604      	mov	r4, r0
 800175a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800175e:	d025      	beq.n	80017ac <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001760:	2301      	movs	r3, #1
 8001762:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001766:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 800176a:	2a0c      	cmp	r2, #12
 800176c:	d818      	bhi.n	80017a0 <HAL_TIM_PWM_ConfigChannel+0x50>
 800176e:	e8df f002 	tbb	[pc, r2]
 8001772:	1707      	.short	0x1707
 8001774:	171e1717 	.word	0x171e1717
 8001778:	172f1717 	.word	0x172f1717
 800177c:	1717      	.short	0x1717
 800177e:	40          	.byte	0x40
 800177f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001780:	6820      	ldr	r0, [r4, #0]
 8001782:	f7ff fdd1 	bl	8001328 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001786:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001788:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800178a:	699a      	ldr	r2, [r3, #24]
 800178c:	f042 0208 	orr.w	r2, r2, #8
 8001790:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001792:	699a      	ldr	r2, [r3, #24]
 8001794:	f022 0204 	bic.w	r2, r2, #4
 8001798:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800179a:	699a      	ldr	r2, [r3, #24]
 800179c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800179e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80017a0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80017a2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80017a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80017a8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80017ac:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80017ae:	6820      	ldr	r0, [r4, #0]
 80017b0:	f7ff ff9e 	bl	80016f0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80017b4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80017b6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80017c8:	699a      	ldr	r2, [r3, #24]
 80017ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80017ce:	e7e6      	b.n	800179e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80017d0:	6820      	ldr	r0, [r4, #0]
 80017d2:	f7ff fdd5 	bl	8001380 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80017d6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80017d8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80017da:	69da      	ldr	r2, [r3, #28]
 80017dc:	f042 0208 	orr.w	r2, r2, #8
 80017e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80017e2:	69da      	ldr	r2, [r3, #28]
 80017e4:	f022 0204 	bic.w	r2, r2, #4
 80017e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80017ea:	69da      	ldr	r2, [r3, #28]
 80017ec:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80017ee:	61da      	str	r2, [r3, #28]
    break;
 80017f0:	e7d6      	b.n	80017a0 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80017f2:	6820      	ldr	r0, [r4, #0]
 80017f4:	f7ff fdf4 	bl	80013e0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80017f8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80017fa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80017fc:	69da      	ldr	r2, [r3, #28]
 80017fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001802:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800180a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800180c:	69da      	ldr	r2, [r3, #28]
 800180e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001812:	e7ec      	b.n	80017ee <HAL_TIM_PWM_ConfigChannel+0x9e>

08001814 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001814:	6a03      	ldr	r3, [r0, #32]
{
 8001816:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001818:	2401      	movs	r4, #1
 800181a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800181c:	ea23 0304 	bic.w	r3, r3, r4
 8001820:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001822:	6a03      	ldr	r3, [r0, #32]
 8001824:	408a      	lsls	r2, r1
 8001826:	431a      	orrs	r2, r3
 8001828:	6202      	str	r2, [r0, #32]
 800182a:	bd10      	pop	{r4, pc}

0800182c <HAL_TIM_PWM_Start>:
{
 800182c:	b510      	push	{r4, lr}
 800182e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001830:	2201      	movs	r2, #1
 8001832:	6800      	ldr	r0, [r0, #0]
 8001834:	f7ff ffee 	bl	8001814 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001838:	6823      	ldr	r3, [r4, #0]
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <HAL_TIM_PWM_Start+0x30>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d003      	beq.n	8001848 <HAL_TIM_PWM_Start+0x1c>
 8001840:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001844:	4293      	cmp	r3, r2
 8001846:	d103      	bne.n	8001850 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8001848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800184a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800184e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	f042 0201 	orr.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]
} 
 8001858:	2000      	movs	r0, #0
 800185a:	bd10      	pop	{r4, pc}
 800185c:	40010000 	.word	0x40010000

08001860 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001860:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001864:	2b01      	cmp	r3, #1
{
 8001866:	b510      	push	{r4, lr}
 8001868:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800186c:	d018      	beq.n	80018a0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800186e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001872:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001874:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001876:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001878:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800187a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800187e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	4322      	orrs	r2, r4
 8001884:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800188c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	430a      	orrs	r2, r1
 8001892:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001894:	2301      	movs	r3, #1
 8001896:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800189a:	2300      	movs	r3, #0
 800189c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80018a0:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80018a2:	bd10      	pop	{r4, pc}

080018a4 <convertCANid2Reg.constprop.1>:
/* Konverter CAN-ID til leselig */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
  uint8_t wipSIDL = 0;
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 80018a4:	2902      	cmp	r1, #2
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <convertCANid2Reg.constprop.1+0x34>)
 80018a8:	d110      	bne.n	80018cc <convertCANid2Reg.constprop.1+0x28>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
 80018aa:	0a02      	lsrs	r2, r0, #8
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 80018ac:	70d8      	strb	r0, [r3, #3]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
 80018ae:	0c00      	lsrs	r0, r0, #16
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 80018b0:	f000 0103 	and.w	r1, r0, #3
    tempPassedInID = tempPassedInID << 3;
 80018b4:	00c0      	lsls	r0, r0, #3
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 80018b6:	709a      	strb	r2, [r3, #2]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 80018b8:	f000 02e0 	and.w	r2, r0, #224	; 0xe0
 80018bc:	430a      	orrs	r2, r1
    wipSIDL = wipSIDL + 0x08;
 80018be:	3208      	adds	r2, #8
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 80018c0:	f022 0214 	bic.w	r2, r2, #20
 80018c4:	705a      	strb	r2, [r3, #1]
  {
    passedIdReg->tempEID8 = 0;
    passedIdReg->tempEID0 = 0;
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
 80018c6:	0a00      	lsrs	r0, r0, #8
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80018c8:	7018      	strb	r0, [r3, #0]
 80018ca:	4770      	bx	lr
    passedIdReg->tempEID8 = 0;
 80018cc:	2200      	movs	r2, #0
    tempPassedInID = tempPassedInID << 5;
 80018ce:	0140      	lsls	r0, r0, #5
    passedIdReg->tempEID8 = 0;
 80018d0:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80018d2:	70da      	strb	r2, [r3, #3]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80018d4:	7058      	strb	r0, [r3, #1]
 80018d6:	e7f6      	b.n	80018c6 <convertCANid2Reg.constprop.1+0x22>
 80018d8:	2000002c 	.word	0x2000002c

080018dc <CANSPI_Initialize>:
{
 80018dc:	b530      	push	{r4, r5, lr}
 80018de:	b089      	sub	sp, #36	; 0x24
  RXM0reg.RXM0SIDH = 0x00;
 80018e0:	2400      	movs	r4, #0
  RXF1reg.RXF1SIDL = 0x08;      //Extended Filter
 80018e2:	2508      	movs	r5, #8
  RXM0reg.RXM0SIDH = 0x00;
 80018e4:	f88d 4018 	strb.w	r4, [sp, #24]
  RXM0reg.RXM0SIDL = 0x00;
 80018e8:	f88d 4019 	strb.w	r4, [sp, #25]
  RXM0reg.RXM0EID8 = 0x00;
 80018ec:	f88d 401a 	strb.w	r4, [sp, #26]
  RXM0reg.RXM0EID0 = 0x00;
 80018f0:	f88d 401b 	strb.w	r4, [sp, #27]
  RXM1reg.RXM1SIDH = 0x00;
 80018f4:	f88d 401c 	strb.w	r4, [sp, #28]
  RXM1reg.RXM1SIDL = 0x00;
 80018f8:	f88d 401d 	strb.w	r4, [sp, #29]
  RXM1reg.RXM1EID8 = 0x00;
 80018fc:	f88d 401e 	strb.w	r4, [sp, #30]
  RXM1reg.RXM1EID0 = 0x00;
 8001900:	f88d 401f 	strb.w	r4, [sp, #31]
  RXF0reg.RXF0SIDH = 0x00;
 8001904:	f88d 4000 	strb.w	r4, [sp]
  RXF0reg.RXF0SIDL = 0x00;      //Standard Filter
 8001908:	f88d 4001 	strb.w	r4, [sp, #1]
  RXF0reg.RXF0EID8 = 0x00;
 800190c:	f88d 4002 	strb.w	r4, [sp, #2]
  RXF0reg.RXF0EID0 = 0x00;
 8001910:	f88d 4003 	strb.w	r4, [sp, #3]
  RXF1reg.RXF1SIDH = 0x00;
 8001914:	f88d 4004 	strb.w	r4, [sp, #4]
  RXF1reg.RXF1SIDL = 0x08;      //Extended Filter
 8001918:	f88d 5005 	strb.w	r5, [sp, #5]
  RXF1reg.RXF1EID8 = 0x00;
 800191c:	f88d 4006 	strb.w	r4, [sp, #6]
  RXF1reg.RXF1EID0 = 0x00;
 8001920:	f88d 4007 	strb.w	r4, [sp, #7]
  RXF2reg.RXF2SIDH = 0x00;
 8001924:	f88d 4008 	strb.w	r4, [sp, #8]
  RXF2reg.RXF2SIDL = 0x00;
 8001928:	f88d 4009 	strb.w	r4, [sp, #9]
  RXF2reg.RXF2EID8 = 0x00;
 800192c:	f88d 400a 	strb.w	r4, [sp, #10]
  RXF2reg.RXF2EID0 = 0x00;
 8001930:	f88d 400b 	strb.w	r4, [sp, #11]
  RXF3reg.RXF3SIDH = 0x00;
 8001934:	f88d 400c 	strb.w	r4, [sp, #12]
  RXF3reg.RXF3SIDL = 0x00;
 8001938:	f88d 400d 	strb.w	r4, [sp, #13]
  RXF3reg.RXF3EID8 = 0x00;
 800193c:	f88d 400e 	strb.w	r4, [sp, #14]
  RXF3reg.RXF3EID0 = 0x00;
 8001940:	f88d 400f 	strb.w	r4, [sp, #15]
  RXF4reg.RXF4SIDH = 0x00;
 8001944:	f88d 4010 	strb.w	r4, [sp, #16]
  RXF4reg.RXF4SIDL = 0x00;
 8001948:	f88d 4011 	strb.w	r4, [sp, #17]
  RXF4reg.RXF4EID8 = 0x00;
 800194c:	f88d 4012 	strb.w	r4, [sp, #18]
  RXF4reg.RXF4EID0 = 0x00;
 8001950:	f88d 4013 	strb.w	r4, [sp, #19]
  RXF5reg.RXF5SIDH = 0x00;
 8001954:	f88d 4014 	strb.w	r4, [sp, #20]
  RXF5reg.RXF5SIDL = 0x08;
 8001958:	f88d 5015 	strb.w	r5, [sp, #21]
  RXF5reg.RXF5EID8 = 0x00;
 800195c:	f88d 4016 	strb.w	r4, [sp, #22]
  RXF5reg.RXF5EID0 = 0x00;
 8001960:	f88d 4017 	strb.w	r4, [sp, #23]
  if(!MCP2515_Initialize())
 8001964:	f000 f906 	bl	8001b74 <MCP2515_Initialize>
 8001968:	b910      	cbnz	r0, 8001970 <CANSPI_Initialize+0x94>
    return false;
 800196a:	2000      	movs	r0, #0
}
 800196c:	b009      	add	sp, #36	; 0x24
 800196e:	bd30      	pop	{r4, r5, pc}
  if(!MCP2515_SetConfigMode())
 8001970:	f000 f972 	bl	8001c58 <MCP2515_SetConfigMode>
 8001974:	2800      	cmp	r0, #0
 8001976:	d0f8      	beq.n	800196a <CANSPI_Initialize+0x8e>
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8001978:	aa06      	add	r2, sp, #24
 800197a:	2123      	movs	r1, #35	; 0x23
 800197c:	2020      	movs	r0, #32
 800197e:	f000 f995 	bl	8001cac <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8001982:	aa07      	add	r2, sp, #28
 8001984:	2127      	movs	r1, #39	; 0x27
 8001986:	2024      	movs	r0, #36	; 0x24
 8001988:	f000 f990 	bl	8001cac <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800198c:	466a      	mov	r2, sp
 800198e:	2103      	movs	r1, #3
 8001990:	4620      	mov	r0, r4
 8001992:	f000 f98b 	bl	8001cac <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8001996:	aa01      	add	r2, sp, #4
 8001998:	2107      	movs	r1, #7
 800199a:	2004      	movs	r0, #4
 800199c:	f000 f986 	bl	8001cac <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80019a0:	aa02      	add	r2, sp, #8
 80019a2:	210b      	movs	r1, #11
 80019a4:	4628      	mov	r0, r5
 80019a6:	f000 f981 	bl	8001cac <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80019aa:	aa03      	add	r2, sp, #12
 80019ac:	2113      	movs	r1, #19
 80019ae:	2010      	movs	r0, #16
 80019b0:	f000 f97c 	bl	8001cac <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80019b4:	aa04      	add	r2, sp, #16
 80019b6:	2117      	movs	r1, #23
 80019b8:	2014      	movs	r0, #20
 80019ba:	f000 f977 	bl	8001cac <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80019be:	aa05      	add	r2, sp, #20
 80019c0:	211b      	movs	r1, #27
 80019c2:	2018      	movs	r0, #24
 80019c4:	f000 f972 	bl	8001cac <MCP2515_WriteByteSequence>
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80019c8:	2104      	movs	r1, #4
 80019ca:	2060      	movs	r0, #96	; 0x60
 80019cc:	f000 f926 	bl	8001c1c <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80019d0:	2101      	movs	r1, #1
 80019d2:	2070      	movs	r0, #112	; 0x70
 80019d4:	f000 f922 	bl	8001c1c <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_CANINTE, 0x03);		//Enable interrupt on RXB0/RXB1
 80019d8:	2103      	movs	r1, #3
 80019da:	202b      	movs	r0, #43	; 0x2b
 80019dc:	f000 f91e 	bl	8001c1c <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 80019e0:	4621      	mov	r1, r4
 80019e2:	202a      	movs	r0, #42	; 0x2a
 80019e4:	f000 f91a 	bl	8001c1c <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_CNF2, 0xE0);
 80019e8:	21e0      	movs	r1, #224	; 0xe0
 80019ea:	2029      	movs	r0, #41	; 0x29
 80019ec:	f000 f916 	bl	8001c1c <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_CNF3, 0x82);
 80019f0:	2182      	movs	r1, #130	; 0x82
 80019f2:	2028      	movs	r0, #40	; 0x28
 80019f4:	f000 f912 	bl	8001c1c <MCP2515_WriteByte>
  if(!MCP2515_SetNormalMode())
 80019f8:	f000 f943 	bl	8001c82 <MCP2515_SetNormalMode>
    return false;
 80019fc:	3000      	adds	r0, #0
 80019fe:	bf18      	it	ne
 8001a00:	2001      	movne	r0, #1
 8001a02:	e7b3      	b.n	800196c <CANSPI_Initialize+0x90>

08001a04 <CANSPI_Transmit>:
{
 8001a04:	b570      	push	{r4, r5, r6, lr}
  idReg.tempSIDH = 0;
 8001a06:	4e1e      	ldr	r6, [pc, #120]	; (8001a80 <CANSPI_Transmit+0x7c>)
 8001a08:	2500      	movs	r5, #0
{
 8001a0a:	4604      	mov	r4, r0
  idReg.tempSIDH = 0;
 8001a0c:	7035      	strb	r5, [r6, #0]
  idReg.tempSIDL = 0;
 8001a0e:	7075      	strb	r5, [r6, #1]
  idReg.tempEID8 = 0;
 8001a10:	70b5      	strb	r5, [r6, #2]
  idReg.tempEID0 = 0;
 8001a12:	70f5      	strb	r5, [r6, #3]
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8001a14:	f000 f9b2 	bl	8001d7c <MCP2515_ReadStatus>
 8001a18:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <CANSPI_Transmit+0x80>)
  if (ctrlStatus.TXB0REQ != 1)
 8001a1a:	0741      	lsls	r1, r0, #29
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8001a1c:	7018      	strb	r0, [r3, #0]
  if (ctrlStatus.TXB0REQ != 1)
 8001a1e:	d40f      	bmi.n	8001a40 <CANSPI_Transmit+0x3c>
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8001a20:	7821      	ldrb	r1, [r4, #0]
 8001a22:	6860      	ldr	r0, [r4, #4]
 8001a24:	f7ff ff3e 	bl	80018a4 <convertCANid2Reg.constprop.1>
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8001a28:	2040      	movs	r0, #64	; 0x40
 8001a2a:	f104 0309 	add.w	r3, r4, #9
 8001a2e:	7a22      	ldrb	r2, [r4, #8]
 8001a30:	4631      	mov	r1, r6
 8001a32:	f000 f961 	bl	8001cf8 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8001a36:	2081      	movs	r0, #129	; 0x81
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8001a38:	f000 f98a 	bl	8001d50 <MCP2515_RequestToSend>
    returnValue = 1;
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	bd70      	pop	{r4, r5, r6, pc}
  else if (ctrlStatus.TXB1REQ != 1)
 8001a40:	06c2      	lsls	r2, r0, #27
 8001a42:	d40c      	bmi.n	8001a5e <CANSPI_Transmit+0x5a>
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8001a44:	7821      	ldrb	r1, [r4, #0]
 8001a46:	6860      	ldr	r0, [r4, #4]
 8001a48:	f7ff ff2c 	bl	80018a4 <convertCANid2Reg.constprop.1>
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8001a4c:	2042      	movs	r0, #66	; 0x42
 8001a4e:	f104 0309 	add.w	r3, r4, #9
 8001a52:	7a22      	ldrb	r2, [r4, #8]
 8001a54:	4631      	mov	r1, r6
 8001a56:	f000 f94f 	bl	8001cf8 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8001a5a:	2082      	movs	r0, #130	; 0x82
 8001a5c:	e7ec      	b.n	8001a38 <CANSPI_Transmit+0x34>
  else if (ctrlStatus.TXB2REQ != 1)
 8001a5e:	0643      	lsls	r3, r0, #25
 8001a60:	d40c      	bmi.n	8001a7c <CANSPI_Transmit+0x78>
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8001a62:	7821      	ldrb	r1, [r4, #0]
 8001a64:	6860      	ldr	r0, [r4, #4]
 8001a66:	f7ff ff1d 	bl	80018a4 <convertCANid2Reg.constprop.1>
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8001a6a:	2044      	movs	r0, #68	; 0x44
 8001a6c:	f104 0309 	add.w	r3, r4, #9
 8001a70:	7a22      	ldrb	r2, [r4, #8]
 8001a72:	4631      	mov	r1, r6
 8001a74:	f000 f940 	bl	8001cf8 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8001a78:	2084      	movs	r0, #132	; 0x84
 8001a7a:	e7dd      	b.n	8001a38 <CANSPI_Transmit+0x34>
  uint8_t returnValue = 0;
 8001a7c:	4628      	mov	r0, r5
}
 8001a7e:	bd70      	pop	{r4, r5, r6, pc}
 8001a80:	2000002c 	.word	0x2000002c
 8001a84:	20000028 	.word	0x20000028

08001a88 <CANSPI_Receive>:
{
 8001a88:	b530      	push	{r4, r5, lr}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	4604      	mov	r4, r0
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8001a8e:	f000 f98d 	bl	8001dac <MCP2515_GetRxStatus>
 8001a92:	4605      	mov	r5, r0
  if (rxStatus.rxBuffer != 0)
 8001a94:	f010 00c0 	ands.w	r0, r0, #192	; 0xc0
 8001a98:	d040      	beq.n	8001b1c <CANSPI_Receive+0x94>
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8001a9a:	066b      	lsls	r3, r5, #25
 8001a9c:	d540      	bpl.n	8001b20 <CANSPI_Receive+0x98>
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001a9e:	220d      	movs	r2, #13
 8001aa0:	4669      	mov	r1, sp
 8001aa2:	2090      	movs	r0, #144	; 0x90
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001aa4:	f000 f89a 	bl	8001bdc <MCP2515_ReadRxSequence>
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8001aa8:	f005 0518 	and.w	r5, r5, #24
 8001aac:	2d10      	cmp	r5, #16
 8001aae:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001ab2:	f89d 1000 	ldrb.w	r1, [sp]
 8001ab6:	d139      	bne.n	8001b2c <CANSPI_Receive+0xa4>
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8001ab8:	2202      	movs	r2, #2
 8001aba:	7022      	strb	r2, [r4, #0]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8001abc:	095a      	lsrs	r2, r3, #5
 8001abe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8001aca:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8001ace:	eb02 2203 	add.w	r2, r2, r3, lsl #8
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8001ad2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001ad6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8001ada:	6063      	str	r3, [r4, #4]
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8001adc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001ae0:	7223      	strb	r3, [r4, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8001ae2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001ae6:	7263      	strb	r3, [r4, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8001ae8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001aec:	72a3      	strb	r3, [r4, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8001aee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001af2:	72e3      	strb	r3, [r4, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8001af4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001af8:	7323      	strb	r3, [r4, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8001afa:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001afe:	7363      	strb	r3, [r4, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8001b00:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001b04:	73a3      	strb	r3, [r4, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8001b06:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001b0a:	73e3      	strb	r3, [r4, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8001b0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001b10:	7423      	strb	r3, [r4, #16]
    MCP2515_WriteByte(MCP2515_CANINTF,0x00); // Resetter flagg
 8001b12:	202c      	movs	r0, #44	; 0x2c
 8001b14:	2100      	movs	r1, #0
 8001b16:	f000 f881 	bl	8001c1c <MCP2515_WriteByte>
    returnValue = 1;
 8001b1a:	2001      	movs	r0, #1
}
 8001b1c:	b005      	add	sp, #20
 8001b1e:	bd30      	pop	{r4, r5, pc}
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8001b20:	2880      	cmp	r0, #128	; 0x80
 8001b22:	d1c1      	bne.n	8001aa8 <CANSPI_Receive+0x20>
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001b24:	220d      	movs	r2, #13
 8001b26:	4669      	mov	r1, sp
 8001b28:	2094      	movs	r0, #148	; 0x94
 8001b2a:	e7bb      	b.n	8001aa4 <CANSPI_Receive+0x1c>
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8001b2c:	2201      	movs	r2, #1
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8001b2e:	095b      	lsrs	r3, r3, #5
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8001b30:	7022      	strb	r2, [r4, #0]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8001b32:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001b36:	e7d0      	b.n	8001ada <CANSPI_Receive+0x52>

08001b38 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* E */
static void SPI_Tx(uint8_t data)
{
 8001b38:	b507      	push	{r0, r1, r2, lr}
 8001b3a:	a902      	add	r1, sp, #8
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8001b3c:	230a      	movs	r3, #10
{
 8001b3e:	f801 0d01 	strb.w	r0, [r1, #-1]!
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8001b42:	2201      	movs	r2, #1
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <SPI_Tx+0x18>)
 8001b46:	f7ff f9a7 	bl	8000e98 <HAL_SPI_Transmit>
}
 8001b4a:	b003      	add	sp, #12
 8001b4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b50:	2000006c 	.word	0x2000006c

08001b54 <SPI_Rx>:
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
}

/* SPI Rx Wrapper funksjon*/
static uint8_t SPI_Rx(void)
{
 8001b54:	b507      	push	{r0, r1, r2, lr}
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8001b56:	230a      	movs	r3, #10
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f10d 0107 	add.w	r1, sp, #7
 8001b5e:	4804      	ldr	r0, [pc, #16]	; (8001b70 <SPI_Rx+0x1c>)
 8001b60:	f7ff fb3f 	bl	80011e2 <HAL_SPI_Receive>
  return retVal;
}
 8001b64:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001b68:	b003      	add	sp, #12
 8001b6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b6e:	bf00      	nop
 8001b70:	2000006c 	.word	0x2000006c

08001b74 <MCP2515_Initialize>:
{
 8001b74:	b538      	push	{r3, r4, r5, lr}
  MCP2515_CS_HIGH();    
 8001b76:	2201      	movs	r2, #1
 8001b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b7c:	4807      	ldr	r0, [pc, #28]	; (8001b9c <MCP2515_Initialize+0x28>)
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001b7e:	4d08      	ldr	r5, [pc, #32]	; (8001ba0 <MCP2515_Initialize+0x2c>)
  MCP2515_CS_HIGH();    
 8001b80:	f7fe fea0 	bl	80008c4 <HAL_GPIO_WritePin>
 8001b84:	240a      	movs	r4, #10
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001b86:	4628      	mov	r0, r5
 8001b88:	f7ff fbca 	bl	8001320 <HAL_SPI_GetState>
 8001b8c:	2801      	cmp	r0, #1
 8001b8e:	d004      	beq.n	8001b9a <MCP2515_Initialize+0x26>
 8001b90:	3c01      	subs	r4, #1
  } while(loop > 0); 
 8001b92:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001b96:	d1f6      	bne.n	8001b86 <MCP2515_Initialize+0x12>
  return false;
 8001b98:	4620      	mov	r0, r4
}
 8001b9a:	bd38      	pop	{r3, r4, r5, pc}
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	2000006c 	.word	0x2000006c

08001ba4 <MCP2515_ReadByte>:
{
 8001ba4:	b538      	push	{r3, r4, r5, lr}
  MCP2515_CS_LOW();
 8001ba6:	4c0c      	ldr	r4, [pc, #48]	; (8001bd8 <MCP2515_ReadByte+0x34>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 8001bae:	4605      	mov	r5, r0
  MCP2515_CS_LOW();
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f7fe fe87 	bl	80008c4 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_READ);
 8001bb6:	2003      	movs	r0, #3
 8001bb8:	f7ff ffbe 	bl	8001b38 <SPI_Tx>
  SPI_Tx(address);
 8001bbc:	4628      	mov	r0, r5
 8001bbe:	f7ff ffbb 	bl	8001b38 <SPI_Tx>
  retVal = SPI_Rx();
 8001bc2:	f7ff ffc7 	bl	8001b54 <SPI_Rx>
  MCP2515_CS_HIGH();
 8001bc6:	2201      	movs	r2, #1
  retVal = SPI_Rx();
 8001bc8:	4605      	mov	r5, r0
  MCP2515_CS_HIGH();
 8001bca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f7fe fe78 	bl	80008c4 <HAL_GPIO_WritePin>
}
 8001bd4:	4628      	mov	r0, r5
 8001bd6:	bd38      	pop	{r3, r4, r5, pc}
 8001bd8:	40021000 	.word	0x40021000

08001bdc <MCP2515_ReadRxSequence>:
{
 8001bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MCP2515_CS_LOW();
 8001bde:	4c0d      	ldr	r4, [pc, #52]	; (8001c14 <MCP2515_ReadRxSequence+0x38>)
{
 8001be0:	4607      	mov	r7, r0
 8001be2:	460d      	mov	r5, r1
 8001be4:	4616      	mov	r6, r2
  MCP2515_CS_LOW();
 8001be6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bea:	2200      	movs	r2, #0
 8001bec:	4620      	mov	r0, r4
 8001bee:	f7fe fe69 	bl	80008c4 <HAL_GPIO_WritePin>
  SPI_Tx(instruction);        
 8001bf2:	4638      	mov	r0, r7
 8001bf4:	f7ff ffa0 	bl	8001b38 <SPI_Tx>

/* SPI Rx Wrapper funksjon*/
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001bf8:	4632      	mov	r2, r6
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	230a      	movs	r3, #10
 8001bfe:	4806      	ldr	r0, [pc, #24]	; (8001c18 <MCP2515_ReadRxSequence+0x3c>)
 8001c00:	f7ff faef 	bl	80011e2 <HAL_SPI_Receive>
  MCP2515_CS_HIGH();
 8001c04:	4620      	mov	r0, r4
 8001c06:	2201      	movs	r2, #1
 8001c08:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 8001c0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  MCP2515_CS_HIGH();
 8001c10:	f7fe be58 	b.w	80008c4 <HAL_GPIO_WritePin>
 8001c14:	40021000 	.word	0x40021000
 8001c18:	2000006c 	.word	0x2000006c

08001c1c <MCP2515_WriteByte>:
{    
 8001c1c:	b570      	push	{r4, r5, r6, lr}
  MCP2515_CS_LOW();  
 8001c1e:	4c0d      	ldr	r4, [pc, #52]	; (8001c54 <MCP2515_WriteByte+0x38>)
 8001c20:	2200      	movs	r2, #0
{    
 8001c22:	4606      	mov	r6, r0
 8001c24:	460d      	mov	r5, r1
  MCP2515_CS_LOW();  
 8001c26:	4620      	mov	r0, r4
 8001c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c2c:	f7fe fe4a 	bl	80008c4 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_WRITE);
 8001c30:	2002      	movs	r0, #2
 8001c32:	f7ff ff81 	bl	8001b38 <SPI_Tx>
  SPI_Tx(address);
 8001c36:	4630      	mov	r0, r6
 8001c38:	f7ff ff7e 	bl	8001b38 <SPI_Tx>
  SPI_Tx(data);  
 8001c3c:	4628      	mov	r0, r5
 8001c3e:	f7ff ff7b 	bl	8001b38 <SPI_Tx>
  MCP2515_CS_HIGH();
 8001c42:	4620      	mov	r0, r4
 8001c44:	2201      	movs	r2, #1
 8001c46:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 8001c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MCP2515_CS_HIGH();
 8001c4e:	f7fe be39 	b.w	80008c4 <HAL_GPIO_WritePin>
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000

08001c58 <MCP2515_SetConfigMode>:
{
 8001c58:	b510      	push	{r4, lr}
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001c5a:	2180      	movs	r1, #128	; 0x80
 8001c5c:	200f      	movs	r0, #15
 8001c5e:	f7ff ffdd 	bl	8001c1c <MCP2515_WriteByte>
 8001c62:	240a      	movs	r4, #10
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8001c64:	200e      	movs	r0, #14
 8001c66:	f7ff ff9d 	bl	8001ba4 <MCP2515_ReadByte>
 8001c6a:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
 8001c6e:	2880      	cmp	r0, #128	; 0x80
 8001c70:	d005      	beq.n	8001c7e <MCP2515_SetConfigMode+0x26>
 8001c72:	3c01      	subs	r4, #1
  } while(loop > 0); 
 8001c74:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001c78:	d1f4      	bne.n	8001c64 <MCP2515_SetConfigMode+0xc>
  return false;
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	bd10      	pop	{r4, pc}
      return true;
 8001c7e:	2001      	movs	r0, #1
}
 8001c80:	bd10      	pop	{r4, pc}

08001c82 <MCP2515_SetNormalMode>:
{
 8001c82:	b510      	push	{r4, lr}
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8001c84:	2100      	movs	r1, #0
 8001c86:	200f      	movs	r0, #15
 8001c88:	f7ff ffc8 	bl	8001c1c <MCP2515_WriteByte>
 8001c8c:	240a      	movs	r4, #10
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8001c8e:	200e      	movs	r0, #14
 8001c90:	f7ff ff88 	bl	8001ba4 <MCP2515_ReadByte>
 8001c94:	f010 0fe0 	tst.w	r0, #224	; 0xe0
 8001c98:	d005      	beq.n	8001ca6 <MCP2515_SetNormalMode+0x24>
 8001c9a:	3c01      	subs	r4, #1
  } while(loop > 0);
 8001c9c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001ca0:	d1f5      	bne.n	8001c8e <MCP2515_SetNormalMode+0xc>
  return false;
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	bd10      	pop	{r4, pc}
      return true;
 8001ca6:	2001      	movs	r0, #1
}
 8001ca8:	bd10      	pop	{r4, pc}
	...

08001cac <MCP2515_WriteByteSequence>:
{    
 8001cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MCP2515_CS_LOW();
 8001cae:	4d10      	ldr	r5, [pc, #64]	; (8001cf0 <MCP2515_WriteByteSequence+0x44>)
{    
 8001cb0:	4606      	mov	r6, r0
 8001cb2:	460c      	mov	r4, r1
 8001cb4:	4617      	mov	r7, r2
  MCP2515_CS_LOW();
 8001cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cba:	2200      	movs	r2, #0
 8001cbc:	4628      	mov	r0, r5
 8001cbe:	f7fe fe01 	bl	80008c4 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_WRITE);
 8001cc2:	2002      	movs	r0, #2
 8001cc4:	f7ff ff38 	bl	8001b38 <SPI_Tx>
  SPI_Tx(startAddress);
 8001cc8:	4630      	mov	r0, r6
 8001cca:	f7ff ff35 	bl	8001b38 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8001cce:	1c62      	adds	r2, r4, #1
 8001cd0:	1b92      	subs	r2, r2, r6
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8001cd2:	4639      	mov	r1, r7
 8001cd4:	230a      	movs	r3, #10
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <MCP2515_WriteByteSequence+0x48>)
 8001cda:	f7ff f8dd 	bl	8000e98 <HAL_SPI_Transmit>
  MCP2515_CS_HIGH();
 8001cde:	4628      	mov	r0, r5
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 8001ce6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  MCP2515_CS_HIGH();
 8001cea:	f7fe bdeb 	b.w	80008c4 <HAL_GPIO_WritePin>
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	2000006c 	.word	0x2000006c

08001cf8 <MCP2515_LoadTxSequence>:
{    
 8001cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  MCP2515_CS_LOW();
 8001cfc:	4c12      	ldr	r4, [pc, #72]	; (8001d48 <MCP2515_LoadTxSequence+0x50>)
{    
 8001cfe:	4616      	mov	r6, r2
 8001d00:	4605      	mov	r5, r0
 8001d02:	4688      	mov	r8, r1
  MCP2515_CS_LOW();
 8001d04:	2200      	movs	r2, #0
 8001d06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d0a:	4620      	mov	r0, r4
{    
 8001d0c:	461f      	mov	r7, r3
  MCP2515_CS_LOW();
 8001d0e:	f7fe fdd9 	bl	80008c4 <HAL_GPIO_WritePin>
  SPI_Tx(instruction);
 8001d12:	4628      	mov	r0, r5
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8001d14:	4d0d      	ldr	r5, [pc, #52]	; (8001d4c <MCP2515_LoadTxSequence+0x54>)
  SPI_Tx(instruction);
 8001d16:	f7ff ff0f 	bl	8001b38 <SPI_Tx>
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8001d1a:	4641      	mov	r1, r8
 8001d1c:	230a      	movs	r3, #10
 8001d1e:	2204      	movs	r2, #4
 8001d20:	4628      	mov	r0, r5
 8001d22:	f7ff f8b9 	bl	8000e98 <HAL_SPI_Transmit>
  SPI_Tx(dlc);
 8001d26:	4630      	mov	r0, r6
 8001d28:	f7ff ff06 	bl	8001b38 <SPI_Tx>
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8001d2c:	4632      	mov	r2, r6
 8001d2e:	4639      	mov	r1, r7
 8001d30:	4628      	mov	r0, r5
 8001d32:	230a      	movs	r3, #10
 8001d34:	f7ff f8b0 	bl	8000e98 <HAL_SPI_Transmit>
  MCP2515_CS_HIGH();
 8001d38:	4620      	mov	r0, r4
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 8001d40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  MCP2515_CS_HIGH();
 8001d44:	f7fe bdbe 	b.w	80008c4 <HAL_GPIO_WritePin>
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	2000006c 	.word	0x2000006c

08001d50 <MCP2515_RequestToSend>:
{
 8001d50:	b538      	push	{r3, r4, r5, lr}
  MCP2515_CS_LOW();
 8001d52:	4c09      	ldr	r4, [pc, #36]	; (8001d78 <MCP2515_RequestToSend+0x28>)
{
 8001d54:	4605      	mov	r5, r0
  MCP2515_CS_LOW();
 8001d56:	2200      	movs	r2, #0
 8001d58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f7fe fdb1 	bl	80008c4 <HAL_GPIO_WritePin>
  SPI_Tx(instruction);
 8001d62:	4628      	mov	r0, r5
 8001d64:	f7ff fee8 	bl	8001b38 <SPI_Tx>
  MCP2515_CS_HIGH();
 8001d68:	4620      	mov	r0, r4
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 8001d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  MCP2515_CS_HIGH();
 8001d74:	f7fe bda6 	b.w	80008c4 <HAL_GPIO_WritePin>
 8001d78:	40021000 	.word	0x40021000

08001d7c <MCP2515_ReadStatus>:
{
 8001d7c:	b538      	push	{r3, r4, r5, lr}
  MCP2515_CS_LOW();
 8001d7e:	4c0a      	ldr	r4, [pc, #40]	; (8001da8 <MCP2515_ReadStatus+0x2c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d86:	4620      	mov	r0, r4
 8001d88:	f7fe fd9c 	bl	80008c4 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_READ_STATUS);
 8001d8c:	20a0      	movs	r0, #160	; 0xa0
 8001d8e:	f7ff fed3 	bl	8001b38 <SPI_Tx>
  retVal = SPI_Rx();
 8001d92:	f7ff fedf 	bl	8001b54 <SPI_Rx>
  MCP2515_CS_HIGH();
 8001d96:	2201      	movs	r2, #1
  retVal = SPI_Rx();
 8001d98:	4605      	mov	r5, r0
  MCP2515_CS_HIGH();
 8001d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d9e:	4620      	mov	r0, r4
 8001da0:	f7fe fd90 	bl	80008c4 <HAL_GPIO_WritePin>
}
 8001da4:	4628      	mov	r0, r5
 8001da6:	bd38      	pop	{r3, r4, r5, pc}
 8001da8:	40021000 	.word	0x40021000

08001dac <MCP2515_GetRxStatus>:
{
 8001dac:	b538      	push	{r3, r4, r5, lr}
  MCP2515_CS_LOW();
 8001dae:	4c0a      	ldr	r4, [pc, #40]	; (8001dd8 <MCP2515_GetRxStatus+0x2c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db6:	4620      	mov	r0, r4
 8001db8:	f7fe fd84 	bl	80008c4 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_RX_STATUS);
 8001dbc:	20b0      	movs	r0, #176	; 0xb0
 8001dbe:	f7ff febb 	bl	8001b38 <SPI_Tx>
  retVal = SPI_Rx();
 8001dc2:	f7ff fec7 	bl	8001b54 <SPI_Rx>
  MCP2515_CS_HIGH();
 8001dc6:	2201      	movs	r2, #1
  retVal = SPI_Rx();
 8001dc8:	4605      	mov	r5, r0
  MCP2515_CS_HIGH();
 8001dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dce:	4620      	mov	r0, r4
 8001dd0:	f7fe fd78 	bl	80008c4 <HAL_GPIO_WritePin>
}
 8001dd4:	4628      	mov	r0, r5
 8001dd6:	bd38      	pop	{r3, r4, r5, pc}
 8001dd8:	40021000 	.word	0x40021000

08001ddc <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001ddc:	b530      	push	{r4, r5, lr}
 8001dde:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de0:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <SystemClock_Config+0xa8>)
 8001de2:	2100      	movs	r1, #0
 8001de4:	9101      	str	r1, [sp, #4]
 8001de6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001de8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df8:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <SystemClock_Config+0xac>)
 8001dfa:	9102      	str	r1, [sp, #8]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0a:	9302      	str	r3, [sp, #8]
 8001e0c:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e16:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e1c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e1e:	2319      	movs	r3, #25
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e20:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e22:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e24:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e26:	f44f 73a8 	mov.w	r3, #336	; 0x150
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e2a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e2c:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e2e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e30:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e32:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e34:	f7fe fd58 	bl	80008e8 <HAL_RCC_OscConfig>
 8001e38:	b100      	cbz	r0, 8001e3c <SystemClock_Config+0x60>
 8001e3a:	e7fe      	b.n	8001e3a <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e44:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e46:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e48:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e4e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e50:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e52:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e54:	f7fe feec 	bl	8000c30 <HAL_RCC_ClockConfig>
 8001e58:	4604      	mov	r4, r0
 8001e5a:	b100      	cbz	r0, 8001e5e <SystemClock_Config+0x82>
 8001e5c:	e7fe      	b.n	8001e5c <SystemClock_Config+0x80>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001e5e:	f7fe ff81 	bl	8000d64 <HAL_RCC_GetHCLKFreq>
 8001e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e66:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e6a:	f7fe fc23 	bl	80006b4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e6e:	4628      	mov	r0, r5
 8001e70:	f7fe fc36 	bl	80006e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e74:	4622      	mov	r2, r4
 8001e76:	4621      	mov	r1, r4
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f7fe fbda 	bl	8000634 <HAL_NVIC_SetPriority>
}
 8001e80:	b015      	add	sp, #84	; 0x54
 8001e82:	bd30      	pop	{r4, r5, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40007000 	.word	0x40007000

08001e8c <main>:
{
 8001e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e90:	b092      	sub	sp, #72	; 0x48
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e92:	2400      	movs	r4, #0
  HAL_Init();
 8001e94:	f7fe fb84 	bl	80005a0 <HAL_Init>
  SystemClock_Config();
 8001e98:	f7ff ffa0 	bl	8001ddc <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e9c:	4b8b      	ldr	r3, [pc, #556]	; (80020cc <main+0x240>)
 8001e9e:	9400      	str	r4, [sp, #0]
 8001ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRIVE_EN_GPIO_Port, DRIVE_EN_Pin, GPIO_PIN_RESET);
 8001ea2:	488b      	ldr	r0, [pc, #556]	; (80020d0 <main+0x244>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ea4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eac:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001eb0:	9200      	str	r2, [sp, #0]
 8001eb2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb4:	9401      	str	r4, [sp, #4]
 8001eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb8:	f042 0201 	orr.w	r2, r2, #1
 8001ebc:	631a      	str	r2, [r3, #48]	; 0x30
 8001ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ec0:	f002 0201 	and.w	r2, r2, #1
 8001ec4:	9201      	str	r2, [sp, #4]
 8001ec6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ec8:	9402      	str	r4, [sp, #8]
 8001eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ecc:	f042 0210 	orr.w	r2, r2, #16
 8001ed0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ed4:	f002 0210 	and.w	r2, r2, #16
 8001ed8:	9202      	str	r2, [sp, #8]
 8001eda:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001edc:	9403      	str	r4, [sp, #12]
 8001ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee0:	f042 0208 	orr.w	r2, r2, #8
 8001ee4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee8:	f002 0208 	and.w	r2, r2, #8
 8001eec:	9203      	str	r2, [sp, #12]
 8001eee:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef0:	9404      	str	r4, [sp, #16]
 8001ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ef4:	f042 0204 	orr.w	r2, r2, #4
 8001ef8:	631a      	str	r2, [r3, #48]	; 0x30
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(DRIVE_EN_GPIO_Port, DRIVE_EN_Pin, GPIO_PIN_RESET);
 8001f02:	4622      	mov	r2, r4
 8001f04:	2108      	movs	r1, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f06:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(DRIVE_EN_GPIO_Port, DRIVE_EN_Pin, GPIO_PIN_RESET);
 8001f08:	f7fe fcdc 	bl	80008c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f12:	4870      	ldr	r0, [pc, #448]	; (80020d4 <main+0x248>)
 8001f14:	f7fe fcd6 	bl	80008c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRIVE_DIR_GPIO_Port, DRIVE_DIR_Pin, GPIO_PIN_RESET);
 8001f18:	4622      	mov	r2, r4
 8001f1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f1e:	486d      	ldr	r0, [pc, #436]	; (80020d4 <main+0x248>)
 8001f20:	f7fe fcd0 	bl	80008c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DRIVE_EN_Pin */
  GPIO_InitStruct.Pin = DRIVE_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f24:	2511      	movs	r5, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DRIVE_EN_GPIO_Port, &GPIO_InitStruct);
 8001f26:	a90b      	add	r1, sp, #44	; 0x2c
 8001f28:	4869      	ldr	r0, [pc, #420]	; (80020d0 <main+0x244>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f2a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = DRIVE_EN_Pin;
 8001f2c:	2708      	movs	r7, #8

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2e:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = DRIVE_EN_Pin;
 8001f30:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(DRIVE_EN_GPIO_Port, &GPIO_InitStruct);
 8001f36:	f7fe fbe5 	bl	8000704 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	a90b      	add	r1, sp, #44	; 0x2c
 8001f40:	4864      	ldr	r0, [pc, #400]	; (80020d4 <main+0x248>)
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001f42:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f44:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f48:	960e      	str	r6, [sp, #56]	; 0x38
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001f4a:	f7fe fbdb 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_INT_Pin */
  GPIO_InitStruct.Pin = CAN_INT_Pin;
 8001f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f52:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 8001f54:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f56:	4b60      	ldr	r3, [pc, #384]	; (80020d8 <main+0x24c>)
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 8001f58:	485e      	ldr	r0, [pc, #376]	; (80020d4 <main+0x248>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f5a:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 8001f5e:	f7fe fbd1 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRIVE_DIR_Pin */
  GPIO_InitStruct.Pin = DRIVE_DIR_Pin;
 8001f62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(DRIVE_DIR_GPIO_Port, &GPIO_InitStruct);
 8001f66:	a90b      	add	r1, sp, #44	; 0x2c
 8001f68:	485a      	ldr	r0, [pc, #360]	; (80020d4 <main+0x248>)
  GPIO_InitStruct.Pin = DRIVE_DIR_Pin;
 8001f6a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f6c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f70:	960e      	str	r6, [sp, #56]	; 0x38
  HAL_GPIO_Init(DRIVE_DIR_GPIO_Port, &GPIO_InitStruct);
 8001f72:	f7fe fbc7 	bl	8000704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f76:	4621      	mov	r1, r4
 8001f78:	4622      	mov	r2, r4
 8001f7a:	2028      	movs	r0, #40	; 0x28
 8001f7c:	f7fe fb5a 	bl	8000634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f80:	2028      	movs	r0, #40	; 0x28
 8001f82:	f7fe fb8b 	bl	800069c <HAL_NVIC_EnableIRQ>
  hspi3.Instance = SPI3;
 8001f86:	4855      	ldr	r0, [pc, #340]	; (80020dc <main+0x250>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001f88:	4955      	ldr	r1, [pc, #340]	; (80020e0 <main+0x254>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001f8a:	6084      	str	r4, [r0, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001f8c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001f90:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f98:	6183      	str	r3, [r0, #24]
  hspi3.Init.CRCPolynomial = 10;
 8001f9a:	250a      	movs	r5, #10
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f9c:	2310      	movs	r3, #16
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f9e:	60c4      	str	r4, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fa0:	6104      	str	r4, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fa2:	6144      	str	r4, [r0, #20]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001fa4:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fa6:	6204      	str	r4, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fa8:	6244      	str	r4, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001faa:	6284      	str	r4, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001fac:	62c5      	str	r5, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001fae:	f7fe ff36 	bl	8000e1e <HAL_SPI_Init>
 8001fb2:	b100      	cbz	r0, 8001fb6 <main+0x12a>
 8001fb4:	e7fe      	b.n	8001fb4 <main+0x128>
  htim4.Instance = TIM4;
 8001fb6:	4c4b      	ldr	r4, [pc, #300]	; (80020e4 <main+0x258>)
  htim4.Init.Prescaler = 7;
 8001fb8:	4a4b      	ldr	r2, [pc, #300]	; (80020e8 <main+0x25c>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fba:	60a0      	str	r0, [r4, #8]
  htim4.Init.Prescaler = 7;
 8001fbc:	2307      	movs	r3, #7
  htim4.Init.Period = 0;
 8001fbe:	60e0      	str	r0, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc0:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fc2:	4620      	mov	r0, r4
  htim4.Init.Prescaler = 7;
 8001fc4:	e884 000c 	stmia.w	r4, {r2, r3}
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fc8:	f7ff fb5e 	bl	8001688 <HAL_TIM_Base_Init>
 8001fcc:	b100      	cbz	r0, 8001fd0 <main+0x144>
 8001fce:	e7fe      	b.n	8001fce <main+0x142>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd0:	a912      	add	r1, sp, #72	; 0x48
 8001fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd6:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fda:	4620      	mov	r0, r4
 8001fdc:	f7ff fa36 	bl	800144c <HAL_TIM_ConfigClockSource>
 8001fe0:	b100      	cbz	r0, 8001fe4 <main+0x158>
 8001fe2:	e7fe      	b.n	8001fe2 <main+0x156>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f7ff fb69 	bl	80016bc <HAL_TIM_PWM_Init>
 8001fea:	b100      	cbz	r0, 8001fee <main+0x162>
 8001fec:	e7fe      	b.n	8001fec <main+0x160>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fee:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff0:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ff2:	a905      	add	r1, sp, #20
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f7ff fc33 	bl	8001860 <HAL_TIMEx_MasterConfigSynchronization>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	b100      	cbz	r0, 8002000 <main+0x174>
 8001ffe:	e7fe      	b.n	8001ffe <main+0x172>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002000:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8002002:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002004:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002006:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002008:	a90b      	add	r1, sp, #44	; 0x2c
 800200a:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800200c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800200e:	f7ff fb9f 	bl	8001750 <HAL_TIM_PWM_ConfigChannel>
 8002012:	4680      	mov	r8, r0
 8002014:	b100      	cbz	r0, 8002018 <main+0x18c>
 8002016:	e7fe      	b.n	8002016 <main+0x18a>
  HAL_TIM_MspPostInit(&htim4);
 8002018:	4620      	mov	r0, r4
 800201a:	f000 f8fb 	bl	8002214 <HAL_TIM_MspPostInit>
	CANSPI_Initialize();
 800201e:	f7ff fc5d 	bl	80018dc <CANSPI_Initialize>
	HAL_TIM_Base_Start(&htim4);
 8002022:	4620      	mov	r0, r4
 8002024:	f7ff fa04 	bl	8001430 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8002028:	4641      	mov	r1, r8
 800202a:	4620      	mov	r0, r4
 800202c:	f7ff fbfe 	bl	800182c <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(DRIVE_EN_GPIO_Port,DRIVE_EN_Pin,GPIO_PIN_SET);
 8002030:	4639      	mov	r1, r7
 8002032:	4827      	ldr	r0, [pc, #156]	; (80020d0 <main+0x244>)
 8002034:	4632      	mov	r2, r6
 8002036:	f7fe fc45 	bl	80008c4 <HAL_GPIO_WritePin>
	MCP2515_WriteByte(MCP2515_CANCTRL, 0x40);
 800203a:	2140      	movs	r1, #64	; 0x40
 800203c:	200f      	movs	r0, #15
 800203e:	f7ff fded 	bl	8001c1c <MCP2515_WriteByte>
	    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x20)
 8002042:	200e      	movs	r0, #14
 8002044:	f7ff fdae 	bl	8001ba4 <MCP2515_ReadByte>
 8002048:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
 800204c:	2820      	cmp	r0, #32
 800204e:	d039      	beq.n	80020c4 <main+0x238>
 8002050:	3d01      	subs	r5, #1
	  } while(loop > 0);
 8002052:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8002056:	d1f4      	bne.n	8002042 <main+0x1b6>
	txMessage.frame.idType = dEXTENDED_CAN_MSG_ID_2_0B;
 8002058:	4c24      	ldr	r4, [pc, #144]	; (80020ec <main+0x260>)
 800205a:	2302      	movs	r3, #2
 800205c:	7023      	strb	r3, [r4, #0]
	txMessage.frame.id = 0x0A;
 800205e:	230a      	movs	r3, #10
 8002060:	6063      	str	r3, [r4, #4]
	CANSPI_Transmit(&txMessage);
 8002062:	4620      	mov	r0, r4
	txMessage.frame.dlc = 8;
 8002064:	2308      	movs	r3, #8
	txMessage.frame.data0 = 0x00;
 8002066:	7265      	strb	r5, [r4, #9]
	txMessage.frame.data1 = 0x00;
 8002068:	72a5      	strb	r5, [r4, #10]
	txMessage.frame.data2 = 0x00;
 800206a:	72e5      	strb	r5, [r4, #11]
	txMessage.frame.data3 = 0x00;
 800206c:	7325      	strb	r5, [r4, #12]
	txMessage.frame.data4 = 0x00;
 800206e:	7365      	strb	r5, [r4, #13]
	txMessage.frame.data5 = 0x00;
 8002070:	73a5      	strb	r5, [r4, #14]
	txMessage.frame.data6 = 0x00;
 8002072:	73e5      	strb	r5, [r4, #15]
	txMessage.frame.data7 = 0x00;
 8002074:	7425      	strb	r5, [r4, #16]
	txMessage.frame.dlc = 8;
 8002076:	7223      	strb	r3, [r4, #8]
	CANSPI_Transmit(&txMessage);
 8002078:	f7ff fcc4 	bl	8001a04 <CANSPI_Transmit>
		      txMessage.frame.idType = rxMessage.frame.idType;
 800207c:	4d1c      	ldr	r5, [pc, #112]	; (80020f0 <main+0x264>)
		      CANSPI_Transmit(&txMessage);
 800207e:	4626      	mov	r6, r4
		      txMessage.frame.idType = rxMessage.frame.idType;
 8002080:	782b      	ldrb	r3, [r5, #0]
 8002082:	7023      	strb	r3, [r4, #0]
		      txMessage.frame.id = rxMessage.frame.id;
 8002084:	686b      	ldr	r3, [r5, #4]
 8002086:	6063      	str	r3, [r4, #4]
		      txMessage.frame.dlc = rxMessage.frame.dlc;
 8002088:	7a2b      	ldrb	r3, [r5, #8]
 800208a:	7223      	strb	r3, [r4, #8]
		      txMessage.frame.data0 = rxMessage.frame.data0++;
 800208c:	7a6b      	ldrb	r3, [r5, #9]
 800208e:	7263      	strb	r3, [r4, #9]
 8002090:	1c5a      	adds	r2, r3, #1
		      txMessage.frame.data1 = rxMessage.frame.data1;
 8002092:	7aab      	ldrb	r3, [r5, #10]
 8002094:	72a3      	strb	r3, [r4, #10]
		      txMessage.frame.data2 = rxMessage.frame.data2;
 8002096:	7aeb      	ldrb	r3, [r5, #11]
 8002098:	72e3      	strb	r3, [r4, #11]
		      txMessage.frame.data3 = rxMessage.frame.data3;
 800209a:	7b2b      	ldrb	r3, [r5, #12]
 800209c:	7323      	strb	r3, [r4, #12]
		      txMessage.frame.data4 = rxMessage.frame.data4;
 800209e:	7b6b      	ldrb	r3, [r5, #13]
 80020a0:	7363      	strb	r3, [r4, #13]
		      txMessage.frame.data5 = rxMessage.frame.data5;
 80020a2:	7bab      	ldrb	r3, [r5, #14]
 80020a4:	73a3      	strb	r3, [r4, #14]
		      txMessage.frame.data6 = rxMessage.frame.data6;
 80020a6:	7beb      	ldrb	r3, [r5, #15]
 80020a8:	73e3      	strb	r3, [r4, #15]
		      CANSPI_Transmit(&txMessage);
 80020aa:	4630      	mov	r0, r6
		      txMessage.frame.data7 = rxMessage.frame.data7;
 80020ac:	7c2b      	ldrb	r3, [r5, #16]
		      txMessage.frame.data0 = rxMessage.frame.data0++;
 80020ae:	726a      	strb	r2, [r5, #9]
		      txMessage.frame.data7 = rxMessage.frame.data7;
 80020b0:	7423      	strb	r3, [r4, #16]
		      CANSPI_Transmit(&txMessage);
 80020b2:	f7ff fca7 	bl	8001a04 <CANSPI_Transmit>
		      PWM_Set_Frekvens(txMessage.frame.data0);
 80020b6:	7a60      	ldrb	r0, [r4, #9]
 80020b8:	f000 f81e 	bl	80020f8 <PWM_Set_Frekvens>
		      HAL_Delay(100);
 80020bc:	2064      	movs	r0, #100	; 0x64
 80020be:	f7fe fa97 	bl	80005f0 <HAL_Delay>
 80020c2:	e7dd      	b.n	8002080 <main+0x1f4>
}
 80020c4:	2001      	movs	r0, #1
 80020c6:	b012      	add	sp, #72	; 0x48
 80020c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40020000 	.word	0x40020000
 80020d4:	40021000 	.word	0x40021000
 80020d8:	10210000 	.word	0x10210000
 80020dc:	2000006c 	.word	0x2000006c
 80020e0:	40003c00 	.word	0x40003c00
 80020e4:	20000030 	.word	0x20000030
 80020e8:	40000800 	.word	0x40000800
 80020ec:	200000c4 	.word	0x200000c4
 80020f0:	200000dc 	.word	0x200000dc
 80020f4:	00000000 	.word	0x00000000

080020f8 <PWM_Set_Frekvens>:
//	}
//	else{
//		MOTOR_BAK();
//	}

	if(tempfart >= 100){
 80020f8:	2863      	cmp	r0, #99	; 0x63
void PWM_Set_Frekvens(uint16_t tempfart){
 80020fa:	b508      	push	{r3, lr}
	if(tempfart >= 100){
 80020fc:	d912      	bls.n	8002124 <PWM_Set_Frekvens+0x2c>

//		tempfart = (65000000-1000*3215*exp(tempfart2/10922))/1000;
		tempfart = 10500000000 / (tempfart*5826);
 80020fe:	f241 62c2 	movw	r2, #5826	; 0x16c2
 8002102:	4342      	muls	r2, r0
 8002104:	17d3      	asrs	r3, r2, #31
 8002106:	a109      	add	r1, pc, #36	; (adr r1, 800212c <PWM_Set_Frekvens+0x34>)
 8002108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800210c:	f7fe f85c 	bl	80001c8 <__aeabi_ldivmod>
 8002110:	b280      	uxth	r0, r0
		if (tempfart <=54){tempfart = 54;}
		if (tempfart >= 65000){tempfart = 65000;}

		TIM4->ARR = tempfart;
 8002112:	4b05      	ldr	r3, [pc, #20]	; (8002128 <PWM_Set_Frekvens+0x30>)
 8002114:	2836      	cmp	r0, #54	; 0x36
 8002116:	bf38      	it	cc
 8002118:	2036      	movcc	r0, #54	; 0x36
 800211a:	62d8      	str	r0, [r3, #44]	; 0x2c
		TIM4->CCR1 = (tempfart/2);
		TIM4->CR1 = 0x81;
 800211c:	2281      	movs	r2, #129	; 0x81
		TIM4->CCR1 = (tempfart/2);
 800211e:	0840      	lsrs	r0, r0, #1
 8002120:	6358      	str	r0, [r3, #52]	; 0x34
		TIM4->CR1 = 0x81;
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	bd08      	pop	{r3, pc}
 8002126:	bf00      	nop
 8002128:	40000800 	.word	0x40000800
 800212c:	71d94900 	.word	0x71d94900
 8002130:	00000002 	.word	0x00000002

08002134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002134:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002136:	2003      	movs	r0, #3
 8002138:	f7fe fa6a 	bl	8000610 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	4611      	mov	r1, r2
 8002140:	f06f 000b 	mvn.w	r0, #11
 8002144:	f7fe fa76 	bl	8000634 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002148:	2200      	movs	r2, #0
 800214a:	4611      	mov	r1, r2
 800214c:	f06f 000a 	mvn.w	r0, #10
 8002150:	f7fe fa70 	bl	8000634 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	4611      	mov	r1, r2
 8002158:	f06f 0009 	mvn.w	r0, #9
 800215c:	f7fe fa6a 	bl	8000634 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002160:	2200      	movs	r2, #0
 8002162:	4611      	mov	r1, r2
 8002164:	f06f 0004 	mvn.w	r0, #4
 8002168:	f7fe fa64 	bl	8000634 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	4611      	mov	r1, r2
 8002170:	f06f 0003 	mvn.w	r0, #3
 8002174:	f7fe fa5e 	bl	8000634 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002178:	2200      	movs	r2, #0
 800217a:	4611      	mov	r1, r2
 800217c:	f06f 0001 	mvn.w	r0, #1
 8002180:	f7fe fa58 	bl	8000634 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002184:	2200      	movs	r2, #0
 8002186:	4611      	mov	r1, r2
 8002188:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002190:	f7fe ba50 	b.w	8000634 <HAL_NVIC_SetPriority>

08002194 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002194:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI3)
 8002196:	6802      	ldr	r2, [r0, #0]
 8002198:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_SPI_MspInit+0x48>)
 800219a:	429a      	cmp	r2, r3
 800219c:	d11a      	bne.n	80021d4 <HAL_SPI_MspInit+0x40>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800219e:	2100      	movs	r1, #0
 80021a0:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 80021a4:	9100      	str	r1, [sp, #0]
 80021a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a8:	480d      	ldr	r0, [pc, #52]	; (80021e0 <HAL_SPI_MspInit+0x4c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	9103      	str	r1, [sp, #12]
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80021bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021c0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c6:	2303      	movs	r3, #3
 80021c8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ca:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021cc:	2306      	movs	r3, #6
 80021ce:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d0:	f7fe fa98 	bl	8000704 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80021d4:	b007      	add	sp, #28
 80021d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80021da:	bf00      	nop
 80021dc:	40003c00 	.word	0x40003c00
 80021e0:	40020800 	.word	0x40020800

080021e4 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM4)
 80021e4:	6802      	ldr	r2, [r0, #0]
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_TIM_Base_MspInit+0x28>)
 80021e8:	429a      	cmp	r2, r3
{
 80021ea:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM4)
 80021ec:	d10b      	bne.n	8002206 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <HAL_TIM_Base_MspInit+0x2c>)
 80021f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f6:	f042 0204 	orr.w	r2, r2, #4
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002206:	b002      	add	sp, #8
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40000800 	.word	0x40000800
 8002210:	40023800 	.word	0x40023800

08002214 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002214:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM4)
 8002216:	6802      	ldr	r2, [r0, #0]
 8002218:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <HAL_TIM_MspPostInit+0x30>)
 800221a:	429a      	cmp	r2, r3
 800221c:	d10e      	bne.n	800223c <HAL_TIM_MspPostInit+0x28>
  /* USER CODE END TIM4_MspPostInit 0 */
  
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = DRIVE_PWM_Pin;
 800221e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002222:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002224:	2312      	movs	r3, #18
 8002226:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800222c:	2301      	movs	r3, #1
 800222e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(DRIVE_PWM_GPIO_Port, &GPIO_InitStruct);
 8002230:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002232:	2302      	movs	r3, #2
    HAL_GPIO_Init(DRIVE_PWM_GPIO_Port, &GPIO_InitStruct);
 8002234:	4804      	ldr	r0, [pc, #16]	; (8002248 <HAL_TIM_MspPostInit+0x34>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002236:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DRIVE_PWM_GPIO_Port, &GPIO_InitStruct);
 8002238:	f7fe fa64 	bl	8000704 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800223c:	b007      	add	sp, #28
 800223e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002242:	bf00      	nop
 8002244:	40000800 	.word	0x40000800
 8002248:	40020c00 	.word	0x40020c00

0800224c <SVC_Handler>:
 800224c:	4770      	bx	lr

0800224e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800224e:	4770      	bx	lr

08002250 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002250:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002252:	f7fe f9bf 	bl	80005d4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800225a:	f7fe ba4e 	b.w	80006fa <HAL_SYSTICK_IRQHandler>
	...

08002260 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8002260:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  CANSPI_Receive(&rxMessage);
 8002262:	4804      	ldr	r0, [pc, #16]	; (8002274 <EXTI15_10_IRQHandler+0x14>)
 8002264:	f7ff fc10 	bl	8001a88 <CANSPI_Receive>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002268:	f44f 6080 	mov.w	r0, #1024	; 0x400
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800226c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002270:	f7fe bb2e 	b.w	80008d0 <HAL_GPIO_EXTI_IRQHandler>
 8002274:	200000dc 	.word	0x200000dc

08002278 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002278:	490f      	ldr	r1, [pc, #60]	; (80022b8 <SystemInit+0x40>)
 800227a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800227e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002286:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <SystemInit+0x44>)
 8002288:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800228a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800228c:	f042 0201 	orr.w	r2, r2, #1
 8002290:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002292:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800229a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800229e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80022a0:	4a07      	ldr	r2, [pc, #28]	; (80022c0 <SystemInit+0x48>)
 80022a2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022aa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80022ac:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022b2:	608b      	str	r3, [r1, #8]
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000ed00 	.word	0xe000ed00
 80022bc:	40023800 	.word	0x40023800
 80022c0:	24003010 	.word	0x24003010

080022c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022ca:	e003      	b.n	80022d4 <LoopCopyDataInit>

080022cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022d2:	3104      	adds	r1, #4

080022d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022d4:	480b      	ldr	r0, [pc, #44]	; (8002304 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022dc:	d3f6      	bcc.n	80022cc <CopyDataInit>
  ldr  r2, =_sbss
 80022de:	4a0b      	ldr	r2, [pc, #44]	; (800230c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022e0:	e002      	b.n	80022e8 <LoopFillZerobss>

080022e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022e4:	f842 3b04 	str.w	r3, [r2], #4

080022e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022ec:	d3f9      	bcc.n	80022e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022ee:	f7ff ffc3 	bl	8002278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022f2:	f000 f811 	bl	8002318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022f6:	f7ff fdc9 	bl	8001e8c <main>
  bx  lr    
 80022fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002300:	08002398 	.word	0x08002398
  ldr  r0, =_sdata
 8002304:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002308:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 800230c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8002310:	200000f0 	.word	0x200000f0

08002314 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002314:	e7fe      	b.n	8002314 <ADC_IRQHandler>
	...

08002318 <__libc_init_array>:
 8002318:	b570      	push	{r4, r5, r6, lr}
 800231a:	4e0d      	ldr	r6, [pc, #52]	; (8002350 <__libc_init_array+0x38>)
 800231c:	4c0d      	ldr	r4, [pc, #52]	; (8002354 <__libc_init_array+0x3c>)
 800231e:	1ba4      	subs	r4, r4, r6
 8002320:	10a4      	asrs	r4, r4, #2
 8002322:	2500      	movs	r5, #0
 8002324:	42a5      	cmp	r5, r4
 8002326:	d109      	bne.n	800233c <__libc_init_array+0x24>
 8002328:	4e0b      	ldr	r6, [pc, #44]	; (8002358 <__libc_init_array+0x40>)
 800232a:	4c0c      	ldr	r4, [pc, #48]	; (800235c <__libc_init_array+0x44>)
 800232c:	f000 f818 	bl	8002360 <_init>
 8002330:	1ba4      	subs	r4, r4, r6
 8002332:	10a4      	asrs	r4, r4, #2
 8002334:	2500      	movs	r5, #0
 8002336:	42a5      	cmp	r5, r4
 8002338:	d105      	bne.n	8002346 <__libc_init_array+0x2e>
 800233a:	bd70      	pop	{r4, r5, r6, pc}
 800233c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002340:	4798      	blx	r3
 8002342:	3501      	adds	r5, #1
 8002344:	e7ee      	b.n	8002324 <__libc_init_array+0xc>
 8002346:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800234a:	4798      	blx	r3
 800234c:	3501      	adds	r5, #1
 800234e:	e7f2      	b.n	8002336 <__libc_init_array+0x1e>
 8002350:	08002390 	.word	0x08002390
 8002354:	08002390 	.word	0x08002390
 8002358:	08002390 	.word	0x08002390
 800235c:	08002394 	.word	0x08002394

08002360 <_init>:
 8002360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002362:	bf00      	nop
 8002364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002366:	bc08      	pop	{r3}
 8002368:	469e      	mov	lr, r3
 800236a:	4770      	bx	lr

0800236c <_fini>:
 800236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236e:	bf00      	nop
 8002370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002372:	bc08      	pop	{r3}
 8002374:	469e      	mov	lr, r3
 8002376:	4770      	bx	lr
