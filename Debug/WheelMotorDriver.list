
WheelMotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001aa0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001c28  08001c28  00011c28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001c38  08001c38  00011c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001c40  08001c40  00011c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001c44  08001c44  00011c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08001c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  8 .bss          000000ac  20000004  20000004  00020004  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000b0  200000b0  00020004  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000f8b1  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002215  00000000  00000000  0002f8e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003215  00000000  00000000  00031afa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000628  00000000  00000000  00034d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d0  00000000  00000000  00035338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003971  00000000  00000000  00035b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002ae9  00000000  00000000  00039479  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003bf62  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000010b0  00000000  00000000  0003bfe0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001c10 	.word	0x08001c10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001c10 	.word	0x08001c10

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <HAL_InitTick+0x24>)
{
 80004dc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004de:	6818      	ldr	r0, [r3, #0]
 80004e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e8:	f000 f884 	bl	80005f4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004ec:	2200      	movs	r2, #0
 80004ee:	4621      	mov	r1, r4
 80004f0:	f04f 30ff 	mov.w	r0, #4294967295
 80004f4:	f000 f83e 	bl	8000574 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80004f8:	2000      	movs	r0, #0
 80004fa:	bd10      	pop	{r4, pc}
 80004fc:	20000000 	.word	0x20000000

08000500 <HAL_Init>:
{
 8000500:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x30>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800050a:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000512:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800051a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f817 	bl	8000550 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f7ff ffd8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000528:	f001 fa8e 	bl	8001a48 <HAL_MspInit>
}
 800052c:	2000      	movs	r0, #0
 800052e:	bd08      	pop	{r3, pc}
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000534:	4a02      	ldr	r2, [pc, #8]	; (8000540 <HAL_IncTick+0xc>)
 8000536:	6813      	ldr	r3, [r2, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000020 	.word	0x20000020

08000544 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000544:	4b01      	ldr	r3, [pc, #4]	; (800054c <HAL_GetTick+0x8>)
 8000546:	6818      	ldr	r0, [r3, #0]
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000020 	.word	0x20000020

08000550 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000552:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000554:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000558:	041b      	lsls	r3, r3, #16
 800055a:	0c1b      	lsrs	r3, r3, #16
 800055c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000560:	0200      	lsls	r0, r0, #8
 8000562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000566:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800056a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800056c:	60d3      	str	r3, [r2, #12]
 800056e:	4770      	bx	lr
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	68dc      	ldr	r4, [r3, #12]
 800057a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800057e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000582:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000584:	2b04      	cmp	r3, #4
 8000586:	bf28      	it	cs
 8000588:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800058c:	f04f 0501 	mov.w	r5, #1
 8000590:	fa05 f303 	lsl.w	r3, r5, r3
 8000594:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000598:	bf8c      	ite	hi
 800059a:	3c03      	subhi	r4, #3
 800059c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800059e:	4019      	ands	r1, r3
 80005a0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005a2:	fa05 f404 	lsl.w	r4, r5, r4
 80005a6:	3c01      	subs	r4, #1
 80005a8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	ea42 0201 	orr.w	r2, r2, r1
 80005b0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	bfaf      	iteee	ge
 80005b6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ba:	f000 000f 	andlt.w	r0, r0, #15
 80005be:	4b06      	ldrlt	r3, [pc, #24]	; (80005d8 <HAL_NVIC_SetPriority+0x64>)
 80005c0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	bfa5      	ittet	ge
 80005c4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005c8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop
 80005d4:	e000ed00 	.word	0xe000ed00
 80005d8:	e000ed14 	.word	0xe000ed14

080005dc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005dc:	0942      	lsrs	r2, r0, #5
 80005de:	2301      	movs	r3, #1
 80005e0:	f000 001f 	and.w	r0, r0, #31
 80005e4:	fa03 f000 	lsl.w	r0, r3, r0
 80005e8:	4b01      	ldr	r3, [pc, #4]	; (80005f0 <HAL_NVIC_EnableIRQ+0x14>)
 80005ea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005ee:	4770      	bx	lr
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005f4:	3801      	subs	r0, #1
 80005f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005fa:	d20a      	bcs.n	8000612 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000600:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	21f0      	movs	r1, #240	; 0xf0
 8000604:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000608:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800060c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	e000e010 	.word	0xe000e010
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000622:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000624:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000626:	bf0c      	ite	eq
 8000628:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800062c:	f022 0204 	bicne.w	r2, r2, #4
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	4770      	bx	lr
 8000634:	e000e010 	.word	0xe000e010

08000638 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000638:	4770      	bx	lr

0800063a <HAL_SYSTICK_IRQHandler>:
{
 800063a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800063c:	f7ff fffc 	bl	8000638 <HAL_SYSTICK_Callback>
 8000640:	bd08      	pop	{r3, pc}

08000642 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000642:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000646:	2b02      	cmp	r3, #2
 8000648:	d003      	beq.n	8000652 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800064e:	2001      	movs	r0, #1
 8000650:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000652:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000654:	2305      	movs	r3, #5
 8000656:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800065a:	6813      	ldr	r3, [r2, #0]
 800065c:	f023 0301 	bic.w	r3, r3, #1
 8000660:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000662:	2000      	movs	r0, #0
}
 8000664:	4770      	bx	lr
	...

08000668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800066c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800066e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000670:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000820 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000674:	4a68      	ldr	r2, [pc, #416]	; (8000818 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000676:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000824 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800067a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800067c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800067e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000682:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000684:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000688:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800068c:	45b6      	cmp	lr, r6
 800068e:	f040 80ae 	bne.w	80007ee <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000692:	684c      	ldr	r4, [r1, #4]
 8000694:	f024 0710 	bic.w	r7, r4, #16
 8000698:	2f02      	cmp	r7, #2
 800069a:	d116      	bne.n	80006ca <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800069c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006a0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006a4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006a8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006ac:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006b0:	f04f 0c0f 	mov.w	ip, #15
 80006b4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006b8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006bc:	690d      	ldr	r5, [r1, #16]
 80006be:	fa05 f50b 	lsl.w	r5, r5, fp
 80006c2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006c6:	f8ca 5020 	str.w	r5, [sl, #32]
 80006ca:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006ce:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006d0:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006d4:	fa05 f50a 	lsl.w	r5, r5, sl
 80006d8:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006da:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006de:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006e2:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e6:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006e8:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ec:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006ee:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f2:	d811      	bhi.n	8000718 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80006f4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006f6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006fa:	68cf      	ldr	r7, [r1, #12]
 80006fc:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000700:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000704:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000706:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000708:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800070c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000710:	409f      	lsls	r7, r3
 8000712:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000716:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000718:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800071a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800071c:	688f      	ldr	r7, [r1, #8]
 800071e:	fa07 f70a 	lsl.w	r7, r7, sl
 8000722:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000724:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000726:	00e5      	lsls	r5, r4, #3
 8000728:	d561      	bpl.n	80007ee <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	f04f 0b00 	mov.w	fp, #0
 800072e:	f8cd b00c 	str.w	fp, [sp, #12]
 8000732:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000736:	4d39      	ldr	r5, [pc, #228]	; (800081c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000738:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800073c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000740:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000744:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000748:	9703      	str	r7, [sp, #12]
 800074a:	9f03      	ldr	r7, [sp, #12]
 800074c:	f023 0703 	bic.w	r7, r3, #3
 8000750:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000754:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000758:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800075c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000760:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000764:	f04f 0e0f 	mov.w	lr, #15
 8000768:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800076c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800076e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000772:	d043      	beq.n	80007fc <HAL_GPIO_Init+0x194>
 8000774:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000778:	42a8      	cmp	r0, r5
 800077a:	d041      	beq.n	8000800 <HAL_GPIO_Init+0x198>
 800077c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000780:	42a8      	cmp	r0, r5
 8000782:	d03f      	beq.n	8000804 <HAL_GPIO_Init+0x19c>
 8000784:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000788:	42a8      	cmp	r0, r5
 800078a:	d03d      	beq.n	8000808 <HAL_GPIO_Init+0x1a0>
 800078c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000790:	42a8      	cmp	r0, r5
 8000792:	d03b      	beq.n	800080c <HAL_GPIO_Init+0x1a4>
 8000794:	4548      	cmp	r0, r9
 8000796:	d03b      	beq.n	8000810 <HAL_GPIO_Init+0x1a8>
 8000798:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800079c:	42a8      	cmp	r0, r5
 800079e:	d039      	beq.n	8000814 <HAL_GPIO_Init+0x1ac>
 80007a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a4:	42a8      	cmp	r0, r5
 80007a6:	bf14      	ite	ne
 80007a8:	2508      	movne	r5, #8
 80007aa:	2507      	moveq	r5, #7
 80007ac:	fa05 f50c 	lsl.w	r5, r5, ip
 80007b0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007b4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007b6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007b8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007ba:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007be:	bf0c      	ite	eq
 80007c0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007c2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007c4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007c6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007c8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007cc:	bf0c      	ite	eq
 80007ce:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007d0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007d2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007d4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007d6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007da:	bf0c      	ite	eq
 80007dc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007de:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80007e0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80007e2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007e4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007e6:	bf54      	ite	pl
 80007e8:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007ea:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007ec:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007ee:	3301      	adds	r3, #1
 80007f0:	2b10      	cmp	r3, #16
 80007f2:	f47f af44 	bne.w	800067e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007f6:	b005      	add	sp, #20
 80007f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007fc:	465d      	mov	r5, fp
 80007fe:	e7d5      	b.n	80007ac <HAL_GPIO_Init+0x144>
 8000800:	2501      	movs	r5, #1
 8000802:	e7d3      	b.n	80007ac <HAL_GPIO_Init+0x144>
 8000804:	2502      	movs	r5, #2
 8000806:	e7d1      	b.n	80007ac <HAL_GPIO_Init+0x144>
 8000808:	2503      	movs	r5, #3
 800080a:	e7cf      	b.n	80007ac <HAL_GPIO_Init+0x144>
 800080c:	2504      	movs	r5, #4
 800080e:	e7cd      	b.n	80007ac <HAL_GPIO_Init+0x144>
 8000810:	2505      	movs	r5, #5
 8000812:	e7cb      	b.n	80007ac <HAL_GPIO_Init+0x144>
 8000814:	2506      	movs	r5, #6
 8000816:	e7c9      	b.n	80007ac <HAL_GPIO_Init+0x144>
 8000818:	40013c00 	.word	0x40013c00
 800081c:	40020000 	.word	0x40020000
 8000820:	40023800 	.word	0x40023800
 8000824:	40021400 	.word	0x40021400

08000828 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000828:	b10a      	cbz	r2, 800082e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800082a:	6181      	str	r1, [r0, #24]
 800082c:	4770      	bx	lr
 800082e:	0409      	lsls	r1, r1, #16
 8000830:	e7fb      	b.n	800082a <HAL_GPIO_WritePin+0x2>
	...

08000834 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000836:	4604      	mov	r4, r0
 8000838:	b910      	cbnz	r0, 8000840 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 800083a:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800083c:	b003      	add	sp, #12
 800083e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000840:	6803      	ldr	r3, [r0, #0]
 8000842:	07d8      	lsls	r0, r3, #31
 8000844:	d43b      	bmi.n	80008be <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000846:	6823      	ldr	r3, [r4, #0]
 8000848:	0799      	lsls	r1, r3, #30
 800084a:	f100 8084 	bmi.w	8000956 <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800084e:	6823      	ldr	r3, [r4, #0]
 8000850:	071e      	lsls	r6, r3, #28
 8000852:	f100 80c6 	bmi.w	80009e2 <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000856:	6823      	ldr	r3, [r4, #0]
 8000858:	075d      	lsls	r5, r3, #29
 800085a:	d52a      	bpl.n	80008b2 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	4baa      	ldr	r3, [pc, #680]	; (8000b0c <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 8000862:	4dab      	ldr	r5, [pc, #684]	; (8000b10 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000866:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800086a:	641a      	str	r2, [r3, #64]	; 0x40
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000872:	9301      	str	r3, [sp, #4]
 8000874:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000876:	682b      	ldr	r3, [r5, #0]
 8000878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800087c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800087e:	f7ff fe61 	bl	8000544 <HAL_GetTick>
 8000882:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000884:	682b      	ldr	r3, [r5, #0]
 8000886:	05da      	lsls	r2, r3, #23
 8000888:	f140 80cd 	bpl.w	8000a26 <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800088c:	68a3      	ldr	r3, [r4, #8]
 800088e:	4d9f      	ldr	r5, [pc, #636]	; (8000b0c <HAL_RCC_OscConfig+0x2d8>)
 8000890:	2b01      	cmp	r3, #1
 8000892:	f040 80cf 	bne.w	8000a34 <HAL_RCC_OscConfig+0x200>
 8000896:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800089e:	f7ff fe51 	bl	8000544 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008a2:	4d9a      	ldr	r5, [pc, #616]	; (8000b0c <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80008a4:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008a6:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008aa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80008ac:	079b      	lsls	r3, r3, #30
 80008ae:	f140 80e2 	bpl.w	8000a76 <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008b2:	69a2      	ldr	r2, [r4, #24]
 80008b4:	2a00      	cmp	r2, #0
 80008b6:	f040 80e5 	bne.w	8000a84 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 80008ba:	2000      	movs	r0, #0
 80008bc:	e7be      	b.n	800083c <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008be:	4b93      	ldr	r3, [pc, #588]	; (8000b0c <HAL_RCC_OscConfig+0x2d8>)
 80008c0:	689a      	ldr	r2, [r3, #8]
 80008c2:	f002 020c 	and.w	r2, r2, #12
 80008c6:	2a04      	cmp	r2, #4
 80008c8:	d007      	beq.n	80008da <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008ca:	689a      	ldr	r2, [r3, #8]
 80008cc:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008d0:	2a08      	cmp	r2, #8
 80008d2:	d10a      	bne.n	80008ea <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	025a      	lsls	r2, r3, #9
 80008d8:	d507      	bpl.n	80008ea <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008da:	4b8c      	ldr	r3, [pc, #560]	; (8000b0c <HAL_RCC_OscConfig+0x2d8>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	039b      	lsls	r3, r3, #14
 80008e0:	d5b1      	bpl.n	8000846 <HAL_RCC_OscConfig+0x12>
 80008e2:	6863      	ldr	r3, [r4, #4]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1ae      	bne.n	8000846 <HAL_RCC_OscConfig+0x12>
 80008e8:	e7a7      	b.n	800083a <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ea:	6863      	ldr	r3, [r4, #4]
 80008ec:	4d87      	ldr	r5, [pc, #540]	; (8000b0c <HAL_RCC_OscConfig+0x2d8>)
 80008ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008f2:	d111      	bne.n	8000918 <HAL_RCC_OscConfig+0xe4>
 80008f4:	682b      	ldr	r3, [r5, #0]
 80008f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008fa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008fc:	f7ff fe22 	bl	8000544 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000900:	4d82      	ldr	r5, [pc, #520]	; (8000b0c <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000902:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000904:	682b      	ldr	r3, [r5, #0]
 8000906:	039f      	lsls	r7, r3, #14
 8000908:	d49d      	bmi.n	8000846 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800090a:	f7ff fe1b 	bl	8000544 <HAL_GetTick>
 800090e:	1b80      	subs	r0, r0, r6
 8000910:	2864      	cmp	r0, #100	; 0x64
 8000912:	d9f7      	bls.n	8000904 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8000914:	2003      	movs	r0, #3
 8000916:	e791      	b.n	800083c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800091c:	d104      	bne.n	8000928 <HAL_RCC_OscConfig+0xf4>
 800091e:	682b      	ldr	r3, [r5, #0]
 8000920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000924:	602b      	str	r3, [r5, #0]
 8000926:	e7e5      	b.n	80008f4 <HAL_RCC_OscConfig+0xc0>
 8000928:	682a      	ldr	r2, [r5, #0]
 800092a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800092e:	602a      	str	r2, [r5, #0]
 8000930:	682a      	ldr	r2, [r5, #0]
 8000932:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000936:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000938:	2b00      	cmp	r3, #0
 800093a:	d1df      	bne.n	80008fc <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 800093c:	f7ff fe02 	bl	8000544 <HAL_GetTick>
 8000940:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000942:	682b      	ldr	r3, [r5, #0]
 8000944:	0398      	lsls	r0, r3, #14
 8000946:	f57f af7e 	bpl.w	8000846 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800094a:	f7ff fdfb 	bl	8000544 <HAL_GetTick>
 800094e:	1b80      	subs	r0, r0, r6
 8000950:	2864      	cmp	r0, #100	; 0x64
 8000952:	d9f6      	bls.n	8000942 <HAL_RCC_OscConfig+0x10e>
 8000954:	e7de      	b.n	8000914 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000956:	4b6d      	ldr	r3, [pc, #436]	; (8000b0c <HAL_RCC_OscConfig+0x2d8>)
 8000958:	689a      	ldr	r2, [r3, #8]
 800095a:	f012 0f0c 	tst.w	r2, #12
 800095e:	d007      	beq.n	8000970 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000960:	689a      	ldr	r2, [r3, #8]
 8000962:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000966:	2a08      	cmp	r2, #8
 8000968:	d112      	bne.n	8000990 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	0259      	lsls	r1, r3, #9
 800096e:	d40f      	bmi.n	8000990 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000970:	4b66      	ldr	r3, [pc, #408]	; (8000b0c <HAL_RCC_OscConfig+0x2d8>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	0792      	lsls	r2, r2, #30
 8000976:	d503      	bpl.n	8000980 <HAL_RCC_OscConfig+0x14c>
 8000978:	68e2      	ldr	r2, [r4, #12]
 800097a:	2a01      	cmp	r2, #1
 800097c:	f47f af5d 	bne.w	800083a <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	6921      	ldr	r1, [r4, #16]
 8000984:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000988:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800098c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800098e:	e75e      	b.n	800084e <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000990:	68e2      	ldr	r2, [r4, #12]
 8000992:	4b60      	ldr	r3, [pc, #384]	; (8000b14 <HAL_RCC_OscConfig+0x2e0>)
 8000994:	b1b2      	cbz	r2, 80009c4 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8000996:	2201      	movs	r2, #1
 8000998:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800099a:	f7ff fdd3 	bl	8000544 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800099e:	4d5b      	ldr	r5, [pc, #364]	; (8000b0c <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80009a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009a2:	682b      	ldr	r3, [r5, #0]
 80009a4:	079b      	lsls	r3, r3, #30
 80009a6:	d507      	bpl.n	80009b8 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009a8:	682b      	ldr	r3, [r5, #0]
 80009aa:	6922      	ldr	r2, [r4, #16]
 80009ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009b0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009b4:	602b      	str	r3, [r5, #0]
 80009b6:	e74a      	b.n	800084e <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009b8:	f7ff fdc4 	bl	8000544 <HAL_GetTick>
 80009bc:	1b80      	subs	r0, r0, r6
 80009be:	2802      	cmp	r0, #2
 80009c0:	d9ef      	bls.n	80009a2 <HAL_RCC_OscConfig+0x16e>
 80009c2:	e7a7      	b.n	8000914 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 80009c4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009c6:	f7ff fdbd 	bl	8000544 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009ca:	4d50      	ldr	r5, [pc, #320]	; (8000b0c <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80009cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009ce:	682b      	ldr	r3, [r5, #0]
 80009d0:	079f      	lsls	r7, r3, #30
 80009d2:	f57f af3c 	bpl.w	800084e <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009d6:	f7ff fdb5 	bl	8000544 <HAL_GetTick>
 80009da:	1b80      	subs	r0, r0, r6
 80009dc:	2802      	cmp	r0, #2
 80009de:	d9f6      	bls.n	80009ce <HAL_RCC_OscConfig+0x19a>
 80009e0:	e798      	b.n	8000914 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009e2:	6962      	ldr	r2, [r4, #20]
 80009e4:	4b4c      	ldr	r3, [pc, #304]	; (8000b18 <HAL_RCC_OscConfig+0x2e4>)
 80009e6:	b17a      	cbz	r2, 8000a08 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 80009e8:	2201      	movs	r2, #1
 80009ea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009ec:	f7ff fdaa 	bl	8000544 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009f0:	4d46      	ldr	r5, [pc, #280]	; (8000b0c <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80009f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009f4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009f6:	0798      	lsls	r0, r3, #30
 80009f8:	f53f af2d 	bmi.w	8000856 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009fc:	f7ff fda2 	bl	8000544 <HAL_GetTick>
 8000a00:	1b80      	subs	r0, r0, r6
 8000a02:	2802      	cmp	r0, #2
 8000a04:	d9f6      	bls.n	80009f4 <HAL_RCC_OscConfig+0x1c0>
 8000a06:	e785      	b.n	8000914 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 8000a08:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a0a:	f7ff fd9b 	bl	8000544 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a0e:	4d3f      	ldr	r5, [pc, #252]	; (8000b0c <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000a10:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a12:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a14:	0799      	lsls	r1, r3, #30
 8000a16:	f57f af1e 	bpl.w	8000856 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a1a:	f7ff fd93 	bl	8000544 <HAL_GetTick>
 8000a1e:	1b80      	subs	r0, r0, r6
 8000a20:	2802      	cmp	r0, #2
 8000a22:	d9f6      	bls.n	8000a12 <HAL_RCC_OscConfig+0x1de>
 8000a24:	e776      	b.n	8000914 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000a26:	f7ff fd8d 	bl	8000544 <HAL_GetTick>
 8000a2a:	1b80      	subs	r0, r0, r6
 8000a2c:	2802      	cmp	r0, #2
 8000a2e:	f67f af29 	bls.w	8000884 <HAL_RCC_OscConfig+0x50>
 8000a32:	e76f      	b.n	8000914 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a34:	2b05      	cmp	r3, #5
 8000a36:	d104      	bne.n	8000a42 <HAL_RCC_OscConfig+0x20e>
 8000a38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
 8000a3e:	672b      	str	r3, [r5, #112]	; 0x70
 8000a40:	e729      	b.n	8000896 <HAL_RCC_OscConfig+0x62>
 8000a42:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a44:	f022 0201 	bic.w	r2, r2, #1
 8000a48:	672a      	str	r2, [r5, #112]	; 0x70
 8000a4a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a4c:	f022 0204 	bic.w	r2, r2, #4
 8000a50:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f47f af23 	bne.w	800089e <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8000a58:	f7ff fd74 	bl	8000544 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a5c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a60:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a62:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a64:	0798      	lsls	r0, r3, #30
 8000a66:	f57f af24 	bpl.w	80008b2 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a6a:	f7ff fd6b 	bl	8000544 <HAL_GetTick>
 8000a6e:	1b80      	subs	r0, r0, r6
 8000a70:	42b8      	cmp	r0, r7
 8000a72:	d9f6      	bls.n	8000a62 <HAL_RCC_OscConfig+0x22e>
 8000a74:	e74e      	b.n	8000914 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a76:	f7ff fd65 	bl	8000544 <HAL_GetTick>
 8000a7a:	1b80      	subs	r0, r0, r6
 8000a7c:	42b8      	cmp	r0, r7
 8000a7e:	f67f af14 	bls.w	80008aa <HAL_RCC_OscConfig+0x76>
 8000a82:	e747      	b.n	8000914 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a84:	4d21      	ldr	r5, [pc, #132]	; (8000b0c <HAL_RCC_OscConfig+0x2d8>)
 8000a86:	68ab      	ldr	r3, [r5, #8]
 8000a88:	f003 030c 	and.w	r3, r3, #12
 8000a8c:	2b08      	cmp	r3, #8
 8000a8e:	f43f aed4 	beq.w	800083a <HAL_RCC_OscConfig+0x6>
 8000a92:	4e22      	ldr	r6, [pc, #136]	; (8000b1c <HAL_RCC_OscConfig+0x2e8>)
 8000a94:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a96:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a98:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a9a:	d12a      	bne.n	8000af2 <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8000a9c:	f7ff fd52 	bl	8000544 <HAL_GetTick>
 8000aa0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000aa2:	682b      	ldr	r3, [r5, #0]
 8000aa4:	0199      	lsls	r1, r3, #6
 8000aa6:	d41e      	bmi.n	8000ae6 <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000aa8:	6a22      	ldr	r2, [r4, #32]
 8000aaa:	69e3      	ldr	r3, [r4, #28]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ab0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ab4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ab6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000aba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000abc:	4c13      	ldr	r4, [pc, #76]	; (8000b0c <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000abe:	0852      	lsrs	r2, r2, #1
 8000ac0:	3a01      	subs	r2, #1
 8000ac2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ac6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ac8:	2301      	movs	r3, #1
 8000aca:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000acc:	f7ff fd3a 	bl	8000544 <HAL_GetTick>
 8000ad0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ad2:	6823      	ldr	r3, [r4, #0]
 8000ad4:	019a      	lsls	r2, r3, #6
 8000ad6:	f53f aef0 	bmi.w	80008ba <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ada:	f7ff fd33 	bl	8000544 <HAL_GetTick>
 8000ade:	1b40      	subs	r0, r0, r5
 8000ae0:	2802      	cmp	r0, #2
 8000ae2:	d9f6      	bls.n	8000ad2 <HAL_RCC_OscConfig+0x29e>
 8000ae4:	e716      	b.n	8000914 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ae6:	f7ff fd2d 	bl	8000544 <HAL_GetTick>
 8000aea:	1bc0      	subs	r0, r0, r7
 8000aec:	2802      	cmp	r0, #2
 8000aee:	d9d8      	bls.n	8000aa2 <HAL_RCC_OscConfig+0x26e>
 8000af0:	e710      	b.n	8000914 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8000af2:	f7ff fd27 	bl	8000544 <HAL_GetTick>
 8000af6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000af8:	682b      	ldr	r3, [r5, #0]
 8000afa:	019b      	lsls	r3, r3, #6
 8000afc:	f57f aedd 	bpl.w	80008ba <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b00:	f7ff fd20 	bl	8000544 <HAL_GetTick>
 8000b04:	1b00      	subs	r0, r0, r4
 8000b06:	2802      	cmp	r0, #2
 8000b08:	d9f6      	bls.n	8000af8 <HAL_RCC_OscConfig+0x2c4>
 8000b0a:	e703      	b.n	8000914 <HAL_RCC_OscConfig+0xe0>
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40007000 	.word	0x40007000
 8000b14:	42470000 	.word	0x42470000
 8000b18:	42470e80 	.word	0x42470e80
 8000b1c:	42470060 	.word	0x42470060

08000b20 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b20:	4913      	ldr	r1, [pc, #76]	; (8000b70 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b22:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b24:	688b      	ldr	r3, [r1, #8]
 8000b26:	f003 030c 	and.w	r3, r3, #12
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d003      	beq.n	8000b36 <HAL_RCC_GetSysClockFreq+0x16>
 8000b2e:	2b08      	cmp	r3, #8
 8000b30:	d003      	beq.n	8000b3a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b32:	4810      	ldr	r0, [pc, #64]	; (8000b74 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b34:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b36:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b38:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b3a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b3c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b3e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b40:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b44:	bf14      	ite	ne
 8000b46:	480c      	ldrne	r0, [pc, #48]	; (8000b78 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b48:	480a      	ldreq	r0, [pc, #40]	; (8000b74 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b4a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b4e:	bf18      	it	ne
 8000b50:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b52:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b56:	fba1 0100 	umull	r0, r1, r1, r0
 8000b5a:	f7ff fb35 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b5e:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b66:	3301      	adds	r3, #1
 8000b68:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b6e:	bd08      	pop	{r3, pc}
 8000b70:	40023800 	.word	0x40023800
 8000b74:	00f42400 	.word	0x00f42400
 8000b78:	017d7840 	.word	0x017d7840

08000b7c <HAL_RCC_ClockConfig>:
{
 8000b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b80:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b82:	4604      	mov	r4, r0
 8000b84:	b910      	cbnz	r0, 8000b8c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b86:	2001      	movs	r0, #1
 8000b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b8c:	4b44      	ldr	r3, [pc, #272]	; (8000ca0 <HAL_RCC_ClockConfig+0x124>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	f002 020f 	and.w	r2, r2, #15
 8000b94:	428a      	cmp	r2, r1
 8000b96:	d328      	bcc.n	8000bea <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b98:	6821      	ldr	r1, [r4, #0]
 8000b9a:	078f      	lsls	r7, r1, #30
 8000b9c:	d42d      	bmi.n	8000bfa <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b9e:	07c8      	lsls	r0, r1, #31
 8000ba0:	d440      	bmi.n	8000c24 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ba2:	4b3f      	ldr	r3, [pc, #252]	; (8000ca0 <HAL_RCC_ClockConfig+0x124>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	f002 020f 	and.w	r2, r2, #15
 8000baa:	4295      	cmp	r5, r2
 8000bac:	d366      	bcc.n	8000c7c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bae:	6822      	ldr	r2, [r4, #0]
 8000bb0:	0751      	lsls	r1, r2, #29
 8000bb2:	d46c      	bmi.n	8000c8e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bb4:	0713      	lsls	r3, r2, #28
 8000bb6:	d507      	bpl.n	8000bc8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000bb8:	4a3a      	ldr	r2, [pc, #232]	; (8000ca4 <HAL_RCC_ClockConfig+0x128>)
 8000bba:	6921      	ldr	r1, [r4, #16]
 8000bbc:	6893      	ldr	r3, [r2, #8]
 8000bbe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000bc2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bc6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000bc8:	f7ff ffaa 	bl	8000b20 <HAL_RCC_GetSysClockFreq>
 8000bcc:	4b35      	ldr	r3, [pc, #212]	; (8000ca4 <HAL_RCC_ClockConfig+0x128>)
 8000bce:	4a36      	ldr	r2, [pc, #216]	; (8000ca8 <HAL_RCC_ClockConfig+0x12c>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000bd6:	5cd3      	ldrb	r3, [r2, r3]
 8000bd8:	40d8      	lsrs	r0, r3
 8000bda:	4b34      	ldr	r3, [pc, #208]	; (8000cac <HAL_RCC_ClockConfig+0x130>)
 8000bdc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bde:	2000      	movs	r0, #0
 8000be0:	f7ff fc7a 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8000be4:	2000      	movs	r0, #0
 8000be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bea:	b2ca      	uxtb	r2, r1
 8000bec:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f003 030f 	and.w	r3, r3, #15
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d1c6      	bne.n	8000b86 <HAL_RCC_ClockConfig+0xa>
 8000bf8:	e7ce      	b.n	8000b98 <HAL_RCC_ClockConfig+0x1c>
 8000bfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bfc:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c00:	bf1e      	ittt	ne
 8000c02:	689a      	ldrne	r2, [r3, #8]
 8000c04:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c08:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c0a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c0c:	bf42      	ittt	mi
 8000c0e:	689a      	ldrmi	r2, [r3, #8]
 8000c10:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c14:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c16:	689a      	ldr	r2, [r3, #8]
 8000c18:	68a0      	ldr	r0, [r4, #8]
 8000c1a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c1e:	4302      	orrs	r2, r0
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	e7bc      	b.n	8000b9e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c24:	6862      	ldr	r2, [r4, #4]
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <HAL_RCC_ClockConfig+0x128>)
 8000c28:	2a01      	cmp	r2, #1
 8000c2a:	d11d      	bne.n	8000c68 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c32:	d0a8      	beq.n	8000b86 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c34:	4e1b      	ldr	r6, [pc, #108]	; (8000ca4 <HAL_RCC_ClockConfig+0x128>)
 8000c36:	68b3      	ldr	r3, [r6, #8]
 8000c38:	f023 0303 	bic.w	r3, r3, #3
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c40:	f7ff fc80 	bl	8000544 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c44:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c48:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c4a:	68b3      	ldr	r3, [r6, #8]
 8000c4c:	6862      	ldr	r2, [r4, #4]
 8000c4e:	f003 030c 	and.w	r3, r3, #12
 8000c52:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c56:	d0a4      	beq.n	8000ba2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c58:	f7ff fc74 	bl	8000544 <HAL_GetTick>
 8000c5c:	1bc0      	subs	r0, r0, r7
 8000c5e:	4540      	cmp	r0, r8
 8000c60:	d9f3      	bls.n	8000c4a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c62:	2003      	movs	r0, #3
}
 8000c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c68:	1e91      	subs	r1, r2, #2
 8000c6a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c6c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c6e:	d802      	bhi.n	8000c76 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c70:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c74:	e7dd      	b.n	8000c32 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c76:	f013 0f02 	tst.w	r3, #2
 8000c7a:	e7da      	b.n	8000c32 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c7c:	b2ea      	uxtb	r2, r5
 8000c7e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	429d      	cmp	r5, r3
 8000c88:	f47f af7d 	bne.w	8000b86 <HAL_RCC_ClockConfig+0xa>
 8000c8c:	e78f      	b.n	8000bae <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c8e:	4905      	ldr	r1, [pc, #20]	; (8000ca4 <HAL_RCC_ClockConfig+0x128>)
 8000c90:	68e0      	ldr	r0, [r4, #12]
 8000c92:	688b      	ldr	r3, [r1, #8]
 8000c94:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c98:	4303      	orrs	r3, r0
 8000c9a:	608b      	str	r3, [r1, #8]
 8000c9c:	e78a      	b.n	8000bb4 <HAL_RCC_ClockConfig+0x38>
 8000c9e:	bf00      	nop
 8000ca0:	40023c00 	.word	0x40023c00
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	08001c28 	.word	0x08001c28
 8000cac:	20000000 	.word	0x20000000

08000cb0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000cb0:	4b01      	ldr	r3, [pc, #4]	; (8000cb8 <HAL_RCC_GetHCLKFreq+0x8>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000000 	.word	0x20000000

08000cbc <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cc0:	9e06      	ldr	r6, [sp, #24]
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	4688      	mov	r8, r1
 8000cc6:	4617      	mov	r7, r2
 8000cc8:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000cca:	6822      	ldr	r2, [r4, #0]
 8000ccc:	6893      	ldr	r3, [r2, #8]
 8000cce:	ea38 0303 	bics.w	r3, r8, r3
 8000cd2:	bf0c      	ite	eq
 8000cd4:	2301      	moveq	r3, #1
 8000cd6:	2300      	movne	r3, #0
 8000cd8:	429f      	cmp	r7, r3
 8000cda:	d102      	bne.n	8000ce2 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000cdc:	2000      	movs	r0, #0
}
 8000cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000ce2:	1c6b      	adds	r3, r5, #1
 8000ce4:	d0f2      	beq.n	8000ccc <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000ce6:	bb55      	cbnz	r5, 8000d3e <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000ce8:	6823      	ldr	r3, [r4, #0]
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000cf0:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000cf2:	6862      	ldr	r2, [r4, #4]
 8000cf4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000cf8:	d10a      	bne.n	8000d10 <SPI_WaitFlagStateUntilTimeout+0x54>
 8000cfa:	68a2      	ldr	r2, [r4, #8]
 8000cfc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000d00:	d002      	beq.n	8000d08 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8000d02:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000d06:	d103      	bne.n	8000d10 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d0e:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000d10:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d12:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000d16:	d109      	bne.n	8000d2c <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000d1e:	0412      	lsls	r2, r2, #16
 8000d20:	0c12      	lsrs	r2, r2, #16
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d2a:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000d32:	2300      	movs	r3, #0
 8000d34:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000d38:	2003      	movs	r0, #3
 8000d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000d3e:	f7ff fc01 	bl	8000544 <HAL_GetTick>
 8000d42:	1b80      	subs	r0, r0, r6
 8000d44:	4285      	cmp	r5, r0
 8000d46:	d8c0      	bhi.n	8000cca <SPI_WaitFlagStateUntilTimeout+0xe>
 8000d48:	e7ce      	b.n	8000ce8 <SPI_WaitFlagStateUntilTimeout+0x2c>

08000d4a <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000d4a:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	9200      	str	r2, [sp, #0]
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	2200      	movs	r2, #0
{
 8000d54:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000d56:	f7ff ffb1 	bl	8000cbc <SPI_WaitFlagStateUntilTimeout>
 8000d5a:	b120      	cbz	r0, 8000d66 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000d5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d5e:	f043 0320 	orr.w	r3, r3, #32
 8000d62:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8000d64:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8000d66:	b002      	add	sp, #8
 8000d68:	bd10      	pop	{r4, pc}

08000d6a <HAL_SPI_Init>:
{
 8000d6a:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	2800      	cmp	r0, #0
 8000d70:	d036      	beq.n	8000de0 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8000d76:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000d7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d7e:	b91b      	cbnz	r3, 8000d88 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000d80:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000d84:	f000 fe90 	bl	8001aa8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000d88:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000d8a:	68a0      	ldr	r0, [r4, #8]
 8000d8c:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000d94:	680b      	ldr	r3, [r1, #0]
 8000d96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d9a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000d9c:	6863      	ldr	r3, [r4, #4]
 8000d9e:	4303      	orrs	r3, r0
 8000da0:	68e0      	ldr	r0, [r4, #12]
 8000da2:	4303      	orrs	r3, r0
 8000da4:	6920      	ldr	r0, [r4, #16]
 8000da6:	4303      	orrs	r3, r0
 8000da8:	6960      	ldr	r0, [r4, #20]
 8000daa:	4303      	orrs	r3, r0
 8000dac:	69e0      	ldr	r0, [r4, #28]
 8000dae:	4303      	orrs	r3, r0
 8000db0:	6a20      	ldr	r0, [r4, #32]
 8000db2:	4303      	orrs	r3, r0
 8000db4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000db6:	4303      	orrs	r3, r0
 8000db8:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000dbc:	4303      	orrs	r3, r0
 8000dbe:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000dc0:	0c12      	lsrs	r2, r2, #16
 8000dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000dc4:	f002 0204 	and.w	r2, r2, #4
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000dcc:	69cb      	ldr	r3, [r1, #28]
 8000dce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dd2:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dd4:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000dd6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dd8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000dda:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000dde:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000de0:	2001      	movs	r0, #1
}
 8000de2:	bd10      	pop	{r4, pc}

08000de4 <HAL_SPI_Transmit>:
{
 8000de4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000de8:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000dea:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000dee:	2b01      	cmp	r3, #1
{
 8000df0:	4604      	mov	r4, r0
 8000df2:	460d      	mov	r5, r1
 8000df4:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000df6:	f000 809c 	beq.w	8000f32 <HAL_SPI_Transmit+0x14e>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000e00:	f7ff fba0 	bl	8000544 <HAL_GetTick>
 8000e04:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000e06:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000e0a:	b2c0      	uxtb	r0, r0
 8000e0c:	2801      	cmp	r0, #1
 8000e0e:	f040 808e 	bne.w	8000f2e <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0))
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d04e      	beq.n	8000eb4 <HAL_SPI_Transmit+0xd0>
 8000e16:	f1b8 0f00 	cmp.w	r8, #0
 8000e1a:	d04b      	beq.n	8000eb4 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000e26:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000e28:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000e2c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000e2e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000e30:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000e32:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e34:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000e36:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e3c:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8000e3e:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000e42:	bf02      	ittt	eq
 8000e44:	681a      	ldreq	r2, [r3, #0]
 8000e46:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8000e4a:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000e50:	bf5e      	ittt	pl
 8000e52:	681a      	ldrpl	r2, [r3, #0]
 8000e54:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000e58:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000e5a:	68e2      	ldr	r2, [r4, #12]
 8000e5c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000e60:	6862      	ldr	r2, [r4, #4]
 8000e62:	d138      	bne.n	8000ed6 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000e64:	b11a      	cbz	r2, 8000e6e <HAL_SPI_Transmit+0x8a>
 8000e66:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000e68:	b292      	uxth	r2, r2
 8000e6a:	2a01      	cmp	r2, #1
 8000e6c:	d106      	bne.n	8000e7c <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000e6e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000e72:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8000e74:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e76:	3b01      	subs	r3, #1
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000e7c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	b993      	cbnz	r3, 8000ea8 <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000e82:	9700      	str	r7, [sp, #0]
 8000e84:	4633      	mov	r3, r6
 8000e86:	2201      	movs	r2, #1
 8000e88:	2102      	movs	r1, #2
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	f7ff ff16 	bl	8000cbc <SPI_WaitFlagStateUntilTimeout>
 8000e90:	b978      	cbnz	r0, 8000eb2 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000e92:	463a      	mov	r2, r7
 8000e94:	4631      	mov	r1, r6
 8000e96:	4620      	mov	r0, r4
 8000e98:	f7ff ff57 	bl	8000d4a <SPI_CheckFlag_BSY>
 8000e9c:	2800      	cmp	r0, #0
 8000e9e:	d038      	beq.n	8000f12 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000ea0:	2320      	movs	r3, #32
 8000ea2:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000ea4:	2001      	movs	r0, #1
    goto error;
 8000ea6:	e005      	b.n	8000eb4 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	0790      	lsls	r0, r2, #30
 8000eae:	d4de      	bmi.n	8000e6e <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000eb0:	b94e      	cbnz	r6, 8000ec6 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8000eb2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000ec0:	b004      	add	sp, #16
 8000ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000ec6:	1c71      	adds	r1, r6, #1
 8000ec8:	d0d8      	beq.n	8000e7c <HAL_SPI_Transmit+0x98>
 8000eca:	f7ff fb3b 	bl	8000544 <HAL_GetTick>
 8000ece:	1bc0      	subs	r0, r0, r7
 8000ed0:	4286      	cmp	r6, r0
 8000ed2:	d8d3      	bhi.n	8000e7c <HAL_SPI_Transmit+0x98>
 8000ed4:	e7ed      	b.n	8000eb2 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8000ed6:	b11a      	cbz	r2, 8000ee0 <HAL_SPI_Transmit+0xfc>
 8000ed8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000eda:	b292      	uxth	r2, r2
 8000edc:	2a01      	cmp	r2, #1
 8000ede:	d106      	bne.n	8000eee <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000ee0:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000ee4:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000ee6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000eee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d0c5      	beq.n	8000e82 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000ef6:	6823      	ldr	r3, [r4, #0]
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	0792      	lsls	r2, r2, #30
 8000efc:	d4f0      	bmi.n	8000ee0 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000efe:	2e00      	cmp	r6, #0
 8000f00:	d0d7      	beq.n	8000eb2 <HAL_SPI_Transmit+0xce>
 8000f02:	1c73      	adds	r3, r6, #1
 8000f04:	d0f3      	beq.n	8000eee <HAL_SPI_Transmit+0x10a>
 8000f06:	f7ff fb1d 	bl	8000544 <HAL_GetTick>
 8000f0a:	1bc0      	subs	r0, r0, r7
 8000f0c:	4286      	cmp	r6, r0
 8000f0e:	d8ee      	bhi.n	8000eee <HAL_SPI_Transmit+0x10a>
 8000f10:	e7cf      	b.n	8000eb2 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000f12:	68a3      	ldr	r3, [r4, #8]
 8000f14:	b933      	cbnz	r3, 8000f24 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000f16:	9303      	str	r3, [sp, #12]
 8000f18:	6823      	ldr	r3, [r4, #0]
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	9203      	str	r2, [sp, #12]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	9303      	str	r3, [sp, #12]
 8000f22:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000f24:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000f26:	3000      	adds	r0, #0
 8000f28:	bf18      	it	ne
 8000f2a:	2001      	movne	r0, #1
 8000f2c:	e7c2      	b.n	8000eb4 <HAL_SPI_Transmit+0xd0>
 8000f2e:	2002      	movs	r0, #2
 8000f30:	e7c0      	b.n	8000eb4 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8000f32:	2002      	movs	r0, #2
 8000f34:	e7c4      	b.n	8000ec0 <HAL_SPI_Transmit+0xdc>

08000f36 <HAL_SPI_TransmitReceive>:
{
 8000f36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f3a:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8000f3c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000f40:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8000f42:	2b01      	cmp	r3, #1
{
 8000f44:	4604      	mov	r4, r0
 8000f46:	460d      	mov	r5, r1
 8000f48:	4616      	mov	r6, r2
 8000f4a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8000f4c:	f000 80ed 	beq.w	800112a <HAL_SPI_TransmitReceive+0x1f4>
 8000f50:	2301      	movs	r3, #1
 8000f52:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000f56:	f7ff faf5 	bl	8000544 <HAL_GetTick>
  tmp  = hspi->State;
 8000f5a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8000f5e:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8000f60:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000f62:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8000f64:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000f66:	d00a      	beq.n	8000f7e <HAL_SPI_TransmitReceive+0x48>
 8000f68:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000f6c:	f040 80db 	bne.w	8001126 <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000f70:	68a2      	ldr	r2, [r4, #8]
 8000f72:	2a00      	cmp	r2, #0
 8000f74:	f040 80d7 	bne.w	8001126 <HAL_SPI_TransmitReceive+0x1f0>
 8000f78:	2b04      	cmp	r3, #4
 8000f7a:	f040 80d4 	bne.w	8001126 <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8000f7e:	2d00      	cmp	r5, #0
 8000f80:	d04e      	beq.n	8001020 <HAL_SPI_TransmitReceive+0xea>
 8000f82:	2e00      	cmp	r6, #0
 8000f84:	d04c      	beq.n	8001020 <HAL_SPI_TransmitReceive+0xea>
 8000f86:	f1b9 0f00 	cmp.w	r9, #0
 8000f8a:	d049      	beq.n	8001020 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8000f8c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000f90:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8000f92:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000f94:	bf04      	itt	eq
 8000f96:	2305      	moveq	r3, #5
 8000f98:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000fa0:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000fa2:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000fa4:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000fa6:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000faa:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000fae:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000fb0:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000fb4:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000fb6:	bf58      	it	pl
 8000fb8:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000fba:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000fbc:	bf58      	it	pl
 8000fbe:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000fc2:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000fc6:	bf58      	it	pl
 8000fc8:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000fca:	68e2      	ldr	r2, [r4, #12]
 8000fcc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000fd0:	d15d      	bne.n	800108e <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000fd2:	b119      	cbz	r1, 8000fdc <HAL_SPI_TransmitReceive+0xa6>
 8000fd4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000fd6:	b292      	uxth	r2, r2
 8000fd8:	2a01      	cmp	r2, #1
 8000fda:	d106      	bne.n	8000fea <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8000fdc:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000fe0:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000fe2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000fea:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000fee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	b9bb      	cbnz	r3, 8001024 <HAL_SPI_TransmitReceive+0xee>
 8000ff4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	b9a3      	cbnz	r3, 8001024 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000ffa:	f8cd 8000 	str.w	r8, [sp]
 8000ffe:	463b      	mov	r3, r7
 8001000:	2201      	movs	r2, #1
 8001002:	2102      	movs	r1, #2
 8001004:	4620      	mov	r0, r4
 8001006:	f7ff fe59 	bl	8000cbc <SPI_WaitFlagStateUntilTimeout>
 800100a:	2800      	cmp	r0, #0
 800100c:	d135      	bne.n	800107a <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800100e:	4642      	mov	r2, r8
 8001010:	4639      	mov	r1, r7
 8001012:	4620      	mov	r0, r4
 8001014:	f7ff fe99 	bl	8000d4a <SPI_CheckFlag_BSY>
 8001018:	2800      	cmp	r0, #0
 800101a:	d079      	beq.n	8001110 <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800101c:	2320      	movs	r3, #32
 800101e:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001020:	2001      	movs	r0, #1
 8001022:	e02b      	b.n	800107c <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001024:	f1b9 0f00 	cmp.w	r9, #0
 8001028:	d00f      	beq.n	800104a <HAL_SPI_TransmitReceive+0x114>
 800102a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800102c:	b29b      	uxth	r3, r3
 800102e:	b163      	cbz	r3, 800104a <HAL_SPI_TransmitReceive+0x114>
 8001030:	6823      	ldr	r3, [r4, #0]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	0791      	lsls	r1, r2, #30
 8001036:	d508      	bpl.n	800104a <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001038:	f835 2b02 	ldrh.w	r2, [r5], #2
 800103c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800103e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001040:	3b01      	subs	r3, #1
 8001042:	b29b      	uxth	r3, r3
 8001044:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001046:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800104a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800104c:	b29b      	uxth	r3, r3
 800104e:	b163      	cbz	r3, 800106a <HAL_SPI_TransmitReceive+0x134>
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	07d2      	lsls	r2, r2, #31
 8001056:	d508      	bpl.n	800106a <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 800105e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001060:	3b01      	subs	r3, #1
 8001062:	b29b      	uxth	r3, r3
 8001064:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001066:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800106a:	1c78      	adds	r0, r7, #1
 800106c:	d0bf      	beq.n	8000fee <HAL_SPI_TransmitReceive+0xb8>
 800106e:	f7ff fa69 	bl	8000544 <HAL_GetTick>
 8001072:	eba0 0008 	sub.w	r0, r0, r8
 8001076:	4287      	cmp	r7, r0
 8001078:	d8b9      	bhi.n	8000fee <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 800107a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800107c:	2301      	movs	r3, #1
 800107e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001082:	2300      	movs	r3, #0
 8001084:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001088:	b005      	add	sp, #20
 800108a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800108e:	b119      	cbz	r1, 8001098 <HAL_SPI_TransmitReceive+0x162>
 8001090:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001092:	b292      	uxth	r2, r2
 8001094:	2a01      	cmp	r2, #1
 8001096:	d106      	bne.n	80010a6 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8001098:	f815 2b01 	ldrb.w	r2, [r5], #1
 800109c:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 800109e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010a0:	3b01      	subs	r3, #1
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80010a6:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80010aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	b91b      	cbnz	r3, 80010b8 <HAL_SPI_TransmitReceive+0x182>
 80010b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0a0      	beq.n	8000ffa <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80010b8:	f1b9 0f00 	cmp.w	r9, #0
 80010bc:	d00f      	beq.n	80010de <HAL_SPI_TransmitReceive+0x1a8>
 80010be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	b163      	cbz	r3, 80010de <HAL_SPI_TransmitReceive+0x1a8>
 80010c4:	6823      	ldr	r3, [r4, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	0791      	lsls	r1, r2, #30
 80010ca:	d508      	bpl.n	80010de <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80010cc:	782a      	ldrb	r2, [r5, #0]
 80010ce:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80010d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010d2:	3b01      	subs	r3, #1
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80010d8:	3501      	adds	r5, #1
        txallowed = 0U;
 80010da:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80010de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	b163      	cbz	r3, 80010fe <HAL_SPI_TransmitReceive+0x1c8>
 80010e4:	6823      	ldr	r3, [r4, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	07d2      	lsls	r2, r2, #31
 80010ea:	d508      	bpl.n	80010fe <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 80010f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010f2:	3b01      	subs	r3, #1
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80010f8:	3601      	adds	r6, #1
        txallowed = 1U;
 80010fa:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80010fe:	1c7b      	adds	r3, r7, #1
 8001100:	d0d3      	beq.n	80010aa <HAL_SPI_TransmitReceive+0x174>
 8001102:	f7ff fa1f 	bl	8000544 <HAL_GetTick>
 8001106:	eba0 0008 	sub.w	r0, r0, r8
 800110a:	4287      	cmp	r7, r0
 800110c:	d8cd      	bhi.n	80010aa <HAL_SPI_TransmitReceive+0x174>
 800110e:	e7b4      	b.n	800107a <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001110:	68a3      	ldr	r3, [r4, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1b2      	bne.n	800107c <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	9003      	str	r0, [sp, #12]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	9203      	str	r2, [sp, #12]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	9303      	str	r3, [sp, #12]
 8001122:	9b03      	ldr	r3, [sp, #12]
 8001124:	e7aa      	b.n	800107c <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8001126:	2002      	movs	r0, #2
 8001128:	e7a8      	b.n	800107c <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 800112a:	2002      	movs	r0, #2
 800112c:	e7ac      	b.n	8001088 <HAL_SPI_TransmitReceive+0x152>

0800112e <HAL_SPI_Receive>:
{
 800112e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001132:	461e      	mov	r6, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001134:	6843      	ldr	r3, [r0, #4]
 8001136:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 800113a:	4604      	mov	r4, r0
 800113c:	460d      	mov	r5, r1
 800113e:	4690      	mov	r8, r2
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001140:	d10c      	bne.n	800115c <HAL_SPI_Receive+0x2e>
 8001142:	6883      	ldr	r3, [r0, #8]
 8001144:	b953      	cbnz	r3, 800115c <HAL_SPI_Receive+0x2e>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001146:	2304      	movs	r3, #4
 8001148:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 800114c:	4613      	mov	r3, r2
 800114e:	9600      	str	r6, [sp, #0]
 8001150:	460a      	mov	r2, r1
 8001152:	f7ff fef0 	bl	8000f36 <HAL_SPI_TransmitReceive>
}
 8001156:	b002      	add	sp, #8
 8001158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 800115c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001160:	2b01      	cmp	r3, #1
 8001162:	f000 8081 	beq.w	8001268 <HAL_SPI_Receive+0x13a>
 8001166:	2301      	movs	r3, #1
 8001168:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800116c:	f7ff f9ea 	bl	8000544 <HAL_GetTick>
 8001170:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8001172:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001176:	b2c0      	uxtb	r0, r0
 8001178:	2801      	cmp	r0, #1
 800117a:	d173      	bne.n	8001264 <HAL_SPI_Receive+0x136>
  if((pData == NULL ) || (Size == 0))
 800117c:	2d00      	cmp	r5, #0
 800117e:	d058      	beq.n	8001232 <HAL_SPI_Receive+0x104>
 8001180:	f1b8 0f00 	cmp.w	r8, #0
 8001184:	d055      	beq.n	8001232 <HAL_SPI_Receive+0x104>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001186:	2304      	movs	r3, #4
 8001188:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800118c:	2300      	movs	r3, #0
 800118e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001190:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8001192:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8001196:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001198:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800119a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800119c:	6463      	str	r3, [r4, #68]	; 0x44
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800119e:	68a3      	ldr	r3, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80011a0:	63a5      	str	r5, [r4, #56]	; 0x38
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80011a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011a6:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferSize  = Size;
 80011a8:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 80011ac:	bf02      	ittt	eq
 80011ae:	681a      	ldreq	r2, [r3, #0]
 80011b0:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 80011b4:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80011ba:	bf5e      	ittt	pl
 80011bc:	681a      	ldrpl	r2, [r3, #0]
 80011be:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80011c2:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80011c4:	68e3      	ldr	r3, [r4, #12]
 80011c6:	b1cb      	cbz	r3, 80011fc <HAL_SPI_Receive+0xce>
    while(hspi->RxXferCount > 0U)
 80011c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	b1d3      	cbz	r3, 8001204 <HAL_SPI_Receive+0xd6>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	07d2      	lsls	r2, r2, #31
 80011d4:	d53c      	bpl.n	8001250 <HAL_SPI_Receive+0x122>
        *((uint16_t*)pData) = hspi->Instance->DR;
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 80011dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011de:	3b01      	subs	r3, #1
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80011e4:	e7f0      	b.n	80011c8 <HAL_SPI_Receive+0x9a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	07d0      	lsls	r0, r2, #31
 80011ec:	d51f      	bpl.n	800122e <HAL_SPI_Receive+0x100>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 80011ee:	7b1b      	ldrb	r3, [r3, #12]
 80011f0:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 80011f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011f6:	3b01      	subs	r3, #1
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while(hspi->RxXferCount > 0U)
 80011fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011fe:	b29b      	uxth	r3, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f0      	bne.n	80011e6 <HAL_SPI_Receive+0xb8>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001204:	6863      	ldr	r3, [r4, #4]
 8001206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800120a:	d10b      	bne.n	8001224 <HAL_SPI_Receive+0xf6>
 800120c:	68a3      	ldr	r3, [r4, #8]
 800120e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001212:	d002      	beq.n	800121a <HAL_SPI_Receive+0xec>
 8001214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001218:	d104      	bne.n	8001224 <HAL_SPI_Receive+0xf6>
    __HAL_SPI_DISABLE(hspi);
 800121a:	6822      	ldr	r2, [r4, #0]
 800121c:	6813      	ldr	r3, [r2, #0]
 800121e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001222:	6013      	str	r3, [r2, #0]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001224:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001226:	3000      	adds	r0, #0
 8001228:	bf18      	it	ne
 800122a:	2001      	movne	r0, #1
 800122c:	e001      	b.n	8001232 <HAL_SPI_Receive+0x104>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800122e:	b93e      	cbnz	r6, 8001240 <HAL_SPI_Receive+0x112>
          errorcode = HAL_TIMEOUT;
 8001230:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001232:	2301      	movs	r3, #1
 8001234:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001238:	2300      	movs	r3, #0
 800123a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 800123e:	e78a      	b.n	8001156 <HAL_SPI_Receive+0x28>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001240:	1c71      	adds	r1, r6, #1
 8001242:	d0db      	beq.n	80011fc <HAL_SPI_Receive+0xce>
 8001244:	f7ff f97e 	bl	8000544 <HAL_GetTick>
 8001248:	1bc0      	subs	r0, r0, r7
 800124a:	4286      	cmp	r6, r0
 800124c:	d8d6      	bhi.n	80011fc <HAL_SPI_Receive+0xce>
 800124e:	e7ef      	b.n	8001230 <HAL_SPI_Receive+0x102>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001250:	2e00      	cmp	r6, #0
 8001252:	d0ed      	beq.n	8001230 <HAL_SPI_Receive+0x102>
 8001254:	1c73      	adds	r3, r6, #1
 8001256:	d0b7      	beq.n	80011c8 <HAL_SPI_Receive+0x9a>
 8001258:	f7ff f974 	bl	8000544 <HAL_GetTick>
 800125c:	1bc0      	subs	r0, r0, r7
 800125e:	4286      	cmp	r6, r0
 8001260:	d8b2      	bhi.n	80011c8 <HAL_SPI_Receive+0x9a>
 8001262:	e7e5      	b.n	8001230 <HAL_SPI_Receive+0x102>
    errorcode = HAL_BUSY;
 8001264:	2002      	movs	r0, #2
 8001266:	e7e4      	b.n	8001232 <HAL_SPI_Receive+0x104>
  __HAL_LOCK(hspi);
 8001268:	2002      	movs	r0, #2
 800126a:	e774      	b.n	8001156 <HAL_SPI_Receive+0x28>

0800126c <HAL_SPI_ErrorCallback>:
 800126c:	4770      	bx	lr
	...

08001270 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8001270:	6803      	ldr	r3, [r0, #0]
{
 8001272:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8001274:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001276:	689a      	ldr	r2, [r3, #8]
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8001278:	f002 0541 	and.w	r5, r2, #65	; 0x41
 800127c:	2d01      	cmp	r5, #1
{
 800127e:	b085      	sub	sp, #20
 8001280:	4604      	mov	r4, r0
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8001282:	d105      	bne.n	8001290 <HAL_SPI_IRQHandler+0x20>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001284:	064d      	lsls	r5, r1, #25
 8001286:	d503      	bpl.n	8001290 <HAL_SPI_IRQHandler+0x20>
    hspi->RxISR(hspi);
 8001288:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hspi->TxISR(hspi);
 800128a:	4798      	blx	r3
}
 800128c:	b005      	add	sp, #20
 800128e:	bd30      	pop	{r4, r5, pc}
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8001290:	0795      	lsls	r5, r2, #30
 8001292:	d504      	bpl.n	800129e <HAL_SPI_IRQHandler+0x2e>
 8001294:	0608      	lsls	r0, r1, #24
 8001296:	d502      	bpl.n	800129e <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8001298:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800129a:	4620      	mov	r0, r4
 800129c:	e7f5      	b.n	800128a <HAL_SPI_IRQHandler+0x1a>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 800129e:	f412 7fb0 	tst.w	r2, #352	; 0x160
 80012a2:	d0f3      	beq.n	800128c <HAL_SPI_IRQHandler+0x1c>
 80012a4:	068d      	lsls	r5, r1, #26
 80012a6:	d5f1      	bpl.n	800128c <HAL_SPI_IRQHandler+0x1c>
    if((itflag & SPI_FLAG_OVR) != RESET)
 80012a8:	0650      	lsls	r0, r2, #25
 80012aa:	d50f      	bpl.n	80012cc <HAL_SPI_IRQHandler+0x5c>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 80012ac:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80012b0:	2803      	cmp	r0, #3
 80012b2:	f04f 0500 	mov.w	r5, #0
 80012b6:	d041      	beq.n	800133c <HAL_SPI_IRQHandler+0xcc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80012b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012ba:	f040 0004 	orr.w	r0, r0, #4
 80012be:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80012c0:	9500      	str	r5, [sp, #0]
 80012c2:	68d8      	ldr	r0, [r3, #12]
 80012c4:	9000      	str	r0, [sp, #0]
 80012c6:	6898      	ldr	r0, [r3, #8]
 80012c8:	9000      	str	r0, [sp, #0]
 80012ca:	9800      	ldr	r0, [sp, #0]
    if((itflag & SPI_FLAG_MODF) != RESET)
 80012cc:	0695      	lsls	r5, r2, #26
 80012ce:	d50c      	bpl.n	80012ea <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80012d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012d2:	f040 0001 	orr.w	r0, r0, #1
 80012d6:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80012d8:	2000      	movs	r0, #0
 80012da:	9002      	str	r0, [sp, #8]
 80012dc:	6898      	ldr	r0, [r3, #8]
 80012de:	9002      	str	r0, [sp, #8]
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80012e6:	6018      	str	r0, [r3, #0]
 80012e8:	9802      	ldr	r0, [sp, #8]
    if((itflag & SPI_FLAG_FRE) != RESET)
 80012ea:	05d0      	lsls	r0, r2, #23
 80012ec:	d508      	bpl.n	8001300 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80012ee:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80012f0:	f042 0208 	orr.w	r2, r2, #8
 80012f4:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80012f6:	2200      	movs	r2, #0
 80012f8:	9203      	str	r2, [sp, #12]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	9203      	str	r2, [sp, #12]
 80012fe:	9a03      	ldr	r2, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001300:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001302:	2a00      	cmp	r2, #0
 8001304:	d0c2      	beq.n	800128c <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800130c:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800130e:	2201      	movs	r2, #1
 8001310:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001314:	078a      	lsls	r2, r1, #30
 8001316:	d018      	beq.n	800134a <HAL_SPI_IRQHandler+0xda>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001318:	685a      	ldr	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 800131a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800131c:	f022 0203 	bic.w	r2, r2, #3
 8001320:	605a      	str	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 8001322:	b118      	cbz	r0, 800132c <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_SPI_IRQHandler+0xe4>)
 8001326:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8001328:	f7ff f98b 	bl	8000642 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 800132c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800132e:	2800      	cmp	r0, #0
 8001330:	d0ac      	beq.n	800128c <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_SPI_IRQHandler+0xe4>)
 8001334:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8001336:	f7ff f984 	bl	8000642 <HAL_DMA_Abort_IT>
 800133a:	e7a7      	b.n	800128c <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800133c:	9501      	str	r5, [sp, #4]
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	9201      	str	r2, [sp, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	9b01      	ldr	r3, [sp, #4]
        return;
 8001348:	e7a0      	b.n	800128c <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 800134a:	4620      	mov	r0, r4
 800134c:	f7ff ff8e 	bl	800126c <HAL_SPI_ErrorCallback>
 8001350:	e79c      	b.n	800128c <HAL_SPI_IRQHandler+0x1c>
 8001352:	bf00      	nop
 8001354:	08001359 	.word	0x08001359

08001358 <SPI_DMAAbortOnError>:
{
 8001358:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800135a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001360:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8001362:	f7ff ff83 	bl	800126c <HAL_SPI_ErrorCallback>
 8001366:	bd08      	pop	{r3, pc}

08001368 <HAL_SPI_GetState>:
  return hspi->State;
 8001368:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 800136c:	4770      	bx	lr
	...

08001370 <convertCANid2Reg.constprop.1>:
/* Konverter CAN-ID til leselig */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
  uint8_t wipSIDL = 0;
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 8001370:	2902      	cmp	r1, #2
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <convertCANid2Reg.constprop.1+0x34>)
 8001374:	d110      	bne.n	8001398 <convertCANid2Reg.constprop.1+0x28>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
 8001376:	0a02      	lsrs	r2, r0, #8
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8001378:	70d8      	strb	r0, [r3, #3]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
 800137a:	0c00      	lsrs	r0, r0, #16
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800137c:	f000 0103 	and.w	r1, r0, #3
    tempPassedInID = tempPassedInID << 3;
 8001380:	00c0      	lsls	r0, r0, #3
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8001382:	709a      	strb	r2, [r3, #2]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8001384:	f000 02e0 	and.w	r2, r0, #224	; 0xe0
 8001388:	430a      	orrs	r2, r1
    wipSIDL = wipSIDL + 0x08;
 800138a:	3208      	adds	r2, #8
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 800138c:	f022 0214 	bic.w	r2, r2, #20
 8001390:	705a      	strb	r2, [r3, #1]
  {
    passedIdReg->tempEID8 = 0;
    passedIdReg->tempEID0 = 0;
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
 8001392:	0a00      	lsrs	r0, r0, #8
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8001394:	7018      	strb	r0, [r3, #0]
 8001396:	4770      	bx	lr
    passedIdReg->tempEID8 = 0;
 8001398:	2200      	movs	r2, #0
    tempPassedInID = tempPassedInID << 5;
 800139a:	0140      	lsls	r0, r0, #5
    passedIdReg->tempEID8 = 0;
 800139c:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 800139e:	70da      	strb	r2, [r3, #3]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80013a0:	7058      	strb	r0, [r3, #1]
 80013a2:	e7f6      	b.n	8001392 <convertCANid2Reg.constprop.1+0x22>
 80013a4:	2000002c 	.word	0x2000002c

080013a8 <CANSPI_Initialize>:
{
 80013a8:	b530      	push	{r4, r5, lr}
 80013aa:	b089      	sub	sp, #36	; 0x24
  RXM0reg.RXM0SIDH = 0x00;
 80013ac:	2400      	movs	r4, #0
  RXF1reg.RXF1SIDL = 0x08;      //Extended Filter
 80013ae:	2508      	movs	r5, #8
  RXM0reg.RXM0SIDH = 0x00;
 80013b0:	f88d 4018 	strb.w	r4, [sp, #24]
  RXM0reg.RXM0SIDL = 0x00;
 80013b4:	f88d 4019 	strb.w	r4, [sp, #25]
  RXM0reg.RXM0EID8 = 0x00;
 80013b8:	f88d 401a 	strb.w	r4, [sp, #26]
  RXM0reg.RXM0EID0 = 0x00;
 80013bc:	f88d 401b 	strb.w	r4, [sp, #27]
  RXM1reg.RXM1SIDH = 0x00;
 80013c0:	f88d 401c 	strb.w	r4, [sp, #28]
  RXM1reg.RXM1SIDL = 0x00;
 80013c4:	f88d 401d 	strb.w	r4, [sp, #29]
  RXM1reg.RXM1EID8 = 0x00;
 80013c8:	f88d 401e 	strb.w	r4, [sp, #30]
  RXM1reg.RXM1EID0 = 0x00;
 80013cc:	f88d 401f 	strb.w	r4, [sp, #31]
  RXF0reg.RXF0SIDH = 0x00;
 80013d0:	f88d 4000 	strb.w	r4, [sp]
  RXF0reg.RXF0SIDL = 0x00;      //Standard Filter
 80013d4:	f88d 4001 	strb.w	r4, [sp, #1]
  RXF0reg.RXF0EID8 = 0x00;
 80013d8:	f88d 4002 	strb.w	r4, [sp, #2]
  RXF0reg.RXF0EID0 = 0x00;
 80013dc:	f88d 4003 	strb.w	r4, [sp, #3]
  RXF1reg.RXF1SIDH = 0x00;
 80013e0:	f88d 4004 	strb.w	r4, [sp, #4]
  RXF1reg.RXF1SIDL = 0x08;      //Extended Filter
 80013e4:	f88d 5005 	strb.w	r5, [sp, #5]
  RXF1reg.RXF1EID8 = 0x00;
 80013e8:	f88d 4006 	strb.w	r4, [sp, #6]
  RXF1reg.RXF1EID0 = 0x00;
 80013ec:	f88d 4007 	strb.w	r4, [sp, #7]
  RXF2reg.RXF2SIDH = 0x00;
 80013f0:	f88d 4008 	strb.w	r4, [sp, #8]
  RXF2reg.RXF2SIDL = 0x00;
 80013f4:	f88d 4009 	strb.w	r4, [sp, #9]
  RXF2reg.RXF2EID8 = 0x00;
 80013f8:	f88d 400a 	strb.w	r4, [sp, #10]
  RXF2reg.RXF2EID0 = 0x00;
 80013fc:	f88d 400b 	strb.w	r4, [sp, #11]
  RXF3reg.RXF3SIDH = 0x00;
 8001400:	f88d 400c 	strb.w	r4, [sp, #12]
  RXF3reg.RXF3SIDL = 0x00;
 8001404:	f88d 400d 	strb.w	r4, [sp, #13]
  RXF3reg.RXF3EID8 = 0x00;
 8001408:	f88d 400e 	strb.w	r4, [sp, #14]
  RXF3reg.RXF3EID0 = 0x00;
 800140c:	f88d 400f 	strb.w	r4, [sp, #15]
  RXF4reg.RXF4SIDH = 0x00;
 8001410:	f88d 4010 	strb.w	r4, [sp, #16]
  RXF4reg.RXF4SIDL = 0x00;
 8001414:	f88d 4011 	strb.w	r4, [sp, #17]
  RXF4reg.RXF4EID8 = 0x00;
 8001418:	f88d 4012 	strb.w	r4, [sp, #18]
  RXF4reg.RXF4EID0 = 0x00;
 800141c:	f88d 4013 	strb.w	r4, [sp, #19]
  RXF5reg.RXF5SIDH = 0x00;
 8001420:	f88d 4014 	strb.w	r4, [sp, #20]
  RXF5reg.RXF5SIDL = 0x08;
 8001424:	f88d 5015 	strb.w	r5, [sp, #21]
  RXF5reg.RXF5EID8 = 0x00;
 8001428:	f88d 4016 	strb.w	r4, [sp, #22]
  RXF5reg.RXF5EID0 = 0x00;
 800142c:	f88d 4017 	strb.w	r4, [sp, #23]
  if(!MCP2515_Initialize())
 8001430:	f000 f8fe 	bl	8001630 <MCP2515_Initialize>
 8001434:	b910      	cbnz	r0, 800143c <CANSPI_Initialize+0x94>
    return false;
 8001436:	2000      	movs	r0, #0
}
 8001438:	b009      	add	sp, #36	; 0x24
 800143a:	bd30      	pop	{r4, r5, pc}
  if(!MCP2515_SetConfigMode())
 800143c:	f000 f96a 	bl	8001714 <MCP2515_SetConfigMode>
 8001440:	2800      	cmp	r0, #0
 8001442:	d0f8      	beq.n	8001436 <CANSPI_Initialize+0x8e>
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8001444:	aa06      	add	r2, sp, #24
 8001446:	2123      	movs	r1, #35	; 0x23
 8001448:	2020      	movs	r0, #32
 800144a:	f000 f98d 	bl	8001768 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 800144e:	aa07      	add	r2, sp, #28
 8001450:	2127      	movs	r1, #39	; 0x27
 8001452:	2024      	movs	r0, #36	; 0x24
 8001454:	f000 f988 	bl	8001768 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8001458:	466a      	mov	r2, sp
 800145a:	2103      	movs	r1, #3
 800145c:	4620      	mov	r0, r4
 800145e:	f000 f983 	bl	8001768 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8001462:	aa01      	add	r2, sp, #4
 8001464:	2107      	movs	r1, #7
 8001466:	2004      	movs	r0, #4
 8001468:	f000 f97e 	bl	8001768 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800146c:	aa02      	add	r2, sp, #8
 800146e:	210b      	movs	r1, #11
 8001470:	4628      	mov	r0, r5
 8001472:	f000 f979 	bl	8001768 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8001476:	aa03      	add	r2, sp, #12
 8001478:	2113      	movs	r1, #19
 800147a:	2010      	movs	r0, #16
 800147c:	f000 f974 	bl	8001768 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8001480:	aa04      	add	r2, sp, #16
 8001482:	2117      	movs	r1, #23
 8001484:	2014      	movs	r0, #20
 8001486:	f000 f96f 	bl	8001768 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 800148a:	aa05      	add	r2, sp, #20
 800148c:	211b      	movs	r1, #27
 800148e:	2018      	movs	r0, #24
 8001490:	f000 f96a 	bl	8001768 <MCP2515_WriteByteSequence>
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8001494:	2104      	movs	r1, #4
 8001496:	2060      	movs	r0, #96	; 0x60
 8001498:	f000 f91e 	bl	80016d8 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 800149c:	2101      	movs	r1, #1
 800149e:	2070      	movs	r0, #112	; 0x70
 80014a0:	f000 f91a 	bl	80016d8 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 80014a4:	4621      	mov	r1, r4
 80014a6:	202a      	movs	r0, #42	; 0x2a
 80014a8:	f000 f916 	bl	80016d8 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_CNF2, 0xE0);
 80014ac:	21e0      	movs	r1, #224	; 0xe0
 80014ae:	2029      	movs	r0, #41	; 0x29
 80014b0:	f000 f912 	bl	80016d8 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_CNF3, 0x82);
 80014b4:	2182      	movs	r1, #130	; 0x82
 80014b6:	2028      	movs	r0, #40	; 0x28
 80014b8:	f000 f90e 	bl	80016d8 <MCP2515_WriteByte>
  if(!MCP2515_SetNormalMode())
 80014bc:	f000 f93f 	bl	800173e <MCP2515_SetNormalMode>
    return false;
 80014c0:	3000      	adds	r0, #0
 80014c2:	bf18      	it	ne
 80014c4:	2001      	movne	r0, #1
 80014c6:	e7b7      	b.n	8001438 <CANSPI_Initialize+0x90>

080014c8 <CANSPI_Transmit>:
{
 80014c8:	b570      	push	{r4, r5, r6, lr}
  idReg.tempSIDH = 0;
 80014ca:	4e1e      	ldr	r6, [pc, #120]	; (8001544 <CANSPI_Transmit+0x7c>)
 80014cc:	2500      	movs	r5, #0
{
 80014ce:	4604      	mov	r4, r0
  idReg.tempSIDH = 0;
 80014d0:	7035      	strb	r5, [r6, #0]
  idReg.tempSIDL = 0;
 80014d2:	7075      	strb	r5, [r6, #1]
  idReg.tempEID8 = 0;
 80014d4:	70b5      	strb	r5, [r6, #2]
  idReg.tempEID0 = 0;
 80014d6:	70f5      	strb	r5, [r6, #3]
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 80014d8:	f000 f9ae 	bl	8001838 <MCP2515_ReadStatus>
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <CANSPI_Transmit+0x80>)
  if (ctrlStatus.TXB0REQ != 1)
 80014de:	0741      	lsls	r1, r0, #29
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 80014e0:	7018      	strb	r0, [r3, #0]
  if (ctrlStatus.TXB0REQ != 1)
 80014e2:	d40f      	bmi.n	8001504 <CANSPI_Transmit+0x3c>
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80014e4:	7821      	ldrb	r1, [r4, #0]
 80014e6:	6860      	ldr	r0, [r4, #4]
 80014e8:	f7ff ff42 	bl	8001370 <convertCANid2Reg.constprop.1>
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80014ec:	2040      	movs	r0, #64	; 0x40
 80014ee:	f104 0309 	add.w	r3, r4, #9
 80014f2:	7a22      	ldrb	r2, [r4, #8]
 80014f4:	4631      	mov	r1, r6
 80014f6:	f000 f95d 	bl	80017b4 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 80014fa:	2081      	movs	r0, #129	; 0x81
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 80014fc:	f000 f986 	bl	800180c <MCP2515_RequestToSend>
    returnValue = 1;
 8001500:	2001      	movs	r0, #1
 8001502:	bd70      	pop	{r4, r5, r6, pc}
  else if (ctrlStatus.TXB1REQ != 1)
 8001504:	06c2      	lsls	r2, r0, #27
 8001506:	d40c      	bmi.n	8001522 <CANSPI_Transmit+0x5a>
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8001508:	7821      	ldrb	r1, [r4, #0]
 800150a:	6860      	ldr	r0, [r4, #4]
 800150c:	f7ff ff30 	bl	8001370 <convertCANid2Reg.constprop.1>
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8001510:	2042      	movs	r0, #66	; 0x42
 8001512:	f104 0309 	add.w	r3, r4, #9
 8001516:	7a22      	ldrb	r2, [r4, #8]
 8001518:	4631      	mov	r1, r6
 800151a:	f000 f94b 	bl	80017b4 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 800151e:	2082      	movs	r0, #130	; 0x82
 8001520:	e7ec      	b.n	80014fc <CANSPI_Transmit+0x34>
  else if (ctrlStatus.TXB2REQ != 1)
 8001522:	0643      	lsls	r3, r0, #25
 8001524:	d40c      	bmi.n	8001540 <CANSPI_Transmit+0x78>
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8001526:	7821      	ldrb	r1, [r4, #0]
 8001528:	6860      	ldr	r0, [r4, #4]
 800152a:	f7ff ff21 	bl	8001370 <convertCANid2Reg.constprop.1>
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800152e:	2044      	movs	r0, #68	; 0x44
 8001530:	f104 0309 	add.w	r3, r4, #9
 8001534:	7a22      	ldrb	r2, [r4, #8]
 8001536:	4631      	mov	r1, r6
 8001538:	f000 f93c 	bl	80017b4 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800153c:	2084      	movs	r0, #132	; 0x84
 800153e:	e7dd      	b.n	80014fc <CANSPI_Transmit+0x34>
  uint8_t returnValue = 0;
 8001540:	4628      	mov	r0, r5
}
 8001542:	bd70      	pop	{r4, r5, r6, pc}
 8001544:	2000002c 	.word	0x2000002c
 8001548:	20000028 	.word	0x20000028

0800154c <CANSPI_Receive>:
{
 800154c:	b530      	push	{r4, r5, lr}
 800154e:	b085      	sub	sp, #20
 8001550:	4604      	mov	r4, r0
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8001552:	f000 f989 	bl	8001868 <MCP2515_GetRxStatus>
 8001556:	4605      	mov	r5, r0
  if (rxStatus.rxBuffer != 0)
 8001558:	f010 00c0 	ands.w	r0, r0, #192	; 0xc0
 800155c:	d03c      	beq.n	80015d8 <CANSPI_Receive+0x8c>
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 800155e:	066b      	lsls	r3, r5, #25
 8001560:	d53c      	bpl.n	80015dc <CANSPI_Receive+0x90>
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001562:	220d      	movs	r2, #13
 8001564:	4669      	mov	r1, sp
 8001566:	2090      	movs	r0, #144	; 0x90
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001568:	f000 f896 	bl	8001698 <MCP2515_ReadRxSequence>
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800156c:	f005 0518 	and.w	r5, r5, #24
 8001570:	2d10      	cmp	r5, #16
 8001572:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001576:	f89d 1000 	ldrb.w	r1, [sp]
 800157a:	d135      	bne.n	80015e8 <CANSPI_Receive+0x9c>
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 800157c:	2202      	movs	r2, #2
 800157e:	7022      	strb	r2, [r4, #0]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8001580:	095a      	lsrs	r2, r3, #5
 8001582:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 800158e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8001592:	eb02 2203 	add.w	r2, r2, r3, lsl #8
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8001596:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800159a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800159e:	6063      	str	r3, [r4, #4]
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 80015a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80015a4:	7223      	strb	r3, [r4, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 80015a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80015aa:	7263      	strb	r3, [r4, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 80015ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80015b0:	72a3      	strb	r3, [r4, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 80015b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80015b6:	72e3      	strb	r3, [r4, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 80015b8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80015bc:	7323      	strb	r3, [r4, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 80015be:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80015c2:	7363      	strb	r3, [r4, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 80015c4:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80015c8:	73a3      	strb	r3, [r4, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 80015ca:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80015ce:	73e3      	strb	r3, [r4, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 80015d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80015d4:	7423      	strb	r3, [r4, #16]
    returnValue = 1;
 80015d6:	2001      	movs	r0, #1
}
 80015d8:	b005      	add	sp, #20
 80015da:	bd30      	pop	{r4, r5, pc}
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80015dc:	2880      	cmp	r0, #128	; 0x80
 80015de:	d1c5      	bne.n	800156c <CANSPI_Receive+0x20>
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80015e0:	220d      	movs	r2, #13
 80015e2:	4669      	mov	r1, sp
 80015e4:	2094      	movs	r0, #148	; 0x94
 80015e6:	e7bf      	b.n	8001568 <CANSPI_Receive+0x1c>
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80015e8:	2201      	movs	r2, #1
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80015ea:	095b      	lsrs	r3, r3, #5
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80015ec:	7022      	strb	r2, [r4, #0]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80015ee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80015f2:	e7d4      	b.n	800159e <CANSPI_Receive+0x52>

080015f4 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* E */
static void SPI_Tx(uint8_t data)
{
 80015f4:	b507      	push	{r0, r1, r2, lr}
 80015f6:	a902      	add	r1, sp, #8
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 80015f8:	230a      	movs	r3, #10
{
 80015fa:	f801 0d01 	strb.w	r0, [r1, #-1]!
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 80015fe:	2201      	movs	r2, #1
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <SPI_Tx+0x18>)
 8001602:	f7ff fbef 	bl	8000de4 <HAL_SPI_Transmit>
}
 8001606:	b003      	add	sp, #12
 8001608:	f85d fb04 	ldr.w	pc, [sp], #4
 800160c:	20000030 	.word	0x20000030

08001610 <SPI_Rx>:
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
}

/* SPI Rx Wrapper funksjon*/
static uint8_t SPI_Rx(void)
{
 8001610:	b507      	push	{r0, r1, r2, lr}
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8001612:	230a      	movs	r3, #10
 8001614:	2201      	movs	r2, #1
 8001616:	f10d 0107 	add.w	r1, sp, #7
 800161a:	4804      	ldr	r0, [pc, #16]	; (800162c <SPI_Rx+0x1c>)
 800161c:	f7ff fd87 	bl	800112e <HAL_SPI_Receive>
  return retVal;
}
 8001620:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001624:	b003      	add	sp, #12
 8001626:	f85d fb04 	ldr.w	pc, [sp], #4
 800162a:	bf00      	nop
 800162c:	20000030 	.word	0x20000030

08001630 <MCP2515_Initialize>:
{
 8001630:	b538      	push	{r3, r4, r5, lr}
  MCP2515_CS_HIGH();    
 8001632:	2201      	movs	r2, #1
 8001634:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001638:	4807      	ldr	r0, [pc, #28]	; (8001658 <MCP2515_Initialize+0x28>)
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 800163a:	4d08      	ldr	r5, [pc, #32]	; (800165c <MCP2515_Initialize+0x2c>)
  MCP2515_CS_HIGH();    
 800163c:	f7ff f8f4 	bl	8000828 <HAL_GPIO_WritePin>
 8001640:	240a      	movs	r4, #10
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001642:	4628      	mov	r0, r5
 8001644:	f7ff fe90 	bl	8001368 <HAL_SPI_GetState>
 8001648:	2801      	cmp	r0, #1
 800164a:	d004      	beq.n	8001656 <MCP2515_Initialize+0x26>
 800164c:	3c01      	subs	r4, #1
  } while(loop > 0); 
 800164e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001652:	d1f6      	bne.n	8001642 <MCP2515_Initialize+0x12>
  return false;
 8001654:	4620      	mov	r0, r4
}
 8001656:	bd38      	pop	{r3, r4, r5, pc}
 8001658:	40021000 	.word	0x40021000
 800165c:	20000030 	.word	0x20000030

08001660 <MCP2515_ReadByte>:
{
 8001660:	b538      	push	{r3, r4, r5, lr}
  MCP2515_CS_LOW();
 8001662:	4c0c      	ldr	r4, [pc, #48]	; (8001694 <MCP2515_ReadByte+0x34>)
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 800166a:	4605      	mov	r5, r0
  MCP2515_CS_LOW();
 800166c:	4620      	mov	r0, r4
 800166e:	f7ff f8db 	bl	8000828 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_READ);
 8001672:	2003      	movs	r0, #3
 8001674:	f7ff ffbe 	bl	80015f4 <SPI_Tx>
  SPI_Tx(address);
 8001678:	4628      	mov	r0, r5
 800167a:	f7ff ffbb 	bl	80015f4 <SPI_Tx>
  retVal = SPI_Rx();
 800167e:	f7ff ffc7 	bl	8001610 <SPI_Rx>
  MCP2515_CS_HIGH();
 8001682:	2201      	movs	r2, #1
  retVal = SPI_Rx();
 8001684:	4605      	mov	r5, r0
  MCP2515_CS_HIGH();
 8001686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800168a:	4620      	mov	r0, r4
 800168c:	f7ff f8cc 	bl	8000828 <HAL_GPIO_WritePin>
}
 8001690:	4628      	mov	r0, r5
 8001692:	bd38      	pop	{r3, r4, r5, pc}
 8001694:	40021000 	.word	0x40021000

08001698 <MCP2515_ReadRxSequence>:
{
 8001698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MCP2515_CS_LOW();
 800169a:	4c0d      	ldr	r4, [pc, #52]	; (80016d0 <MCP2515_ReadRxSequence+0x38>)
{
 800169c:	4607      	mov	r7, r0
 800169e:	460d      	mov	r5, r1
 80016a0:	4616      	mov	r6, r2
  MCP2515_CS_LOW();
 80016a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a6:	2200      	movs	r2, #0
 80016a8:	4620      	mov	r0, r4
 80016aa:	f7ff f8bd 	bl	8000828 <HAL_GPIO_WritePin>
  SPI_Tx(instruction);        
 80016ae:	4638      	mov	r0, r7
 80016b0:	f7ff ffa0 	bl	80015f4 <SPI_Tx>

/* SPI Rx Wrapper funksjon*/
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80016b4:	4632      	mov	r2, r6
 80016b6:	4629      	mov	r1, r5
 80016b8:	230a      	movs	r3, #10
 80016ba:	4806      	ldr	r0, [pc, #24]	; (80016d4 <MCP2515_ReadRxSequence+0x3c>)
 80016bc:	f7ff fd37 	bl	800112e <HAL_SPI_Receive>
  MCP2515_CS_HIGH();
 80016c0:	4620      	mov	r0, r4
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 80016c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  MCP2515_CS_HIGH();
 80016cc:	f7ff b8ac 	b.w	8000828 <HAL_GPIO_WritePin>
 80016d0:	40021000 	.word	0x40021000
 80016d4:	20000030 	.word	0x20000030

080016d8 <MCP2515_WriteByte>:
{    
 80016d8:	b570      	push	{r4, r5, r6, lr}
  MCP2515_CS_LOW();  
 80016da:	4c0d      	ldr	r4, [pc, #52]	; (8001710 <MCP2515_WriteByte+0x38>)
 80016dc:	2200      	movs	r2, #0
{    
 80016de:	4606      	mov	r6, r0
 80016e0:	460d      	mov	r5, r1
  MCP2515_CS_LOW();  
 80016e2:	4620      	mov	r0, r4
 80016e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e8:	f7ff f89e 	bl	8000828 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_WRITE);
 80016ec:	2002      	movs	r0, #2
 80016ee:	f7ff ff81 	bl	80015f4 <SPI_Tx>
  SPI_Tx(address);
 80016f2:	4630      	mov	r0, r6
 80016f4:	f7ff ff7e 	bl	80015f4 <SPI_Tx>
  SPI_Tx(data);  
 80016f8:	4628      	mov	r0, r5
 80016fa:	f7ff ff7b 	bl	80015f4 <SPI_Tx>
  MCP2515_CS_HIGH();
 80016fe:	4620      	mov	r0, r4
 8001700:	2201      	movs	r2, #1
 8001702:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 8001706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MCP2515_CS_HIGH();
 800170a:	f7ff b88d 	b.w	8000828 <HAL_GPIO_WritePin>
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000

08001714 <MCP2515_SetConfigMode>:
{
 8001714:	b510      	push	{r4, lr}
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001716:	2180      	movs	r1, #128	; 0x80
 8001718:	200f      	movs	r0, #15
 800171a:	f7ff ffdd 	bl	80016d8 <MCP2515_WriteByte>
 800171e:	240a      	movs	r4, #10
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8001720:	200e      	movs	r0, #14
 8001722:	f7ff ff9d 	bl	8001660 <MCP2515_ReadByte>
 8001726:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
 800172a:	2880      	cmp	r0, #128	; 0x80
 800172c:	d005      	beq.n	800173a <MCP2515_SetConfigMode+0x26>
 800172e:	3c01      	subs	r4, #1
  } while(loop > 0); 
 8001730:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001734:	d1f4      	bne.n	8001720 <MCP2515_SetConfigMode+0xc>
  return false;
 8001736:	4620      	mov	r0, r4
 8001738:	bd10      	pop	{r4, pc}
      return true;
 800173a:	2001      	movs	r0, #1
}
 800173c:	bd10      	pop	{r4, pc}

0800173e <MCP2515_SetNormalMode>:
{
 800173e:	b510      	push	{r4, lr}
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8001740:	2100      	movs	r1, #0
 8001742:	200f      	movs	r0, #15
 8001744:	f7ff ffc8 	bl	80016d8 <MCP2515_WriteByte>
 8001748:	240a      	movs	r4, #10
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 800174a:	200e      	movs	r0, #14
 800174c:	f7ff ff88 	bl	8001660 <MCP2515_ReadByte>
 8001750:	f010 0fe0 	tst.w	r0, #224	; 0xe0
 8001754:	d005      	beq.n	8001762 <MCP2515_SetNormalMode+0x24>
 8001756:	3c01      	subs	r4, #1
  } while(loop > 0);
 8001758:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800175c:	d1f5      	bne.n	800174a <MCP2515_SetNormalMode+0xc>
  return false;
 800175e:	4620      	mov	r0, r4
 8001760:	bd10      	pop	{r4, pc}
      return true;
 8001762:	2001      	movs	r0, #1
}
 8001764:	bd10      	pop	{r4, pc}
	...

08001768 <MCP2515_WriteByteSequence>:
{    
 8001768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MCP2515_CS_LOW();
 800176a:	4d10      	ldr	r5, [pc, #64]	; (80017ac <MCP2515_WriteByteSequence+0x44>)
{    
 800176c:	4606      	mov	r6, r0
 800176e:	460c      	mov	r4, r1
 8001770:	4617      	mov	r7, r2
  MCP2515_CS_LOW();
 8001772:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001776:	2200      	movs	r2, #0
 8001778:	4628      	mov	r0, r5
 800177a:	f7ff f855 	bl	8000828 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_WRITE);
 800177e:	2002      	movs	r0, #2
 8001780:	f7ff ff38 	bl	80015f4 <SPI_Tx>
  SPI_Tx(startAddress);
 8001784:	4630      	mov	r0, r6
 8001786:	f7ff ff35 	bl	80015f4 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 800178a:	1c62      	adds	r2, r4, #1
 800178c:	1b92      	subs	r2, r2, r6
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 800178e:	4639      	mov	r1, r7
 8001790:	230a      	movs	r3, #10
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	4806      	ldr	r0, [pc, #24]	; (80017b0 <MCP2515_WriteByteSequence+0x48>)
 8001796:	f7ff fb25 	bl	8000de4 <HAL_SPI_Transmit>
  MCP2515_CS_HIGH();
 800179a:	4628      	mov	r0, r5
 800179c:	2201      	movs	r2, #1
 800179e:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 80017a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  MCP2515_CS_HIGH();
 80017a6:	f7ff b83f 	b.w	8000828 <HAL_GPIO_WritePin>
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	20000030 	.word	0x20000030

080017b4 <MCP2515_LoadTxSequence>:
{    
 80017b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  MCP2515_CS_LOW();
 80017b8:	4c12      	ldr	r4, [pc, #72]	; (8001804 <MCP2515_LoadTxSequence+0x50>)
{    
 80017ba:	4616      	mov	r6, r2
 80017bc:	4605      	mov	r5, r0
 80017be:	4688      	mov	r8, r1
  MCP2515_CS_LOW();
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c6:	4620      	mov	r0, r4
{    
 80017c8:	461f      	mov	r7, r3
  MCP2515_CS_LOW();
 80017ca:	f7ff f82d 	bl	8000828 <HAL_GPIO_WritePin>
  SPI_Tx(instruction);
 80017ce:	4628      	mov	r0, r5
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 80017d0:	4d0d      	ldr	r5, [pc, #52]	; (8001808 <MCP2515_LoadTxSequence+0x54>)
  SPI_Tx(instruction);
 80017d2:	f7ff ff0f 	bl	80015f4 <SPI_Tx>
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 80017d6:	4641      	mov	r1, r8
 80017d8:	230a      	movs	r3, #10
 80017da:	2204      	movs	r2, #4
 80017dc:	4628      	mov	r0, r5
 80017de:	f7ff fb01 	bl	8000de4 <HAL_SPI_Transmit>
  SPI_Tx(dlc);
 80017e2:	4630      	mov	r0, r6
 80017e4:	f7ff ff06 	bl	80015f4 <SPI_Tx>
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 80017e8:	4632      	mov	r2, r6
 80017ea:	4639      	mov	r1, r7
 80017ec:	4628      	mov	r0, r5
 80017ee:	230a      	movs	r3, #10
 80017f0:	f7ff faf8 	bl	8000de4 <HAL_SPI_Transmit>
  MCP2515_CS_HIGH();
 80017f4:	4620      	mov	r0, r4
 80017f6:	2201      	movs	r2, #1
 80017f8:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 80017fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  MCP2515_CS_HIGH();
 8001800:	f7ff b812 	b.w	8000828 <HAL_GPIO_WritePin>
 8001804:	40021000 	.word	0x40021000
 8001808:	20000030 	.word	0x20000030

0800180c <MCP2515_RequestToSend>:
{
 800180c:	b538      	push	{r3, r4, r5, lr}
  MCP2515_CS_LOW();
 800180e:	4c09      	ldr	r4, [pc, #36]	; (8001834 <MCP2515_RequestToSend+0x28>)
{
 8001810:	4605      	mov	r5, r0
  MCP2515_CS_LOW();
 8001812:	2200      	movs	r2, #0
 8001814:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001818:	4620      	mov	r0, r4
 800181a:	f7ff f805 	bl	8000828 <HAL_GPIO_WritePin>
  SPI_Tx(instruction);
 800181e:	4628      	mov	r0, r5
 8001820:	f7ff fee8 	bl	80015f4 <SPI_Tx>
  MCP2515_CS_HIGH();
 8001824:	4620      	mov	r0, r4
 8001826:	2201      	movs	r2, #1
 8001828:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 800182c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  MCP2515_CS_HIGH();
 8001830:	f7fe bffa 	b.w	8000828 <HAL_GPIO_WritePin>
 8001834:	40021000 	.word	0x40021000

08001838 <MCP2515_ReadStatus>:
{
 8001838:	b538      	push	{r3, r4, r5, lr}
  MCP2515_CS_LOW();
 800183a:	4c0a      	ldr	r4, [pc, #40]	; (8001864 <MCP2515_ReadStatus+0x2c>)
 800183c:	2200      	movs	r2, #0
 800183e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001842:	4620      	mov	r0, r4
 8001844:	f7fe fff0 	bl	8000828 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_READ_STATUS);
 8001848:	20a0      	movs	r0, #160	; 0xa0
 800184a:	f7ff fed3 	bl	80015f4 <SPI_Tx>
  retVal = SPI_Rx();
 800184e:	f7ff fedf 	bl	8001610 <SPI_Rx>
  MCP2515_CS_HIGH();
 8001852:	2201      	movs	r2, #1
  retVal = SPI_Rx();
 8001854:	4605      	mov	r5, r0
  MCP2515_CS_HIGH();
 8001856:	f44f 7180 	mov.w	r1, #256	; 0x100
 800185a:	4620      	mov	r0, r4
 800185c:	f7fe ffe4 	bl	8000828 <HAL_GPIO_WritePin>
}
 8001860:	4628      	mov	r0, r5
 8001862:	bd38      	pop	{r3, r4, r5, pc}
 8001864:	40021000 	.word	0x40021000

08001868 <MCP2515_GetRxStatus>:
{
 8001868:	b538      	push	{r3, r4, r5, lr}
  MCP2515_CS_LOW();
 800186a:	4c0a      	ldr	r4, [pc, #40]	; (8001894 <MCP2515_GetRxStatus+0x2c>)
 800186c:	2200      	movs	r2, #0
 800186e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001872:	4620      	mov	r0, r4
 8001874:	f7fe ffd8 	bl	8000828 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_RX_STATUS);
 8001878:	20b0      	movs	r0, #176	; 0xb0
 800187a:	f7ff febb 	bl	80015f4 <SPI_Tx>
  retVal = SPI_Rx();
 800187e:	f7ff fec7 	bl	8001610 <SPI_Rx>
  MCP2515_CS_HIGH();
 8001882:	2201      	movs	r2, #1
  retVal = SPI_Rx();
 8001884:	4605      	mov	r5, r0
  MCP2515_CS_HIGH();
 8001886:	f44f 7180 	mov.w	r1, #256	; 0x100
 800188a:	4620      	mov	r0, r4
 800188c:	f7fe ffcc 	bl	8000828 <HAL_GPIO_WritePin>
}
 8001890:	4628      	mov	r0, r5
 8001892:	bd38      	pop	{r3, r4, r5, pc}
 8001894:	40021000 	.word	0x40021000

08001898 <SystemClock_Config>:

}
/* */
/** System Clock Configuration
 */
void SystemClock_Config(void) {
 8001898:	b530      	push	{r4, r5, lr}
 800189a:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage 
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 800189c:	4b28      	ldr	r3, [pc, #160]	; (8001940 <SystemClock_Config+0xa8>)
 800189e:	2100      	movs	r1, #0
 80018a0:	9101      	str	r1, [sp, #4]
 80018a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018a8:	641a      	str	r2, [r3, #64]	; 0x40
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	9b01      	ldr	r3, [sp, #4]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b4:	4b23      	ldr	r3, [pc, #140]	; (8001944 <SystemClock_Config+0xac>)
 80018b6:	9102      	str	r1, [sp, #8]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c6:	9302      	str	r3, [sp, #8]
 80018c8:	9b02      	ldr	r3, [sp, #8]

	/**Initializes the CPU, AHB and APB busses clocks 
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018ca:	2301      	movs	r3, #1
 80018cc:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018d2:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018d8:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80018da:	2319      	movs	r3, #25
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018dc:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLM = 25;
 80018de:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80018e0:	2504      	movs	r5, #4
	RCC_OscInitStruct.PLL.PLLN = 336;
 80018e2:	f44f 73a8 	mov.w	r3, #336	; 0x150
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018e6:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e8:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 336;
 80018ea:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ec:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80018ee:	9513      	str	r5, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018f0:	f7fe ffa0 	bl	8000834 <HAL_RCC_OscConfig>
 80018f4:	b100      	cbz	r0, 80018f8 <SystemClock_Config+0x60>
 80018f6:	e7fe      	b.n	80018f6 <SystemClock_Config+0x5e>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks 
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018f8:	230f      	movs	r3, #15
 80018fa:	9303      	str	r3, [sp, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001900:	9005      	str	r0, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001902:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001904:	2105      	movs	r1, #5
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800190a:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800190c:	9404      	str	r4, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800190e:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001910:	f7ff f934 	bl	8000b7c <HAL_RCC_ClockConfig>
 8001914:	4604      	mov	r4, r0
 8001916:	b100      	cbz	r0, 800191a <SystemClock_Config+0x82>
 8001918:	e7fe      	b.n	8001918 <SystemClock_Config+0x80>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time 
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800191a:	f7ff f9c9 	bl	8000cb0 <HAL_RCC_GetHCLKFreq>
 800191e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001922:	fbb0 f0f3 	udiv	r0, r0, r3
 8001926:	f7fe fe65 	bl	80005f4 <HAL_SYSTICK_Config>

	/**Configure the Systick 
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800192a:	4628      	mov	r0, r5
 800192c:	f7fe fe78 	bl	8000620 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001930:	4622      	mov	r2, r4
 8001932:	4621      	mov	r1, r4
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f7fe fe1c 	bl	8000574 <HAL_NVIC_SetPriority>
}
 800193c:	b015      	add	sp, #84	; 0x54
 800193e:	bd30      	pop	{r4, r5, pc}
 8001940:	40023800 	.word	0x40023800
 8001944:	40007000 	.word	0x40007000

08001948 <main>:
int main(void) {
 8001948:	b500      	push	{lr}
 800194a:	b089      	sub	sp, #36	; 0x24
static void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE()
 800194c:	2400      	movs	r4, #0
	HAL_Init();
 800194e:	f7fe fdd7 	bl	8000500 <HAL_Init>
	SystemClock_Config();
 8001952:	f7ff ffa1 	bl	8001898 <SystemClock_Config>
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8001956:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <main+0xe8>)
 8001958:	9400      	str	r4, [sp, #0]
 800195a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 800195c:	4835      	ldr	r0, [pc, #212]	; (8001a34 <main+0xec>)
	__HAL_RCC_GPIOH_CLK_ENABLE()
 800195e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001962:	631a      	str	r2, [r3, #48]	; 0x30
 8001964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001966:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800196a:	9200      	str	r2, [sp, #0]
 800196c:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800196e:	9401      	str	r4, [sp, #4]
 8001970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001972:	f042 0210 	orr.w	r2, r2, #16
 8001976:	631a      	str	r2, [r3, #48]	; 0x30
 8001978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800197a:	f002 0210 	and.w	r2, r2, #16
 800197e:	9201      	str	r2, [sp, #4]
 8001980:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8001982:	9402      	str	r4, [sp, #8]
 8001984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001986:	f042 0204 	orr.w	r2, r2, #4
 800198a:	631a      	str	r2, [r3, #48]	; 0x30
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0304 	and.w	r3, r3, #4
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8001992:	2201      	movs	r2, #1
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8001994:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8001996:	f44f 7180 	mov.w	r1, #256	; 0x100
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800199a:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 800199c:	f7fe ff44 	bl	8000828 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CAN_CS_Pin */
	GPIO_InitStruct.Pin = CAN_CS_Pin;
 80019a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a4:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
	HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 80019a6:	4823      	ldr	r0, [pc, #140]	; (8001a34 <main+0xec>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019aa:	2301      	movs	r3, #1
	HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 80019ac:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80019b0:	9306      	str	r3, [sp, #24]
	HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f7fe fe59 	bl	8000668 <HAL_GPIO_Init>
	hspi3.Instance = SPI3;
 80019b6:	4820      	ldr	r0, [pc, #128]	; (8001a38 <main+0xf0>)
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80019b8:	4a20      	ldr	r2, [pc, #128]	; (8001a3c <main+0xf4>)
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019ba:	6084      	str	r4, [r0, #8]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80019bc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80019c0:	e880 000c 	stmia.w	r0, {r2, r3}
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80019c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c8:	6183      	str	r3, [r0, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019ca:	2310      	movs	r3, #16
 80019cc:	61c3      	str	r3, [r0, #28]
	hspi3.Init.CRCPolynomial = 10;
 80019ce:	230a      	movs	r3, #10
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80019d0:	60c4      	str	r4, [r0, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019d2:	6104      	str	r4, [r0, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019d4:	6144      	str	r4, [r0, #20]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019d6:	6204      	str	r4, [r0, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019d8:	6244      	str	r4, [r0, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019da:	6284      	str	r4, [r0, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 80019dc:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80019de:	f7ff f9c4 	bl	8000d6a <HAL_SPI_Init>
 80019e2:	b100      	cbz	r0, 80019e6 <main+0x9e>
 80019e4:	e7fe      	b.n	80019e4 <main+0x9c>
	CANSPI_Initialize();
 80019e6:	f7ff fcdf 	bl	80013a8 <CANSPI_Initialize>
		if(CANSPI_Receive(&rxMessage))
 80019ea:	4d15      	ldr	r5, [pc, #84]	; (8001a40 <main+0xf8>)
		      txMessage.frame.idType = rxMessage.frame.idType;
 80019ec:	4c15      	ldr	r4, [pc, #84]	; (8001a44 <main+0xfc>)
		if(CANSPI_Receive(&rxMessage))
 80019ee:	4814      	ldr	r0, [pc, #80]	; (8001a40 <main+0xf8>)
 80019f0:	f7ff fdac 	bl	800154c <CANSPI_Receive>
 80019f4:	2800      	cmp	r0, #0
 80019f6:	d0fa      	beq.n	80019ee <main+0xa6>
		      txMessage.frame.idType = rxMessage.frame.idType;
 80019f8:	782b      	ldrb	r3, [r5, #0]
 80019fa:	7023      	strb	r3, [r4, #0]
		      txMessage.frame.id = rxMessage.frame.id;
 80019fc:	686b      	ldr	r3, [r5, #4]
 80019fe:	6063      	str	r3, [r4, #4]
		      txMessage.frame.dlc = rxMessage.frame.dlc;
 8001a00:	7a2b      	ldrb	r3, [r5, #8]
 8001a02:	7223      	strb	r3, [r4, #8]
		      txMessage.frame.data0++;
 8001a04:	7a63      	ldrb	r3, [r4, #9]
		      CANSPI_Transmit(&txMessage);
 8001a06:	480f      	ldr	r0, [pc, #60]	; (8001a44 <main+0xfc>)
		      txMessage.frame.data0++;
 8001a08:	3301      	adds	r3, #1
 8001a0a:	7263      	strb	r3, [r4, #9]
		      txMessage.frame.data1 = rxMessage.frame.data1;
 8001a0c:	7aab      	ldrb	r3, [r5, #10]
 8001a0e:	72a3      	strb	r3, [r4, #10]
		      txMessage.frame.data2 = rxMessage.frame.data2;
 8001a10:	7aeb      	ldrb	r3, [r5, #11]
 8001a12:	72e3      	strb	r3, [r4, #11]
		      txMessage.frame.data3 = rxMessage.frame.data3;
 8001a14:	7b2b      	ldrb	r3, [r5, #12]
 8001a16:	7323      	strb	r3, [r4, #12]
		      txMessage.frame.data4 = rxMessage.frame.data4;
 8001a18:	7b6b      	ldrb	r3, [r5, #13]
 8001a1a:	7363      	strb	r3, [r4, #13]
		      txMessage.frame.data5 = rxMessage.frame.data5;
 8001a1c:	7bab      	ldrb	r3, [r5, #14]
 8001a1e:	73a3      	strb	r3, [r4, #14]
		      txMessage.frame.data6 = rxMessage.frame.data6;
 8001a20:	7beb      	ldrb	r3, [r5, #15]
 8001a22:	73e3      	strb	r3, [r4, #15]
		      txMessage.frame.data7 = rxMessage.frame.data7;
 8001a24:	7c2b      	ldrb	r3, [r5, #16]
 8001a26:	7423      	strb	r3, [r4, #16]
		      CANSPI_Transmit(&txMessage);
 8001a28:	f7ff fd4e 	bl	80014c8 <CANSPI_Transmit>
 8001a2c:	e7df      	b.n	80019ee <main+0xa6>
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40021000 	.word	0x40021000
 8001a38:	20000030 	.word	0x20000030
 8001a3c:	40003c00 	.word	0x40003c00
 8001a40:	2000009c 	.word	0x2000009c
 8001a44:	20000088 	.word	0x20000088

08001a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4a:	2003      	movs	r0, #3
 8001a4c:	f7fe fd80 	bl	8000550 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	4611      	mov	r1, r2
 8001a54:	f06f 000b 	mvn.w	r0, #11
 8001a58:	f7fe fd8c 	bl	8000574 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4611      	mov	r1, r2
 8001a60:	f06f 000a 	mvn.w	r0, #10
 8001a64:	f7fe fd86 	bl	8000574 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	f06f 0009 	mvn.w	r0, #9
 8001a70:	f7fe fd80 	bl	8000574 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	4611      	mov	r1, r2
 8001a78:	f06f 0004 	mvn.w	r0, #4
 8001a7c:	f7fe fd7a 	bl	8000574 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	4611      	mov	r1, r2
 8001a84:	f06f 0003 	mvn.w	r0, #3
 8001a88:	f7fe fd74 	bl	8000574 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	4611      	mov	r1, r2
 8001a90:	f06f 0001 	mvn.w	r0, #1
 8001a94:	f7fe fd6e 	bl	8000574 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001aa4:	f7fe bd66 	b.w	8000574 <HAL_NVIC_SetPriority>

08001aa8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001aa8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI3)
 8001aaa:	6802      	ldr	r2, [r0, #0]
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <HAL_SPI_MspInit+0x58>)
 8001aae:	429a      	cmp	r2, r3
{
 8001ab0:	b086      	sub	sp, #24
  if(hspi->Instance==SPI3)
 8001ab2:	d122      	bne.n	8001afa <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ab4:	2400      	movs	r4, #0
 8001ab6:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8001aba:	9400      	str	r4, [sp, #0]
 8001abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abe:	4811      	ldr	r0, [pc, #68]	; (8001b04 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ac0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ac4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001ad2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ad6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ae2:	2306      	movs	r3, #6
 8001ae4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae6:	f7fe fdbf 	bl	8000668 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001aea:	2033      	movs	r0, #51	; 0x33
 8001aec:	4622      	mov	r2, r4
 8001aee:	4621      	mov	r1, r4
 8001af0:	f7fe fd40 	bl	8000574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001af4:	2033      	movs	r0, #51	; 0x33
 8001af6:	f7fe fd71 	bl	80005dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001afa:	b006      	add	sp, #24
 8001afc:	bd10      	pop	{r4, pc}
 8001afe:	bf00      	nop
 8001b00:	40003c00 	.word	0x40003c00
 8001b04:	40020800 	.word	0x40020800

08001b08 <SVC_Handler>:
 8001b08:	4770      	bx	lr

08001b0a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001b0a:	4770      	bx	lr

08001b0c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001b0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b0e:	f7fe fd11 	bl	8000534 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001b16:	f7fe bd90 	b.w	800063a <HAL_SYSTICK_IRQHandler>
	...

08001b1c <SPI3_IRQHandler>:
*/
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */
  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001b1c:	4801      	ldr	r0, [pc, #4]	; (8001b24 <SPI3_IRQHandler+0x8>)
 8001b1e:	f7ff bba7 	b.w	8001270 <HAL_SPI_IRQHandler>
 8001b22:	bf00      	nop
 8001b24:	20000030 	.word	0x20000030

08001b28 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b28:	490f      	ldr	r1, [pc, #60]	; (8001b68 <SystemInit+0x40>)
 8001b2a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <SystemInit+0x44>)
 8001b38:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b3a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001b3c:	f042 0201 	orr.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001b42:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001b4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b50:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <SystemInit+0x48>)
 8001b52:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b5a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b5c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b62:	608b      	str	r3, [r1, #8]
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	24003010 	.word	0x24003010

08001b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b7a:	e003      	b.n	8001b84 <LoopCopyDataInit>

08001b7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b82:	3104      	adds	r1, #4

08001b84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b84:	480b      	ldr	r0, [pc, #44]	; (8001bb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b8c:	d3f6      	bcc.n	8001b7c <CopyDataInit>
  ldr  r2, =_sbss
 8001b8e:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b90:	e002      	b.n	8001b98 <LoopFillZerobss>

08001b92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b94:	f842 3b04 	str.w	r3, [r2], #4

08001b98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b9c:	d3f9      	bcc.n	8001b92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b9e:	f7ff ffc3 	bl	8001b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ba2:	f000 f811 	bl	8001bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ba6:	f7ff fecf 	bl	8001948 <main>
  bx  lr    
 8001baa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001bb0:	08001c48 	.word	0x08001c48
  ldr  r0, =_sdata
 8001bb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bb8:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001bbc:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001bc0:	200000b0 	.word	0x200000b0

08001bc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC_IRQHandler>
	...

08001bc8 <__libc_init_array>:
 8001bc8:	b570      	push	{r4, r5, r6, lr}
 8001bca:	4e0d      	ldr	r6, [pc, #52]	; (8001c00 <__libc_init_array+0x38>)
 8001bcc:	4c0d      	ldr	r4, [pc, #52]	; (8001c04 <__libc_init_array+0x3c>)
 8001bce:	1ba4      	subs	r4, r4, r6
 8001bd0:	10a4      	asrs	r4, r4, #2
 8001bd2:	2500      	movs	r5, #0
 8001bd4:	42a5      	cmp	r5, r4
 8001bd6:	d109      	bne.n	8001bec <__libc_init_array+0x24>
 8001bd8:	4e0b      	ldr	r6, [pc, #44]	; (8001c08 <__libc_init_array+0x40>)
 8001bda:	4c0c      	ldr	r4, [pc, #48]	; (8001c0c <__libc_init_array+0x44>)
 8001bdc:	f000 f818 	bl	8001c10 <_init>
 8001be0:	1ba4      	subs	r4, r4, r6
 8001be2:	10a4      	asrs	r4, r4, #2
 8001be4:	2500      	movs	r5, #0
 8001be6:	42a5      	cmp	r5, r4
 8001be8:	d105      	bne.n	8001bf6 <__libc_init_array+0x2e>
 8001bea:	bd70      	pop	{r4, r5, r6, pc}
 8001bec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bf0:	4798      	blx	r3
 8001bf2:	3501      	adds	r5, #1
 8001bf4:	e7ee      	b.n	8001bd4 <__libc_init_array+0xc>
 8001bf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bfa:	4798      	blx	r3
 8001bfc:	3501      	adds	r5, #1
 8001bfe:	e7f2      	b.n	8001be6 <__libc_init_array+0x1e>
 8001c00:	08001c40 	.word	0x08001c40
 8001c04:	08001c40 	.word	0x08001c40
 8001c08:	08001c40 	.word	0x08001c40
 8001c0c:	08001c44 	.word	0x08001c44

08001c10 <_init>:
 8001c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c12:	bf00      	nop
 8001c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c16:	bc08      	pop	{r3}
 8001c18:	469e      	mov	lr, r3
 8001c1a:	4770      	bx	lr

08001c1c <_fini>:
 8001c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1e:	bf00      	nop
 8001c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c22:	bc08      	pop	{r3}
 8001c24:	469e      	mov	lr, r3
 8001c26:	4770      	bx	lr
