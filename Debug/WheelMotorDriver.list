
WheelMotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001ea8  08001ea8  00011ea8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001ed8  08001ed8  00011ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001ee0  08001ee0  00011ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001ee4  08001ee4  00011ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08001ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  8 .bss          00000190  20000004  20000004  00020004  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000194  20000194  00020004  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001c62d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000386b  00000000  00000000  0003c661  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007db9  00000000  00000000  0003fecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf0  00000000  00000000  00047c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f28  00000000  00000000  00048878  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000702d  00000000  00000000  000497a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004e22  00000000  00000000  000507cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000555ef  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002220  00000000  00000000  0005566c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000004 	.word	0x20000004
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001e90 	.word	0x08001e90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000008 	.word	0x20000008
 80001cc:	08001e90 	.word	0x08001e90

080001d0 <__aeabi_ldivmod>:
 80001d0:	b97b      	cbnz	r3, 80001f2 <__aeabi_ldivmod+0x22>
 80001d2:	b972      	cbnz	r2, 80001f2 <__aeabi_ldivmod+0x22>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bfbe      	ittt	lt
 80001d8:	2000      	movlt	r0, #0
 80001da:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001de:	e006      	blt.n	80001ee <__aeabi_ldivmod+0x1e>
 80001e0:	bf08      	it	eq
 80001e2:	2800      	cmpeq	r0, #0
 80001e4:	bf1c      	itt	ne
 80001e6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001ea:	f04f 30ff 	movne.w	r0, #4294967295
 80001ee:	f000 b9c5 	b.w	800057c <__aeabi_idiv0>
 80001f2:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fa:	2900      	cmp	r1, #0
 80001fc:	db09      	blt.n	8000212 <__aeabi_ldivmod+0x42>
 80001fe:	2b00      	cmp	r3, #0
 8000200:	db1a      	blt.n	8000238 <__aeabi_ldivmod+0x68>
 8000202:	f000 f84d 	bl	80002a0 <__udivmoddi4>
 8000206:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020e:	b004      	add	sp, #16
 8000210:	4770      	bx	lr
 8000212:	4240      	negs	r0, r0
 8000214:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000218:	2b00      	cmp	r3, #0
 800021a:	db1b      	blt.n	8000254 <__aeabi_ldivmod+0x84>
 800021c:	f000 f840 	bl	80002a0 <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4240      	negs	r0, r0
 800022c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000230:	4252      	negs	r2, r2
 8000232:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000236:	4770      	bx	lr
 8000238:	4252      	negs	r2, r2
 800023a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800023e:	f000 f82f 	bl	80002a0 <__udivmoddi4>
 8000242:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000246:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024a:	b004      	add	sp, #16
 800024c:	4240      	negs	r0, r0
 800024e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000252:	4770      	bx	lr
 8000254:	4252      	negs	r2, r2
 8000256:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025a:	f000 f821 	bl	80002a0 <__udivmoddi4>
 800025e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000266:	b004      	add	sp, #16
 8000268:	4252      	negs	r2, r2
 800026a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026e:	4770      	bx	lr

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x30>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800058a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000592:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800059a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059c:	2003      	movs	r0, #3
 800059e:	f000 f827 	bl	80005f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f001 fb9e 	bl	8001ce4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005a8:	f001 fb6c 	bl	8001c84 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80005ac:	2000      	movs	r0, #0
 80005ae:	bd08      	pop	{r3, pc}
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005b4:	4a02      	ldr	r2, [pc, #8]	; (80005c0 <HAL_IncTick+0xc>)
 80005b6:	6813      	ldr	r3, [r2, #0]
 80005b8:	3301      	adds	r3, #1
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	200000f4 	.word	0x200000f4

080005c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005c4:	4b01      	ldr	r3, [pc, #4]	; (80005cc <HAL_GetTick+0x8>)
 80005c6:	6818      	ldr	r0, [r3, #0]
}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	200000f4 	.word	0x200000f4

080005d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80005d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80005d2:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d4:	f7ff fff6 	bl	80005c4 <HAL_GetTick>
  uint32_t wait = Delay;
 80005d8:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005da:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80005dc:	4605      	mov	r5, r0
  {
     wait++;
 80005de:	bf18      	it	ne
 80005e0:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005e2:	f7ff ffef 	bl	80005c4 <HAL_GetTick>
 80005e6:	1b40      	subs	r0, r0, r5
 80005e8:	42a0      	cmp	r0, r4
 80005ea:	d3fa      	bcc.n	80005e2 <HAL_Delay+0x12>
  {
  }
}
 80005ec:	b003      	add	sp, #12
 80005ee:	bd30      	pop	{r4, r5, pc}

080005f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4a07      	ldr	r2, [pc, #28]	; (8000610 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005f2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	0c1b      	lsrs	r3, r3, #16
 80005fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000600:	0200      	lsls	r0, r0, #8
 8000602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000606:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800060a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800060c:	60d3      	str	r3, [r2, #12]
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b17      	ldr	r3, [pc, #92]	; (8000674 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000616:	b530      	push	{r4, r5, lr}
 8000618:	68dc      	ldr	r4, [r3, #12]
 800061a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800061e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000622:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000624:	2b04      	cmp	r3, #4
 8000626:	bf28      	it	cs
 8000628:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	f04f 0501 	mov.w	r5, #1
 8000630:	fa05 f303 	lsl.w	r3, r5, r3
 8000634:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000638:	bf8c      	ite	hi
 800063a:	3c03      	subhi	r4, #3
 800063c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063e:	4019      	ands	r1, r3
 8000640:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000642:	fa05 f404 	lsl.w	r4, r5, r4
 8000646:	3c01      	subs	r4, #1
 8000648:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800064a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064c:	ea42 0201 	orr.w	r2, r2, r1
 8000650:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000654:	bfaf      	iteee	ge
 8000656:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065a:	f000 000f 	andlt.w	r0, r0, #15
 800065e:	4b06      	ldrlt	r3, [pc, #24]	; (8000678 <HAL_NVIC_SetPriority+0x64>)
 8000660:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	bfa5      	ittet	ge
 8000664:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000668:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00
 8000678:	e000ed14 	.word	0xe000ed14

0800067c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800067c:	0942      	lsrs	r2, r0, #5
 800067e:	2301      	movs	r3, #1
 8000680:	f000 001f 	and.w	r0, r0, #31
 8000684:	fa03 f000 	lsl.w	r0, r3, r0
 8000688:	4b01      	ldr	r3, [pc, #4]	; (8000690 <HAL_NVIC_EnableIRQ+0x14>)
 800068a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800068e:	4770      	bx	lr
 8000690:	e000e100 	.word	0xe000e100

08000694 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000694:	3801      	subs	r0, #1
 8000696:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800069a:	d20a      	bcs.n	80006b2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069e:	4a07      	ldr	r2, [pc, #28]	; (80006bc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006a0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	21f0      	movs	r1, #240	; 0xf0
 80006a4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006a8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006aa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ac:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006b2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000e010 	.word	0xe000e010
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006c2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006c4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006c6:	bf0c      	ite	eq
 80006c8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006cc:	f022 0204 	bicne.w	r2, r2, #4
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	4770      	bx	lr
 80006d4:	e000e010 	.word	0xe000e010

080006d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006dc:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006de:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000890 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006e4:	4a68      	ldr	r2, [pc, #416]	; (8000888 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006e6:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000894 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ea:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006ec:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006ee:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006f2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006f4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006f8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006fc:	45b6      	cmp	lr, r6
 80006fe:	f040 80ae 	bne.w	800085e <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000702:	684c      	ldr	r4, [r1, #4]
 8000704:	f024 0710 	bic.w	r7, r4, #16
 8000708:	2f02      	cmp	r7, #2
 800070a:	d116      	bne.n	800073a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800070c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000710:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000714:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000718:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800071c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000720:	f04f 0c0f 	mov.w	ip, #15
 8000724:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000728:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800072c:	690d      	ldr	r5, [r1, #16]
 800072e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000732:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000736:	f8ca 5020 	str.w	r5, [sl, #32]
 800073a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800073e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000740:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000744:	fa05 f50a 	lsl.w	r5, r5, sl
 8000748:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800074a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800074e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000752:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000756:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000758:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800075c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800075e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000762:	d811      	bhi.n	8000788 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000764:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000766:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800076a:	68cf      	ldr	r7, [r1, #12]
 800076c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000770:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000774:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000776:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000778:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800077c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000780:	409f      	lsls	r7, r3
 8000782:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000786:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000788:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800078a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800078c:	688f      	ldr	r7, [r1, #8]
 800078e:	fa07 f70a 	lsl.w	r7, r7, sl
 8000792:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000794:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000796:	00e5      	lsls	r5, r4, #3
 8000798:	d561      	bpl.n	800085e <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	f04f 0b00 	mov.w	fp, #0
 800079e:	f8cd b00c 	str.w	fp, [sp, #12]
 80007a2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a6:	4d39      	ldr	r5, [pc, #228]	; (800088c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a8:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007ac:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80007b0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80007b4:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80007b8:	9703      	str	r7, [sp, #12]
 80007ba:	9f03      	ldr	r7, [sp, #12]
 80007bc:	f023 0703 	bic.w	r7, r3, #3
 80007c0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007c4:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007c8:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007cc:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007d0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007d4:	f04f 0e0f 	mov.w	lr, #15
 80007d8:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007dc:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007de:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007e2:	d043      	beq.n	800086c <HAL_GPIO_Init+0x194>
 80007e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007e8:	42a8      	cmp	r0, r5
 80007ea:	d041      	beq.n	8000870 <HAL_GPIO_Init+0x198>
 80007ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f0:	42a8      	cmp	r0, r5
 80007f2:	d03f      	beq.n	8000874 <HAL_GPIO_Init+0x19c>
 80007f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f8:	42a8      	cmp	r0, r5
 80007fa:	d03d      	beq.n	8000878 <HAL_GPIO_Init+0x1a0>
 80007fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000800:	42a8      	cmp	r0, r5
 8000802:	d03b      	beq.n	800087c <HAL_GPIO_Init+0x1a4>
 8000804:	4548      	cmp	r0, r9
 8000806:	d03b      	beq.n	8000880 <HAL_GPIO_Init+0x1a8>
 8000808:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800080c:	42a8      	cmp	r0, r5
 800080e:	d039      	beq.n	8000884 <HAL_GPIO_Init+0x1ac>
 8000810:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000814:	42a8      	cmp	r0, r5
 8000816:	bf14      	ite	ne
 8000818:	2508      	movne	r5, #8
 800081a:	2507      	moveq	r5, #7
 800081c:	fa05 f50c 	lsl.w	r5, r5, ip
 8000820:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000824:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000826:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000828:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800082a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800082e:	bf0c      	ite	eq
 8000830:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000832:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000834:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000836:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000838:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800083c:	bf0c      	ite	eq
 800083e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000840:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000842:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000844:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000846:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800084a:	bf0c      	ite	eq
 800084c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800084e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000850:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000852:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000854:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000856:	bf54      	ite	pl
 8000858:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800085a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800085c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800085e:	3301      	adds	r3, #1
 8000860:	2b10      	cmp	r3, #16
 8000862:	f47f af44 	bne.w	80006ee <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000866:	b005      	add	sp, #20
 8000868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800086c:	465d      	mov	r5, fp
 800086e:	e7d5      	b.n	800081c <HAL_GPIO_Init+0x144>
 8000870:	2501      	movs	r5, #1
 8000872:	e7d3      	b.n	800081c <HAL_GPIO_Init+0x144>
 8000874:	2502      	movs	r5, #2
 8000876:	e7d1      	b.n	800081c <HAL_GPIO_Init+0x144>
 8000878:	2503      	movs	r5, #3
 800087a:	e7cf      	b.n	800081c <HAL_GPIO_Init+0x144>
 800087c:	2504      	movs	r5, #4
 800087e:	e7cd      	b.n	800081c <HAL_GPIO_Init+0x144>
 8000880:	2505      	movs	r5, #5
 8000882:	e7cb      	b.n	800081c <HAL_GPIO_Init+0x144>
 8000884:	2506      	movs	r5, #6
 8000886:	e7c9      	b.n	800081c <HAL_GPIO_Init+0x144>
 8000888:	40013c00 	.word	0x40013c00
 800088c:	40020000 	.word	0x40020000
 8000890:	40023800 	.word	0x40023800
 8000894:	40021400 	.word	0x40021400

08000898 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000898:	6903      	ldr	r3, [r0, #16]
 800089a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800089c:	bf14      	ite	ne
 800089e:	2001      	movne	r0, #1
 80008a0:	2000      	moveq	r0, #0
 80008a2:	4770      	bx	lr

080008a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008a4:	b10a      	cbz	r2, 80008aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008a6:	6181      	str	r1, [r0, #24]
 80008a8:	4770      	bx	lr
 80008aa:	0409      	lsls	r1, r1, #16
 80008ac:	e7fb      	b.n	80008a6 <HAL_GPIO_WritePin+0x2>

080008ae <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80008ae:	6943      	ldr	r3, [r0, #20]
 80008b0:	4059      	eors	r1, r3
 80008b2:	6141      	str	r1, [r0, #20]
 80008b4:	4770      	bx	lr

080008b6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008b6:	4770      	bx	lr

080008b8 <HAL_GPIO_EXTI_IRQHandler>:
{
 80008b8:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80008ba:	4b04      	ldr	r3, [pc, #16]	; (80008cc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80008bc:	6959      	ldr	r1, [r3, #20]
 80008be:	4201      	tst	r1, r0
 80008c0:	d002      	beq.n	80008c8 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80008c2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80008c4:	f7ff fff7 	bl	80008b6 <HAL_GPIO_EXTI_Callback>
 80008c8:	bd08      	pop	{r3, pc}
 80008ca:	bf00      	nop
 80008cc:	40013c00 	.word	0x40013c00

080008d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008d2:	4604      	mov	r4, r0
 80008d4:	b910      	cbnz	r0, 80008dc <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 80008d6:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80008d8:	b003      	add	sp, #12
 80008da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008dc:	6803      	ldr	r3, [r0, #0]
 80008de:	07d8      	lsls	r0, r3, #31
 80008e0:	d43b      	bmi.n	800095a <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008e2:	6823      	ldr	r3, [r4, #0]
 80008e4:	0799      	lsls	r1, r3, #30
 80008e6:	f100 8084 	bmi.w	80009f2 <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008ea:	6823      	ldr	r3, [r4, #0]
 80008ec:	071e      	lsls	r6, r3, #28
 80008ee:	f100 80c6 	bmi.w	8000a7e <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008f2:	6823      	ldr	r3, [r4, #0]
 80008f4:	075d      	lsls	r5, r3, #29
 80008f6:	d52a      	bpl.n	800094e <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	9301      	str	r3, [sp, #4]
 80008fc:	4baa      	ldr	r3, [pc, #680]	; (8000ba8 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 80008fe:	4dab      	ldr	r5, [pc, #684]	; (8000bac <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000900:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000902:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000906:	641a      	str	r2, [r3, #64]	; 0x40
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	9301      	str	r3, [sp, #4]
 8000910:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000912:	682b      	ldr	r3, [r5, #0]
 8000914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000918:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800091a:	f7ff fe53 	bl	80005c4 <HAL_GetTick>
 800091e:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000920:	682b      	ldr	r3, [r5, #0]
 8000922:	05da      	lsls	r2, r3, #23
 8000924:	f140 80cd 	bpl.w	8000ac2 <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000928:	68a3      	ldr	r3, [r4, #8]
 800092a:	4d9f      	ldr	r5, [pc, #636]	; (8000ba8 <HAL_RCC_OscConfig+0x2d8>)
 800092c:	2b01      	cmp	r3, #1
 800092e:	f040 80cf 	bne.w	8000ad0 <HAL_RCC_OscConfig+0x200>
 8000932:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800093a:	f7ff fe43 	bl	80005c4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800093e:	4d9a      	ldr	r5, [pc, #616]	; (8000ba8 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000940:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000942:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000946:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000948:	079b      	lsls	r3, r3, #30
 800094a:	f140 80e2 	bpl.w	8000b12 <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800094e:	69a2      	ldr	r2, [r4, #24]
 8000950:	2a00      	cmp	r2, #0
 8000952:	f040 80e5 	bne.w	8000b20 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 8000956:	2000      	movs	r0, #0
 8000958:	e7be      	b.n	80008d8 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800095a:	4b93      	ldr	r3, [pc, #588]	; (8000ba8 <HAL_RCC_OscConfig+0x2d8>)
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	f002 020c 	and.w	r2, r2, #12
 8000962:	2a04      	cmp	r2, #4
 8000964:	d007      	beq.n	8000976 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000966:	689a      	ldr	r2, [r3, #8]
 8000968:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800096c:	2a08      	cmp	r2, #8
 800096e:	d10a      	bne.n	8000986 <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	025a      	lsls	r2, r3, #9
 8000974:	d507      	bpl.n	8000986 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000976:	4b8c      	ldr	r3, [pc, #560]	; (8000ba8 <HAL_RCC_OscConfig+0x2d8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	039b      	lsls	r3, r3, #14
 800097c:	d5b1      	bpl.n	80008e2 <HAL_RCC_OscConfig+0x12>
 800097e:	6863      	ldr	r3, [r4, #4]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1ae      	bne.n	80008e2 <HAL_RCC_OscConfig+0x12>
 8000984:	e7a7      	b.n	80008d6 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000986:	6863      	ldr	r3, [r4, #4]
 8000988:	4d87      	ldr	r5, [pc, #540]	; (8000ba8 <HAL_RCC_OscConfig+0x2d8>)
 800098a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800098e:	d111      	bne.n	80009b4 <HAL_RCC_OscConfig+0xe4>
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000996:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000998:	f7ff fe14 	bl	80005c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800099c:	4d82      	ldr	r5, [pc, #520]	; (8000ba8 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 800099e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009a0:	682b      	ldr	r3, [r5, #0]
 80009a2:	039f      	lsls	r7, r3, #14
 80009a4:	d49d      	bmi.n	80008e2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009a6:	f7ff fe0d 	bl	80005c4 <HAL_GetTick>
 80009aa:	1b80      	subs	r0, r0, r6
 80009ac:	2864      	cmp	r0, #100	; 0x64
 80009ae:	d9f7      	bls.n	80009a0 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80009b0:	2003      	movs	r0, #3
 80009b2:	e791      	b.n	80008d8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009b8:	d104      	bne.n	80009c4 <HAL_RCC_OscConfig+0xf4>
 80009ba:	682b      	ldr	r3, [r5, #0]
 80009bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c0:	602b      	str	r3, [r5, #0]
 80009c2:	e7e5      	b.n	8000990 <HAL_RCC_OscConfig+0xc0>
 80009c4:	682a      	ldr	r2, [r5, #0]
 80009c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009ca:	602a      	str	r2, [r5, #0]
 80009cc:	682a      	ldr	r2, [r5, #0]
 80009ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009d2:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1df      	bne.n	8000998 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 80009d8:	f7ff fdf4 	bl	80005c4 <HAL_GetTick>
 80009dc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009de:	682b      	ldr	r3, [r5, #0]
 80009e0:	0398      	lsls	r0, r3, #14
 80009e2:	f57f af7e 	bpl.w	80008e2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009e6:	f7ff fded 	bl	80005c4 <HAL_GetTick>
 80009ea:	1b80      	subs	r0, r0, r6
 80009ec:	2864      	cmp	r0, #100	; 0x64
 80009ee:	d9f6      	bls.n	80009de <HAL_RCC_OscConfig+0x10e>
 80009f0:	e7de      	b.n	80009b0 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009f2:	4b6d      	ldr	r3, [pc, #436]	; (8000ba8 <HAL_RCC_OscConfig+0x2d8>)
 80009f4:	689a      	ldr	r2, [r3, #8]
 80009f6:	f012 0f0c 	tst.w	r2, #12
 80009fa:	d007      	beq.n	8000a0c <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009fc:	689a      	ldr	r2, [r3, #8]
 80009fe:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a02:	2a08      	cmp	r2, #8
 8000a04:	d112      	bne.n	8000a2c <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	0259      	lsls	r1, r3, #9
 8000a0a:	d40f      	bmi.n	8000a2c <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a0c:	4b66      	ldr	r3, [pc, #408]	; (8000ba8 <HAL_RCC_OscConfig+0x2d8>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	0792      	lsls	r2, r2, #30
 8000a12:	d503      	bpl.n	8000a1c <HAL_RCC_OscConfig+0x14c>
 8000a14:	68e2      	ldr	r2, [r4, #12]
 8000a16:	2a01      	cmp	r2, #1
 8000a18:	f47f af5d 	bne.w	80008d6 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	6921      	ldr	r1, [r4, #16]
 8000a20:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a24:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a28:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a2a:	e75e      	b.n	80008ea <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a2c:	68e2      	ldr	r2, [r4, #12]
 8000a2e:	4b60      	ldr	r3, [pc, #384]	; (8000bb0 <HAL_RCC_OscConfig+0x2e0>)
 8000a30:	b1b2      	cbz	r2, 8000a60 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8000a32:	2201      	movs	r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a36:	f7ff fdc5 	bl	80005c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a3a:	4d5b      	ldr	r5, [pc, #364]	; (8000ba8 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000a3c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a3e:	682b      	ldr	r3, [r5, #0]
 8000a40:	079b      	lsls	r3, r3, #30
 8000a42:	d507      	bpl.n	8000a54 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a44:	682b      	ldr	r3, [r5, #0]
 8000a46:	6922      	ldr	r2, [r4, #16]
 8000a48:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a4c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a50:	602b      	str	r3, [r5, #0]
 8000a52:	e74a      	b.n	80008ea <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a54:	f7ff fdb6 	bl	80005c4 <HAL_GetTick>
 8000a58:	1b80      	subs	r0, r0, r6
 8000a5a:	2802      	cmp	r0, #2
 8000a5c:	d9ef      	bls.n	8000a3e <HAL_RCC_OscConfig+0x16e>
 8000a5e:	e7a7      	b.n	80009b0 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8000a60:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a62:	f7ff fdaf 	bl	80005c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a66:	4d50      	ldr	r5, [pc, #320]	; (8000ba8 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000a68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a6a:	682b      	ldr	r3, [r5, #0]
 8000a6c:	079f      	lsls	r7, r3, #30
 8000a6e:	f57f af3c 	bpl.w	80008ea <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a72:	f7ff fda7 	bl	80005c4 <HAL_GetTick>
 8000a76:	1b80      	subs	r0, r0, r6
 8000a78:	2802      	cmp	r0, #2
 8000a7a:	d9f6      	bls.n	8000a6a <HAL_RCC_OscConfig+0x19a>
 8000a7c:	e798      	b.n	80009b0 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a7e:	6962      	ldr	r2, [r4, #20]
 8000a80:	4b4c      	ldr	r3, [pc, #304]	; (8000bb4 <HAL_RCC_OscConfig+0x2e4>)
 8000a82:	b17a      	cbz	r2, 8000aa4 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 8000a84:	2201      	movs	r2, #1
 8000a86:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a88:	f7ff fd9c 	bl	80005c4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a8c:	4d46      	ldr	r5, [pc, #280]	; (8000ba8 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000a8e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a90:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a92:	0798      	lsls	r0, r3, #30
 8000a94:	f53f af2d 	bmi.w	80008f2 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a98:	f7ff fd94 	bl	80005c4 <HAL_GetTick>
 8000a9c:	1b80      	subs	r0, r0, r6
 8000a9e:	2802      	cmp	r0, #2
 8000aa0:	d9f6      	bls.n	8000a90 <HAL_RCC_OscConfig+0x1c0>
 8000aa2:	e785      	b.n	80009b0 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 8000aa4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000aa6:	f7ff fd8d 	bl	80005c4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000aaa:	4d3f      	ldr	r5, [pc, #252]	; (8000ba8 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000aac:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000aae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ab0:	0799      	lsls	r1, r3, #30
 8000ab2:	f57f af1e 	bpl.w	80008f2 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ab6:	f7ff fd85 	bl	80005c4 <HAL_GetTick>
 8000aba:	1b80      	subs	r0, r0, r6
 8000abc:	2802      	cmp	r0, #2
 8000abe:	d9f6      	bls.n	8000aae <HAL_RCC_OscConfig+0x1de>
 8000ac0:	e776      	b.n	80009b0 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000ac2:	f7ff fd7f 	bl	80005c4 <HAL_GetTick>
 8000ac6:	1b80      	subs	r0, r0, r6
 8000ac8:	2802      	cmp	r0, #2
 8000aca:	f67f af29 	bls.w	8000920 <HAL_RCC_OscConfig+0x50>
 8000ace:	e76f      	b.n	80009b0 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ad0:	2b05      	cmp	r3, #5
 8000ad2:	d104      	bne.n	8000ade <HAL_RCC_OscConfig+0x20e>
 8000ad4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	672b      	str	r3, [r5, #112]	; 0x70
 8000adc:	e729      	b.n	8000932 <HAL_RCC_OscConfig+0x62>
 8000ade:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ae0:	f022 0201 	bic.w	r2, r2, #1
 8000ae4:	672a      	str	r2, [r5, #112]	; 0x70
 8000ae6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ae8:	f022 0204 	bic.w	r2, r2, #4
 8000aec:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f47f af23 	bne.w	800093a <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8000af4:	f7ff fd66 	bl	80005c4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000af8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000afc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000afe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b00:	0798      	lsls	r0, r3, #30
 8000b02:	f57f af24 	bpl.w	800094e <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b06:	f7ff fd5d 	bl	80005c4 <HAL_GetTick>
 8000b0a:	1b80      	subs	r0, r0, r6
 8000b0c:	42b8      	cmp	r0, r7
 8000b0e:	d9f6      	bls.n	8000afe <HAL_RCC_OscConfig+0x22e>
 8000b10:	e74e      	b.n	80009b0 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b12:	f7ff fd57 	bl	80005c4 <HAL_GetTick>
 8000b16:	1b80      	subs	r0, r0, r6
 8000b18:	42b8      	cmp	r0, r7
 8000b1a:	f67f af14 	bls.w	8000946 <HAL_RCC_OscConfig+0x76>
 8000b1e:	e747      	b.n	80009b0 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b20:	4d21      	ldr	r5, [pc, #132]	; (8000ba8 <HAL_RCC_OscConfig+0x2d8>)
 8000b22:	68ab      	ldr	r3, [r5, #8]
 8000b24:	f003 030c 	and.w	r3, r3, #12
 8000b28:	2b08      	cmp	r3, #8
 8000b2a:	f43f aed4 	beq.w	80008d6 <HAL_RCC_OscConfig+0x6>
 8000b2e:	4e22      	ldr	r6, [pc, #136]	; (8000bb8 <HAL_RCC_OscConfig+0x2e8>)
 8000b30:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b32:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b34:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b36:	d12a      	bne.n	8000b8e <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8000b38:	f7ff fd44 	bl	80005c4 <HAL_GetTick>
 8000b3c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b3e:	682b      	ldr	r3, [r5, #0]
 8000b40:	0199      	lsls	r1, r3, #6
 8000b42:	d41e      	bmi.n	8000b82 <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b44:	6a22      	ldr	r2, [r4, #32]
 8000b46:	69e3      	ldr	r3, [r4, #28]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b4c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b58:	4c13      	ldr	r4, [pc, #76]	; (8000ba8 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b5a:	0852      	lsrs	r2, r2, #1
 8000b5c:	3a01      	subs	r2, #1
 8000b5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b62:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b64:	2301      	movs	r3, #1
 8000b66:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b68:	f7ff fd2c 	bl	80005c4 <HAL_GetTick>
 8000b6c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b6e:	6823      	ldr	r3, [r4, #0]
 8000b70:	019a      	lsls	r2, r3, #6
 8000b72:	f53f aef0 	bmi.w	8000956 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b76:	f7ff fd25 	bl	80005c4 <HAL_GetTick>
 8000b7a:	1b40      	subs	r0, r0, r5
 8000b7c:	2802      	cmp	r0, #2
 8000b7e:	d9f6      	bls.n	8000b6e <HAL_RCC_OscConfig+0x29e>
 8000b80:	e716      	b.n	80009b0 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b82:	f7ff fd1f 	bl	80005c4 <HAL_GetTick>
 8000b86:	1bc0      	subs	r0, r0, r7
 8000b88:	2802      	cmp	r0, #2
 8000b8a:	d9d8      	bls.n	8000b3e <HAL_RCC_OscConfig+0x26e>
 8000b8c:	e710      	b.n	80009b0 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8000b8e:	f7ff fd19 	bl	80005c4 <HAL_GetTick>
 8000b92:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b94:	682b      	ldr	r3, [r5, #0]
 8000b96:	019b      	lsls	r3, r3, #6
 8000b98:	f57f aedd 	bpl.w	8000956 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b9c:	f7ff fd12 	bl	80005c4 <HAL_GetTick>
 8000ba0:	1b00      	subs	r0, r0, r4
 8000ba2:	2802      	cmp	r0, #2
 8000ba4:	d9f6      	bls.n	8000b94 <HAL_RCC_OscConfig+0x2c4>
 8000ba6:	e703      	b.n	80009b0 <HAL_RCC_OscConfig+0xe0>
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40007000 	.word	0x40007000
 8000bb0:	42470000 	.word	0x42470000
 8000bb4:	42470e80 	.word	0x42470e80
 8000bb8:	42470060 	.word	0x42470060

08000bbc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bbc:	4913      	ldr	r1, [pc, #76]	; (8000c0c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bbe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bc0:	688b      	ldr	r3, [r1, #8]
 8000bc2:	f003 030c 	and.w	r3, r3, #12
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	d003      	beq.n	8000bd2 <HAL_RCC_GetSysClockFreq+0x16>
 8000bca:	2b08      	cmp	r3, #8
 8000bcc:	d003      	beq.n	8000bd6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bce:	4810      	ldr	r0, [pc, #64]	; (8000c10 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000bd0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000bd2:	4810      	ldr	r0, [pc, #64]	; (8000c14 <HAL_RCC_GetSysClockFreq+0x58>)
 8000bd4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bd6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bd8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bda:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bdc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000be0:	bf14      	ite	ne
 8000be2:	480c      	ldrne	r0, [pc, #48]	; (8000c14 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000be4:	480a      	ldreq	r0, [pc, #40]	; (8000c10 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000be6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000bea:	bf18      	it	ne
 8000bec:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bf2:	fba1 0100 	umull	r0, r1, r1, r0
 8000bf6:	f7ff fb3b 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <HAL_RCC_GetSysClockFreq+0x50>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c02:	3301      	adds	r3, #1
 8000c04:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c06:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c0a:	bd08      	pop	{r3, pc}
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	00f42400 	.word	0x00f42400
 8000c14:	017d7840 	.word	0x017d7840

08000c18 <HAL_RCC_ClockConfig>:
{
 8000c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c1c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c1e:	4604      	mov	r4, r0
 8000c20:	b910      	cbnz	r0, 8000c28 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c22:	2001      	movs	r0, #1
 8000c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c28:	4b44      	ldr	r3, [pc, #272]	; (8000d3c <HAL_RCC_ClockConfig+0x124>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	f002 020f 	and.w	r2, r2, #15
 8000c30:	428a      	cmp	r2, r1
 8000c32:	d328      	bcc.n	8000c86 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c34:	6821      	ldr	r1, [r4, #0]
 8000c36:	078f      	lsls	r7, r1, #30
 8000c38:	d42d      	bmi.n	8000c96 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c3a:	07c8      	lsls	r0, r1, #31
 8000c3c:	d440      	bmi.n	8000cc0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c3e:	4b3f      	ldr	r3, [pc, #252]	; (8000d3c <HAL_RCC_ClockConfig+0x124>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	f002 020f 	and.w	r2, r2, #15
 8000c46:	4295      	cmp	r5, r2
 8000c48:	d366      	bcc.n	8000d18 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c4a:	6822      	ldr	r2, [r4, #0]
 8000c4c:	0751      	lsls	r1, r2, #29
 8000c4e:	d46c      	bmi.n	8000d2a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c50:	0713      	lsls	r3, r2, #28
 8000c52:	d507      	bpl.n	8000c64 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c54:	4a3a      	ldr	r2, [pc, #232]	; (8000d40 <HAL_RCC_ClockConfig+0x128>)
 8000c56:	6921      	ldr	r1, [r4, #16]
 8000c58:	6893      	ldr	r3, [r2, #8]
 8000c5a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c5e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c62:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c64:	f7ff ffaa 	bl	8000bbc <HAL_RCC_GetSysClockFreq>
 8000c68:	4b35      	ldr	r3, [pc, #212]	; (8000d40 <HAL_RCC_ClockConfig+0x128>)
 8000c6a:	4a36      	ldr	r2, [pc, #216]	; (8000d44 <HAL_RCC_ClockConfig+0x12c>)
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c72:	5cd3      	ldrb	r3, [r2, r3]
 8000c74:	40d8      	lsrs	r0, r3
 8000c76:	4b34      	ldr	r3, [pc, #208]	; (8000d48 <HAL_RCC_ClockConfig+0x130>)
 8000c78:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f001 f832 	bl	8001ce4 <HAL_InitTick>
  return HAL_OK;
 8000c80:	2000      	movs	r0, #0
 8000c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c86:	b2ca      	uxtb	r2, r1
 8000c88:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 030f 	and.w	r3, r3, #15
 8000c90:	4299      	cmp	r1, r3
 8000c92:	d1c6      	bne.n	8000c22 <HAL_RCC_ClockConfig+0xa>
 8000c94:	e7ce      	b.n	8000c34 <HAL_RCC_ClockConfig+0x1c>
 8000c96:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c98:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	689a      	ldrne	r2, [r3, #8]
 8000ca0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000ca4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ca6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ca8:	bf42      	ittt	mi
 8000caa:	689a      	ldrmi	r2, [r3, #8]
 8000cac:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000cb0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	68a0      	ldr	r0, [r4, #8]
 8000cb6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	e7bc      	b.n	8000c3a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cc0:	6862      	ldr	r2, [r4, #4]
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <HAL_RCC_ClockConfig+0x128>)
 8000cc4:	2a01      	cmp	r2, #1
 8000cc6:	d11d      	bne.n	8000d04 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cce:	d0a8      	beq.n	8000c22 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cd0:	4e1b      	ldr	r6, [pc, #108]	; (8000d40 <HAL_RCC_ClockConfig+0x128>)
 8000cd2:	68b3      	ldr	r3, [r6, #8]
 8000cd4:	f023 0303 	bic.w	r3, r3, #3
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000cdc:	f7ff fc72 	bl	80005c4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ce0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000ce4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ce6:	68b3      	ldr	r3, [r6, #8]
 8000ce8:	6862      	ldr	r2, [r4, #4]
 8000cea:	f003 030c 	and.w	r3, r3, #12
 8000cee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000cf2:	d0a4      	beq.n	8000c3e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cf4:	f7ff fc66 	bl	80005c4 <HAL_GetTick>
 8000cf8:	1bc0      	subs	r0, r0, r7
 8000cfa:	4540      	cmp	r0, r8
 8000cfc:	d9f3      	bls.n	8000ce6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000cfe:	2003      	movs	r0, #3
}
 8000d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d04:	1e91      	subs	r1, r2, #2
 8000d06:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d08:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d0a:	d802      	bhi.n	8000d12 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d0c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d10:	e7dd      	b.n	8000cce <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d12:	f013 0f02 	tst.w	r3, #2
 8000d16:	e7da      	b.n	8000cce <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d18:	b2ea      	uxtb	r2, r5
 8000d1a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	429d      	cmp	r5, r3
 8000d24:	f47f af7d 	bne.w	8000c22 <HAL_RCC_ClockConfig+0xa>
 8000d28:	e78f      	b.n	8000c4a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d2a:	4905      	ldr	r1, [pc, #20]	; (8000d40 <HAL_RCC_ClockConfig+0x128>)
 8000d2c:	68e0      	ldr	r0, [r4, #12]
 8000d2e:	688b      	ldr	r3, [r1, #8]
 8000d30:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d34:	4303      	orrs	r3, r0
 8000d36:	608b      	str	r3, [r1, #8]
 8000d38:	e78a      	b.n	8000c50 <HAL_RCC_ClockConfig+0x38>
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00
 8000d40:	40023800 	.word	0x40023800
 8000d44:	08001ebd 	.word	0x08001ebd
 8000d48:	20000000 	.word	0x20000000

08000d4c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000d4c:	4b01      	ldr	r3, [pc, #4]	; (8000d54 <HAL_RCC_GetHCLKFreq+0x8>)
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000000 	.word	0x20000000

08000d58 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d62:	5cd3      	ldrb	r3, [r2, r3]
 8000d64:	4a03      	ldr	r2, [pc, #12]	; (8000d74 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d66:	6810      	ldr	r0, [r2, #0]
}
 8000d68:	40d8      	lsrs	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	08001ecd 	.word	0x08001ecd
 8000d74:	20000000 	.word	0x20000000

08000d78 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d78:	230f      	movs	r3, #15
 8000d7a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_RCC_GetClockConfig+0x34>)
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	f002 0203 	and.w	r2, r2, #3
 8000d84:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000d8c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000d94:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	08db      	lsrs	r3, r3, #3
 8000d9a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000d9e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <HAL_RCC_GetClockConfig+0x38>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 030f 	and.w	r3, r3, #15
 8000da8:	600b      	str	r3, [r1, #0]
 8000daa:	4770      	bx	lr
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40023c00 	.word	0x40023c00

08000db4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000db4:	6a03      	ldr	r3, [r0, #32]
 8000db6:	f023 0301 	bic.w	r3, r3, #1
 8000dba:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000dbc:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000dbe:	6842      	ldr	r2, [r0, #4]
{
 8000dc0:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000dc2:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000dc4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000dc6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000dca:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000dcc:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000dce:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000dd2:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000dd4:	4c0c      	ldr	r4, [pc, #48]	; (8000e08 <TIM_OC1_SetConfig+0x54>)
 8000dd6:	42a0      	cmp	r0, r4
 8000dd8:	d009      	beq.n	8000dee <TIM_OC1_SetConfig+0x3a>
 8000dda:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000dde:	42a0      	cmp	r0, r4
 8000de0:	d005      	beq.n	8000dee <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000de2:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000de4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000de6:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8000de8:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000dea:	6203      	str	r3, [r0, #32]
} 
 8000dec:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8000dee:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8000df0:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000df2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000df6:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000df8:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000dfa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000dfe:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000e00:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e04:	4322      	orrs	r2, r4
 8000e06:	e7ec      	b.n	8000de2 <TIM_OC1_SetConfig+0x2e>
 8000e08:	40010000 	.word	0x40010000

08000e0c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000e0c:	6a03      	ldr	r3, [r0, #32]
 8000e0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e12:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e14:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000e16:	6842      	ldr	r2, [r0, #4]
{
 8000e18:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000e1a:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e1c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8000e1e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000e22:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e24:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000e26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e2a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000e2e:	4c0e      	ldr	r4, [pc, #56]	; (8000e68 <TIM_OC3_SetConfig+0x5c>)
 8000e30:	42a0      	cmp	r0, r4
 8000e32:	d009      	beq.n	8000e48 <TIM_OC3_SetConfig+0x3c>
 8000e34:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e38:	42a0      	cmp	r0, r4
 8000e3a:	d005      	beq.n	8000e48 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e3c:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000e3e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000e40:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000e42:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e44:	6203      	str	r3, [r0, #32]
}
 8000e46:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000e48:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e4a:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000e4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000e50:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000e54:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000e56:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e5a:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000e5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e60:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8000e64:	e7ea      	b.n	8000e3c <TIM_OC3_SetConfig+0x30>
 8000e66:	bf00      	nop
 8000e68:	40010000 	.word	0x40010000

08000e6c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000e6c:	6a03      	ldr	r3, [r0, #32]
 8000e6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e72:	6203      	str	r3, [r0, #32]
{
 8000e74:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e76:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000e78:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000e7a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e7c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000e7e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e82:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e86:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000e88:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e8c:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000e90:	4d09      	ldr	r5, [pc, #36]	; (8000eb8 <TIM_OC4_SetConfig+0x4c>)
 8000e92:	42a8      	cmp	r0, r5
 8000e94:	d009      	beq.n	8000eaa <TIM_OC4_SetConfig+0x3e>
 8000e96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e9a:	42a8      	cmp	r0, r5
 8000e9c:	d005      	beq.n	8000eaa <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e9e:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000ea0:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000ea2:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8000ea4:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ea6:	6204      	str	r4, [r0, #32]
}
 8000ea8:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000eaa:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000eb0:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8000eb4:	e7f3      	b.n	8000e9e <TIM_OC4_SetConfig+0x32>
 8000eb6:	bf00      	nop
 8000eb8:	40010000 	.word	0x40010000

08000ebc <HAL_TIM_Base_MspInit>:
 8000ebc:	4770      	bx	lr

08000ebe <HAL_TIM_Base_Start>:
  __HAL_TIM_ENABLE(htim);
 8000ebe:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE(htim);
 8000ec6:	6813      	ldr	r3, [r2, #0]
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	4770      	bx	lr

08000ed8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000ed8:	6803      	ldr	r3, [r0, #0]
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	f042 0201 	orr.w	r2, r2, #1
 8000ee0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	f042 0201 	orr.w	r2, r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]
}
 8000eea:	2000      	movs	r0, #0
 8000eec:	4770      	bx	lr

08000eee <HAL_TIM_OC_DelayElapsedCallback>:
 8000eee:	4770      	bx	lr

08000ef0 <HAL_TIM_IC_CaptureCallback>:
 8000ef0:	4770      	bx	lr

08000ef2 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_TIM_TriggerCallback>:
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ef6:	6803      	ldr	r3, [r0, #0]
 8000ef8:	691a      	ldr	r2, [r3, #16]
 8000efa:	0791      	lsls	r1, r2, #30
{
 8000efc:	b510      	push	{r4, lr}
 8000efe:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f00:	d50e      	bpl.n	8000f20 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	0792      	lsls	r2, r2, #30
 8000f06:	d50b      	bpl.n	8000f20 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000f08:	f06f 0202 	mvn.w	r2, #2
 8000f0c:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f0e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f10:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f12:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f14:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f16:	d077      	beq.n	8001008 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000f18:	f7ff ffea 	bl	8000ef0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	691a      	ldr	r2, [r3, #16]
 8000f24:	0750      	lsls	r0, r2, #29
 8000f26:	d510      	bpl.n	8000f4a <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000f28:	68da      	ldr	r2, [r3, #12]
 8000f2a:	0751      	lsls	r1, r2, #29
 8000f2c:	d50d      	bpl.n	8000f4a <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000f2e:	f06f 0204 	mvn.w	r2, #4
 8000f32:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f34:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f36:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f38:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f3c:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000f3e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f40:	d068      	beq.n	8001014 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f42:	f7ff ffd5 	bl	8000ef0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f46:	2300      	movs	r3, #0
 8000f48:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000f4a:	6823      	ldr	r3, [r4, #0]
 8000f4c:	691a      	ldr	r2, [r3, #16]
 8000f4e:	0712      	lsls	r2, r2, #28
 8000f50:	d50f      	bpl.n	8000f72 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	0710      	lsls	r0, r2, #28
 8000f56:	d50c      	bpl.n	8000f72 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000f58:	f06f 0208 	mvn.w	r2, #8
 8000f5c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f5e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000f60:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f62:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000f64:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000f66:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f68:	d05a      	beq.n	8001020 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f6a:	f7ff ffc1 	bl	8000ef0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	691a      	ldr	r2, [r3, #16]
 8000f76:	06d2      	lsls	r2, r2, #27
 8000f78:	d510      	bpl.n	8000f9c <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	06d0      	lsls	r0, r2, #27
 8000f7e:	d50d      	bpl.n	8000f9c <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000f80:	f06f 0210 	mvn.w	r2, #16
 8000f84:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f86:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000f88:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f8a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000f8e:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000f90:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f92:	d04b      	beq.n	800102c <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f94:	f7ff ffac 	bl	8000ef0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000f9c:	6823      	ldr	r3, [r4, #0]
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	07d1      	lsls	r1, r2, #31
 8000fa2:	d508      	bpl.n	8000fb6 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	07d2      	lsls	r2, r2, #31
 8000fa8:	d505      	bpl.n	8000fb6 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000faa:	f06f 0201 	mvn.w	r2, #1
 8000fae:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	f000 fe09 	bl	8001bc8 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000fb6:	6823      	ldr	r3, [r4, #0]
 8000fb8:	691a      	ldr	r2, [r3, #16]
 8000fba:	0610      	lsls	r0, r2, #24
 8000fbc:	d508      	bpl.n	8000fd0 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	0611      	lsls	r1, r2, #24
 8000fc2:	d505      	bpl.n	8000fd0 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000fc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000fc8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f000 fa01 	bl	80013d2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	691a      	ldr	r2, [r3, #16]
 8000fd4:	0652      	lsls	r2, r2, #25
 8000fd6:	d508      	bpl.n	8000fea <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	0650      	lsls	r0, r2, #25
 8000fdc:	d505      	bpl.n	8000fea <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000fde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000fe2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	f7ff ff85 	bl	8000ef4 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	0691      	lsls	r1, r2, #26
 8000ff0:	d522      	bpl.n	8001038 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	0692      	lsls	r2, r2, #26
 8000ff6:	d51f      	bpl.n	8001038 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000ff8:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000ffc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000ffe:	611a      	str	r2, [r3, #16]
}
 8001000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001004:	f000 b9e4 	b.w	80013d0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001008:	f7ff ff71 	bl	8000eee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800100c:	4620      	mov	r0, r4
 800100e:	f7ff ff70 	bl	8000ef2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001012:	e783      	b.n	8000f1c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001014:	f7ff ff6b 	bl	8000eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001018:	4620      	mov	r0, r4
 800101a:	f7ff ff6a 	bl	8000ef2 <HAL_TIM_PWM_PulseFinishedCallback>
 800101e:	e792      	b.n	8000f46 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001020:	f7ff ff65 	bl	8000eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001024:	4620      	mov	r0, r4
 8001026:	f7ff ff64 	bl	8000ef2 <HAL_TIM_PWM_PulseFinishedCallback>
 800102a:	e7a0      	b.n	8000f6e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800102c:	f7ff ff5f 	bl	8000eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001030:	4620      	mov	r0, r4
 8001032:	f7ff ff5e 	bl	8000ef2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001036:	e7af      	b.n	8000f98 <HAL_TIM_IRQHandler+0xa2>
 8001038:	bd10      	pop	{r4, pc}
	...

0800103c <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800103c:	4a2e      	ldr	r2, [pc, #184]	; (80010f8 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 800103e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001040:	4290      	cmp	r0, r2
 8001042:	d012      	beq.n	800106a <TIM_Base_SetConfig+0x2e>
 8001044:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001048:	d00f      	beq.n	800106a <TIM_Base_SetConfig+0x2e>
 800104a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800104e:	4290      	cmp	r0, r2
 8001050:	d00b      	beq.n	800106a <TIM_Base_SetConfig+0x2e>
 8001052:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001056:	4290      	cmp	r0, r2
 8001058:	d007      	beq.n	800106a <TIM_Base_SetConfig+0x2e>
 800105a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800105e:	4290      	cmp	r0, r2
 8001060:	d003      	beq.n	800106a <TIM_Base_SetConfig+0x2e>
 8001062:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001066:	4290      	cmp	r0, r2
 8001068:	d11d      	bne.n	80010a6 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800106a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800106c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001070:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001072:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <TIM_Base_SetConfig+0xbc>)
 8001074:	4290      	cmp	r0, r2
 8001076:	d104      	bne.n	8001082 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001078:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800107a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800107e:	4313      	orrs	r3, r2
 8001080:	e028      	b.n	80010d4 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001082:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001086:	d0f7      	beq.n	8001078 <TIM_Base_SetConfig+0x3c>
 8001088:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <TIM_Base_SetConfig+0xc0>)
 800108a:	4290      	cmp	r0, r2
 800108c:	d0f4      	beq.n	8001078 <TIM_Base_SetConfig+0x3c>
 800108e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001092:	4290      	cmp	r0, r2
 8001094:	d0f0      	beq.n	8001078 <TIM_Base_SetConfig+0x3c>
 8001096:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800109a:	4290      	cmp	r0, r2
 800109c:	d0ec      	beq.n	8001078 <TIM_Base_SetConfig+0x3c>
 800109e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80010a2:	4290      	cmp	r0, r2
 80010a4:	d0e8      	beq.n	8001078 <TIM_Base_SetConfig+0x3c>
 80010a6:	4a16      	ldr	r2, [pc, #88]	; (8001100 <TIM_Base_SetConfig+0xc4>)
 80010a8:	4290      	cmp	r0, r2
 80010aa:	d0e5      	beq.n	8001078 <TIM_Base_SetConfig+0x3c>
 80010ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010b0:	4290      	cmp	r0, r2
 80010b2:	d0e1      	beq.n	8001078 <TIM_Base_SetConfig+0x3c>
 80010b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010b8:	4290      	cmp	r0, r2
 80010ba:	d0dd      	beq.n	8001078 <TIM_Base_SetConfig+0x3c>
 80010bc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80010c0:	4290      	cmp	r0, r2
 80010c2:	d0d9      	beq.n	8001078 <TIM_Base_SetConfig+0x3c>
 80010c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010c8:	4290      	cmp	r0, r2
 80010ca:	d0d5      	beq.n	8001078 <TIM_Base_SetConfig+0x3c>
 80010cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010d0:	4290      	cmp	r0, r2
 80010d2:	d0d1      	beq.n	8001078 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 80010d4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80010d6:	688b      	ldr	r3, [r1, #8]
 80010d8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80010da:	680b      	ldr	r3, [r1, #0]
 80010dc:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <TIM_Base_SetConfig+0xbc>)
 80010e0:	4298      	cmp	r0, r3
 80010e2:	d006      	beq.n	80010f2 <TIM_Base_SetConfig+0xb6>
 80010e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010e8:	4298      	cmp	r0, r3
 80010ea:	d002      	beq.n	80010f2 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 80010ec:	2301      	movs	r3, #1
 80010ee:	6143      	str	r3, [r0, #20]
}
 80010f0:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80010f2:	690b      	ldr	r3, [r1, #16]
 80010f4:	6303      	str	r3, [r0, #48]	; 0x30
 80010f6:	e7f9      	b.n	80010ec <TIM_Base_SetConfig+0xb0>
 80010f8:	40010000 	.word	0x40010000
 80010fc:	40000400 	.word	0x40000400
 8001100:	40014000 	.word	0x40014000

08001104 <HAL_TIM_Base_Init>:
{ 
 8001104:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001106:	4604      	mov	r4, r0
 8001108:	b1a0      	cbz	r0, 8001134 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800110a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800110e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001112:	b91b      	cbnz	r3, 800111c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001114:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001118:	f7ff fed0 	bl	8000ebc <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800111c:	2302      	movs	r3, #2
 800111e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001122:	6820      	ldr	r0, [r4, #0]
 8001124:	1d21      	adds	r1, r4, #4
 8001126:	f7ff ff89 	bl	800103c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800112a:	2301      	movs	r3, #1
 800112c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001130:	2000      	movs	r0, #0
 8001132:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001134:	2001      	movs	r0, #1
}
 8001136:	bd10      	pop	{r4, pc}

08001138 <HAL_TIM_PWM_Init>:
{
 8001138:	b510      	push	{r4, lr}
  if(htim == NULL)
 800113a:	4604      	mov	r4, r0
 800113c:	b1a0      	cbz	r0, 8001168 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800113e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001142:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001146:	b91b      	cbnz	r3, 8001150 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001148:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 800114c:	f000 fb7a 	bl	8001844 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8001150:	2302      	movs	r3, #2
 8001152:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001156:	6820      	ldr	r0, [r4, #0]
 8001158:	1d21      	adds	r1, r4, #4
 800115a:	f7ff ff6f 	bl	800103c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800115e:	2301      	movs	r3, #1
 8001160:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001164:	2000      	movs	r0, #0
 8001166:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001168:	2001      	movs	r0, #1
}  
 800116a:	bd10      	pop	{r4, pc}

0800116c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800116c:	6a03      	ldr	r3, [r0, #32]
 800116e:	f023 0310 	bic.w	r3, r3, #16
 8001172:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001174:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001176:	6842      	ldr	r2, [r0, #4]
{
 8001178:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 800117a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800117c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800117e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001182:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001186:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001188:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800118c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001190:	4c0d      	ldr	r4, [pc, #52]	; (80011c8 <TIM_OC2_SetConfig+0x5c>)
 8001192:	42a0      	cmp	r0, r4
 8001194:	d009      	beq.n	80011aa <TIM_OC2_SetConfig+0x3e>
 8001196:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800119a:	42a0      	cmp	r0, r4
 800119c:	d005      	beq.n	80011aa <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 800119e:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80011a0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80011a2:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80011a4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80011a6:	6203      	str	r3, [r0, #32]
}
 80011a8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80011aa:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80011ac:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 80011ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80011b2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80011b6:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80011b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80011bc:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80011be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80011c2:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 80011c6:	e7ea      	b.n	800119e <TIM_OC2_SetConfig+0x32>
 80011c8:	40010000 	.word	0x40010000

080011cc <HAL_TIM_PWM_ConfigChannel>:
{
 80011cc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80011ce:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80011d2:	2b01      	cmp	r3, #1
{
 80011d4:	4604      	mov	r4, r0
 80011d6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80011da:	d025      	beq.n	8001228 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80011dc:	2301      	movs	r3, #1
 80011de:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80011e2:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 80011e6:	2a0c      	cmp	r2, #12
 80011e8:	d818      	bhi.n	800121c <HAL_TIM_PWM_ConfigChannel+0x50>
 80011ea:	e8df f002 	tbb	[pc, r2]
 80011ee:	1707      	.short	0x1707
 80011f0:	171e1717 	.word	0x171e1717
 80011f4:	172f1717 	.word	0x172f1717
 80011f8:	1717      	.short	0x1717
 80011fa:	40          	.byte	0x40
 80011fb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80011fc:	6820      	ldr	r0, [r4, #0]
 80011fe:	f7ff fdd9 	bl	8000db4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001202:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001204:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001206:	699a      	ldr	r2, [r3, #24]
 8001208:	f042 0208 	orr.w	r2, r2, #8
 800120c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800120e:	699a      	ldr	r2, [r3, #24]
 8001210:	f022 0204 	bic.w	r2, r2, #4
 8001214:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001216:	699a      	ldr	r2, [r3, #24]
 8001218:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800121a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800121c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800121e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001220:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001224:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001228:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800122a:	6820      	ldr	r0, [r4, #0]
 800122c:	f7ff ff9e 	bl	800116c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001230:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001232:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001234:	699a      	ldr	r2, [r3, #24]
 8001236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800123a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800123c:	699a      	ldr	r2, [r3, #24]
 800123e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001244:	699a      	ldr	r2, [r3, #24]
 8001246:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800124a:	e7e6      	b.n	800121a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800124c:	6820      	ldr	r0, [r4, #0]
 800124e:	f7ff fddd 	bl	8000e0c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001252:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001254:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001256:	69da      	ldr	r2, [r3, #28]
 8001258:	f042 0208 	orr.w	r2, r2, #8
 800125c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800125e:	69da      	ldr	r2, [r3, #28]
 8001260:	f022 0204 	bic.w	r2, r2, #4
 8001264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001266:	69da      	ldr	r2, [r3, #28]
 8001268:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800126a:	61da      	str	r2, [r3, #28]
    break;
 800126c:	e7d6      	b.n	800121c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800126e:	6820      	ldr	r0, [r4, #0]
 8001270:	f7ff fdfc 	bl	8000e6c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001274:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001276:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001278:	69da      	ldr	r2, [r3, #28]
 800127a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800127e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001280:	69da      	ldr	r2, [r3, #28]
 8001282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001286:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001288:	69da      	ldr	r2, [r3, #28]
 800128a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800128e:	e7ec      	b.n	800126a <HAL_TIM_PWM_ConfigChannel+0x9e>

08001290 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001290:	6a03      	ldr	r3, [r0, #32]
{
 8001292:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001294:	2401      	movs	r4, #1
 8001296:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001298:	ea23 0304 	bic.w	r3, r3, r4
 800129c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800129e:	6a03      	ldr	r3, [r0, #32]
 80012a0:	408a      	lsls	r2, r1
 80012a2:	431a      	orrs	r2, r3
 80012a4:	6202      	str	r2, [r0, #32]
 80012a6:	bd10      	pop	{r4, pc}

080012a8 <HAL_TIM_PWM_Start>:
{
 80012a8:	b510      	push	{r4, lr}
 80012aa:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80012ac:	2201      	movs	r2, #1
 80012ae:	6800      	ldr	r0, [r0, #0]
 80012b0:	f7ff ffee 	bl	8001290 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_TIM_PWM_Start+0x30>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d003      	beq.n	80012c4 <HAL_TIM_PWM_Start+0x1c>
 80012bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d103      	bne.n	80012cc <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80012c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012ca:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	f042 0201 	orr.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
} 
 80012d4:	2000      	movs	r0, #0
 80012d6:	bd10      	pop	{r4, pc}
 80012d8:	40010000 	.word	0x40010000

080012dc <HAL_TIM_PWM_Stop>:
{ 
 80012dc:	b510      	push	{r4, lr}
 80012de:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80012e0:	2200      	movs	r2, #0
 80012e2:	6800      	ldr	r0, [r0, #0]
 80012e4:	f7ff ffd4 	bl	8001290 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80012e8:	6823      	ldr	r3, [r4, #0]
 80012ea:	4a14      	ldr	r2, [pc, #80]	; (800133c <HAL_TIM_PWM_Stop+0x60>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d003      	beq.n	80012f8 <HAL_TIM_PWM_Stop+0x1c>
 80012f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d10d      	bne.n	8001314 <HAL_TIM_PWM_Stop+0x38>
    __HAL_TIM_MOE_DISABLE(htim);
 80012f8:	6a19      	ldr	r1, [r3, #32]
 80012fa:	f241 1211 	movw	r2, #4369	; 0x1111
 80012fe:	4211      	tst	r1, r2
 8001300:	d108      	bne.n	8001314 <HAL_TIM_PWM_Stop+0x38>
 8001302:	6a19      	ldr	r1, [r3, #32]
 8001304:	f240 4244 	movw	r2, #1092	; 0x444
 8001308:	4211      	tst	r1, r2
 800130a:	bf02      	ittt	eq
 800130c:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800130e:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8001312:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8001314:	6a19      	ldr	r1, [r3, #32]
 8001316:	f241 1211 	movw	r2, #4369	; 0x1111
 800131a:	4211      	tst	r1, r2
 800131c:	d108      	bne.n	8001330 <HAL_TIM_PWM_Stop+0x54>
 800131e:	6a19      	ldr	r1, [r3, #32]
 8001320:	f240 4244 	movw	r2, #1092	; 0x444
 8001324:	4211      	tst	r1, r2
 8001326:	d103      	bne.n	8001330 <HAL_TIM_PWM_Stop+0x54>
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	f022 0201 	bic.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001330:	2301      	movs	r3, #1
 8001332:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
} 
 8001336:	2000      	movs	r0, #0
 8001338:	bd10      	pop	{r4, pc}
 800133a:	bf00      	nop
 800133c:	40010000 	.word	0x40010000

08001340 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001340:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001344:	2b01      	cmp	r3, #1
{
 8001346:	b510      	push	{r4, lr}
 8001348:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800134c:	d018      	beq.n	8001380 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800134e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001352:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001354:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001356:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001358:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800135a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800135e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	4322      	orrs	r2, r4
 8001364:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800136c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	430a      	orrs	r2, r1
 8001372:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001374:	2301      	movs	r3, #1
 8001376:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800137a:	2300      	movs	r3, #0
 800137c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001380:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001382:	bd10      	pop	{r4, pc}

08001384 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001384:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001388:	2b01      	cmp	r3, #1
 800138a:	d01f      	beq.n	80013cc <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800138c:	68cb      	ldr	r3, [r1, #12]
 800138e:	688a      	ldr	r2, [r1, #8]
 8001390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001394:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001396:	684a      	ldr	r2, [r1, #4]
 8001398:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800139c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800139e:	680a      	ldr	r2, [r1, #0]
 80013a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013a4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80013a6:	690a      	ldr	r2, [r1, #16]
 80013a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013ac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80013ae:	694a      	ldr	r2, [r1, #20]
 80013b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013b4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80013b6:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80013b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013bc:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80013be:	6802      	ldr	r2, [r0, #0]
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80013c2:	2300      	movs	r3, #0
 80013c4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80013c8:	4618      	mov	r0, r3
 80013ca:	4770      	bx	lr
  __HAL_LOCK(htim);
 80013cc:	2002      	movs	r0, #2
}
 80013ce:	4770      	bx	lr

080013d0 <HAL_TIMEx_CommutationCallback>:
 80013d0:	4770      	bx	lr

080013d2 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80013d2:	4770      	bx	lr

080013d4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80013d4:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013d6:	f000 fa25 	bl	8001824 <xTaskGetSchedulerState>
 80013da:	2801      	cmp	r0, #1
 80013dc:	d003      	beq.n	80013e6 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80013de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80013e2:	f000 b867 	b.w	80014b4 <xPortSysTickHandler>
 80013e6:	bd08      	pop	{r3, pc}

080013e8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80013e8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80013ea:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80013f4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80013f6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80013f8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80013fa:	3301      	adds	r3, #1
 80013fc:	6003      	str	r3, [r0, #0]
 80013fe:	4770      	bx	lr

08001400 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001400:	6841      	ldr	r1, [r0, #4]
 8001402:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001404:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001406:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001408:	6882      	ldr	r2, [r0, #8]
 800140a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800140c:	6859      	ldr	r1, [r3, #4]
 800140e:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001410:	bf08      	it	eq
 8001412:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001414:	2200      	movs	r2, #0
 8001416:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	3801      	subs	r0, #1
 800141c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800141e:	4770      	bx	lr

08001420 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001420:	4b07      	ldr	r3, [pc, #28]	; (8001440 <pxCurrentTCBConst2>)
 8001422:	6819      	ldr	r1, [r3, #0]
 8001424:	6808      	ldr	r0, [r1, #0]
 8001426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800142a:	f380 8809 	msr	PSP, r0
 800142e:	f3bf 8f6f 	isb	sy
 8001432:	f04f 0000 	mov.w	r0, #0
 8001436:	f380 8811 	msr	BASEPRI, r0
 800143a:	4770      	bx	lr
 800143c:	f3af 8000 	nop.w

08001440 <pxCurrentTCBConst2>:
 8001440:	20000028 	.word	0x20000028
	...

08001450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001450:	f3ef 8009 	mrs	r0, PSP
 8001454:	f3bf 8f6f 	isb	sy
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <pxCurrentTCBConst>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	f01e 0f10 	tst.w	lr, #16
 8001460:	bf08      	it	eq
 8001462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800146a:	6010      	str	r0, [r2, #0]
 800146c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001474:	f380 8811 	msr	BASEPRI, r0
 8001478:	f3bf 8f4f 	dsb	sy
 800147c:	f3bf 8f6f 	isb	sy
 8001480:	f000 f954 	bl	800172c <vTaskSwitchContext>
 8001484:	f04f 0000 	mov.w	r0, #0
 8001488:	f380 8811 	msr	BASEPRI, r0
 800148c:	bc08      	pop	{r3}
 800148e:	6819      	ldr	r1, [r3, #0]
 8001490:	6808      	ldr	r0, [r1, #0]
 8001492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001496:	f01e 0f10 	tst.w	lr, #16
 800149a:	bf08      	it	eq
 800149c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80014a0:	f380 8809 	msr	PSP, r0
 80014a4:	f3bf 8f6f 	isb	sy
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	f3af 8000 	nop.w

080014b0 <pxCurrentTCBConst>:
 80014b0:	20000028 	.word	0x20000028

080014b4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80014b4:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80014b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ba:	f383 8811 	msr	BASEPRI, r3
 80014be:	f3bf 8f6f 	isb	sy
 80014c2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80014c6:	f000 f89f 	bl	8001608 <xTaskIncrementTick>
 80014ca:	b118      	cbz	r0, 80014d4 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <xPortSysTickHandler+0x28>)
 80014ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014d2:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80014d4:	2300      	movs	r3, #0
 80014d6:	f383 8811 	msr	BASEPRI, r3
 80014da:	bd08      	pop	{r3, pc}
 80014dc:	e000ed04 	.word	0xe000ed04

080014e0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80014e0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80014e4:	2b0f      	cmp	r3, #15
 80014e6:	d90e      	bls.n	8001506 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80014e8:	4a10      	ldr	r2, [pc, #64]	; (800152c <vPortValidateInterruptPriority+0x4c>)
 80014ea:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80014ec:	4a10      	ldr	r2, [pc, #64]	; (8001530 <vPortValidateInterruptPriority+0x50>)
 80014ee:	7812      	ldrb	r2, [r2, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d908      	bls.n	8001506 <vPortValidateInterruptPriority+0x26>
	__asm volatile
 80014f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f8:	f383 8811 	msr	BASEPRI, r3
 80014fc:	f3bf 8f6f 	isb	sy
 8001500:	f3bf 8f4f 	dsb	sy
 8001504:	e7fe      	b.n	8001504 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <vPortValidateInterruptPriority+0x54>)
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <vPortValidateInterruptPriority+0x58>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001512:	4293      	cmp	r3, r2
 8001514:	d908      	bls.n	8001528 <vPortValidateInterruptPriority+0x48>
 8001516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800151a:	f383 8811 	msr	BASEPRI, r3
 800151e:	f3bf 8f6f 	isb	sy
 8001522:	f3bf 8f4f 	dsb	sy
 8001526:	e7fe      	b.n	8001526 <vPortValidateInterruptPriority+0x46>
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000e3f0 	.word	0xe000e3f0
 8001530:	20000020 	.word	0x20000020
 8001534:	e000ed0c 	.word	0xe000ed0c
 8001538:	20000024 	.word	0x20000024

0800153c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800153c:	b570      	push	{r4, r5, r6, lr}
 800153e:	460d      	mov	r5, r1
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8001540:	4604      	mov	r4, r0
 8001542:	b940      	cbnz	r0, 8001556 <xQueueGiveFromISR+0x1a>
 8001544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001548:	f383 8811 	msr	BASEPRI, r3
 800154c:	f3bf 8f6f 	isb	sy
 8001550:	f3bf 8f4f 	dsb	sy
 8001554:	e7fe      	b.n	8001554 <xQueueGiveFromISR+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001556:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001558:	b143      	cbz	r3, 800156c <xQueueGiveFromISR+0x30>
 800155a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800155e:	f383 8811 	msr	BASEPRI, r3
 8001562:	f3bf 8f6f 	isb	sy
 8001566:	f3bf 8f4f 	dsb	sy
 800156a:	e7fe      	b.n	800156a <xQueueGiveFromISR+0x2e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800156c:	6803      	ldr	r3, [r0, #0]
 800156e:	b90b      	cbnz	r3, 8001574 <xQueueGiveFromISR+0x38>
 8001570:	6843      	ldr	r3, [r0, #4]
 8001572:	bb73      	cbnz	r3, 80015d2 <xQueueGiveFromISR+0x96>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001574:	f7ff ffb4 	bl	80014e0 <vPortValidateInterruptPriority>
	__asm volatile
 8001578:	f3ef 8611 	mrs	r6, BASEPRI
 800157c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001580:	f383 8811 	msr	BASEPRI, r3
 8001584:	f3bf 8f6f 	isb	sy
 8001588:	f3bf 8f4f 	dsb	sy

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800158c:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800158e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001590:	429a      	cmp	r2, r3
 8001592:	d301      	bcc.n	8001598 <xQueueGiveFromISR+0x5c>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001594:	2000      	movs	r0, #0
 8001596:	e014      	b.n	80015c2 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8001598:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800159c:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 800159e:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80015a0:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	d110      	bne.n	80015c8 <xQueueGiveFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80015a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015a8:	b90b      	cbnz	r3, 80015ae <xQueueGiveFromISR+0x72>
			xReturn = pdPASS;
 80015aa:	2001      	movs	r0, #1
 80015ac:	e009      	b.n	80015c2 <xQueueGiveFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80015ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80015b2:	f000 f8f5 	bl	80017a0 <xTaskRemoveFromEventList>
 80015b6:	2800      	cmp	r0, #0
 80015b8:	d0f7      	beq.n	80015aa <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
 80015ba:	2d00      	cmp	r5, #0
 80015bc:	d0f5      	beq.n	80015aa <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80015be:	2001      	movs	r0, #1
 80015c0:	6028      	str	r0, [r5, #0]
	__asm volatile
 80015c2:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 80015c6:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80015c8:	3301      	adds	r3, #1
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80015d0:	e7eb      	b.n	80015aa <xQueueGiveFromISR+0x6e>
	__asm volatile
 80015d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015d6:	f383 8811 	msr	BASEPRI, r3
 80015da:	f3bf 8f6f 	isb	sy
 80015de:	f3bf 8f4f 	dsb	sy
 80015e2:	e7fe      	b.n	80015e2 <xQueueGiveFromISR+0xa6>

080015e4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <prvResetNextTaskUnblockTime+0x1c>)
 80015e6:	6813      	ldr	r3, [r2, #0]
 80015e8:	6819      	ldr	r1, [r3, #0]
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <prvResetNextTaskUnblockTime+0x20>)
 80015ec:	b919      	cbnz	r1, 80015f6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80015ee:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80015fa:	68d2      	ldr	r2, [r2, #12]
 80015fc:	6852      	ldr	r2, [r2, #4]
 80015fe:	e7f8      	b.n	80015f2 <prvResetNextTaskUnblockTime+0xe>
 8001600:	2000002c 	.word	0x2000002c
 8001604:	200000cc 	.word	0x200000cc

08001608 <xTaskIncrementTick>:
{
 8001608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800160c:	4b3c      	ldr	r3, [pc, #240]	; (8001700 <xTaskIncrementTick+0xf8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d153      	bne.n	80016bc <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8001614:	4b3b      	ldr	r3, [pc, #236]	; (8001704 <xTaskIncrementTick+0xfc>)
 8001616:	681c      	ldr	r4, [r3, #0]
 8001618:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800161a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 800161c:	b9bc      	cbnz	r4, 800164e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800161e:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <xTaskIncrementTick+0x100>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	b142      	cbz	r2, 8001638 <xTaskIncrementTick+0x30>
 8001626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800162a:	f383 8811 	msr	BASEPRI, r3
 800162e:	f3bf 8f6f 	isb	sy
 8001632:	f3bf 8f4f 	dsb	sy
 8001636:	e7fe      	b.n	8001636 <xTaskIncrementTick+0x2e>
 8001638:	4a34      	ldr	r2, [pc, #208]	; (800170c <xTaskIncrementTick+0x104>)
 800163a:	6819      	ldr	r1, [r3, #0]
 800163c:	6810      	ldr	r0, [r2, #0]
 800163e:	6018      	str	r0, [r3, #0]
 8001640:	6011      	str	r1, [r2, #0]
 8001642:	4a33      	ldr	r2, [pc, #204]	; (8001710 <xTaskIncrementTick+0x108>)
 8001644:	6813      	ldr	r3, [r2, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	f7ff ffcb 	bl	80015e4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800164e:	4d31      	ldr	r5, [pc, #196]	; (8001714 <xTaskIncrementTick+0x10c>)
 8001650:	4f31      	ldr	r7, [pc, #196]	; (8001718 <xTaskIncrementTick+0x110>)
 8001652:	682b      	ldr	r3, [r5, #0]
 8001654:	429c      	cmp	r4, r3
 8001656:	f04f 0b00 	mov.w	fp, #0
 800165a:	d33e      	bcc.n	80016da <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800165c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001708 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001660:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001728 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001664:	f8d8 2000 	ldr.w	r2, [r8]
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	bb72      	cbnz	r2, 80016ca <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	602a      	str	r2, [r5, #0]
					break;
 8001672:	e032      	b.n	80016da <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001674:	f106 0a04 	add.w	sl, r6, #4
 8001678:	4650      	mov	r0, sl
 800167a:	f7ff fec1 	bl	8001400 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800167e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001680:	b119      	cbz	r1, 800168a <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001682:	f106 0018 	add.w	r0, r6, #24
 8001686:	f7ff febb 	bl	8001400 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800168a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800168c:	f8d9 3000 	ldr.w	r3, [r9]
 8001690:	2201      	movs	r2, #1
 8001692:	fa02 f100 	lsl.w	r1, r2, r0
 8001696:	4319      	orrs	r1, r3
 8001698:	4b20      	ldr	r3, [pc, #128]	; (800171c <xTaskIncrementTick+0x114>)
 800169a:	f8c9 1000 	str.w	r1, [r9]
 800169e:	f04f 0e14 	mov.w	lr, #20
 80016a2:	4651      	mov	r1, sl
 80016a4:	fb0e 3000 	mla	r0, lr, r0, r3
 80016a8:	f7ff fe9e 	bl	80013e8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80016ac:	6838      	ldr	r0, [r7, #0]
 80016ae:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80016b0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80016b2:	4291      	cmp	r1, r2
 80016b4:	bf28      	it	cs
 80016b6:	f04f 0b01 	movcs.w	fp, #1
 80016ba:	e7d3      	b.n	8001664 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80016bc:	4a18      	ldr	r2, [pc, #96]	; (8001720 <xTaskIncrementTick+0x118>)
 80016be:	6813      	ldr	r3, [r2, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80016c4:	f04f 0b00 	mov.w	fp, #0
 80016c8:	e011      	b.n	80016ee <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80016ca:	f8d8 2000 	ldr.w	r2, [r8]
 80016ce:	68d2      	ldr	r2, [r2, #12]
 80016d0:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80016d2:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80016d4:	428c      	cmp	r4, r1
 80016d6:	d2cd      	bcs.n	8001674 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80016d8:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <xTaskIncrementTick+0x114>)
 80016de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80016e0:	2214      	movs	r2, #20
 80016e2:	434a      	muls	r2, r1
 80016e4:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80016e6:	2a02      	cmp	r2, #2
 80016e8:	bf28      	it	cs
 80016ea:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80016ee:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <xTaskIncrementTick+0x11c>)
 80016f0:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80016f2:	2a00      	cmp	r2, #0
 80016f4:	bf18      	it	ne
 80016f6:	f04f 0b01 	movne.w	fp, #1
}
 80016fa:	4658      	mov	r0, fp
 80016fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001700:	200000c4 	.word	0x200000c4
 8001704:	200000ec 	.word	0x200000ec
 8001708:	2000002c 	.word	0x2000002c
 800170c:	20000030 	.word	0x20000030
 8001710:	200000d0 	.word	0x200000d0
 8001714:	200000cc 	.word	0x200000cc
 8001718:	20000028 	.word	0x20000028
 800171c:	20000034 	.word	0x20000034
 8001720:	200000c0 	.word	0x200000c0
 8001724:	200000f0 	.word	0x200000f0
 8001728:	200000c8 	.word	0x200000c8

0800172c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <vTaskSwitchContext+0x60>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b17      	ldr	r3, [pc, #92]	; (8001790 <vTaskSwitchContext+0x64>)
{
 8001732:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001734:	b112      	cbz	r2, 800173c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001736:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800173c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <vTaskSwitchContext+0x68>)
 8001740:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001742:	fab3 f383 	clz	r3, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f1c3 031f 	rsb	r3, r3, #31
 800174c:	2214      	movs	r2, #20
 800174e:	4912      	ldr	r1, [pc, #72]	; (8001798 <vTaskSwitchContext+0x6c>)
 8001750:	435a      	muls	r2, r3
 8001752:	1888      	adds	r0, r1, r2
 8001754:	588c      	ldr	r4, [r1, r2]
 8001756:	b944      	cbnz	r4, 800176a <vTaskSwitchContext+0x3e>
	__asm volatile
 8001758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800175c:	f383 8811 	msr	BASEPRI, r3
 8001760:	f3bf 8f6f 	isb	sy
 8001764:	f3bf 8f4f 	dsb	sy
 8001768:	e7fe      	b.n	8001768 <vTaskSwitchContext+0x3c>
 800176a:	6844      	ldr	r4, [r0, #4]
 800176c:	3208      	adds	r2, #8
 800176e:	6864      	ldr	r4, [r4, #4]
 8001770:	6044      	str	r4, [r0, #4]
 8001772:	440a      	add	r2, r1
 8001774:	4294      	cmp	r4, r2
 8001776:	bf04      	itt	eq
 8001778:	6862      	ldreq	r2, [r4, #4]
 800177a:	6042      	streq	r2, [r0, #4]
 800177c:	2214      	movs	r2, #20
 800177e:	fb02 1303 	mla	r3, r2, r3, r1
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	4b05      	ldr	r3, [pc, #20]	; (800179c <vTaskSwitchContext+0x70>)
 8001788:	e7d6      	b.n	8001738 <vTaskSwitchContext+0xc>
 800178a:	bf00      	nop
 800178c:	200000c4 	.word	0x200000c4
 8001790:	200000f0 	.word	0x200000f0
 8001794:	200000c8 	.word	0x200000c8
 8001798:	20000034 	.word	0x20000034
 800179c:	20000028 	.word	0x20000028

080017a0 <xTaskRemoveFromEventList>:
{
 80017a0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80017a2:	68c3      	ldr	r3, [r0, #12]
 80017a4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80017a6:	b944      	cbnz	r4, 80017ba <xTaskRemoveFromEventList+0x1a>
 80017a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ac:	f383 8811 	msr	BASEPRI, r3
 80017b0:	f3bf 8f6f 	isb	sy
 80017b4:	f3bf 8f4f 	dsb	sy
 80017b8:	e7fe      	b.n	80017b8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80017ba:	f104 0518 	add.w	r5, r4, #24
 80017be:	4628      	mov	r0, r5
 80017c0:	f7ff fe1e 	bl	8001400 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <xTaskRemoveFromEventList+0x6c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	b9e3      	cbnz	r3, 8001804 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80017ca:	1d25      	adds	r5, r4, #4
 80017cc:	4628      	mov	r0, r5
 80017ce:	f7ff fe17 	bl	8001400 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80017d2:	490f      	ldr	r1, [pc, #60]	; (8001810 <xTaskRemoveFromEventList+0x70>)
 80017d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80017d6:	6808      	ldr	r0, [r1, #0]
 80017d8:	2301      	movs	r3, #1
 80017da:	4093      	lsls	r3, r2
 80017dc:	4303      	orrs	r3, r0
 80017de:	600b      	str	r3, [r1, #0]
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <xTaskRemoveFromEventList+0x74>)
 80017e2:	2014      	movs	r0, #20
 80017e4:	4629      	mov	r1, r5
 80017e6:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80017ea:	f7ff fdfd 	bl	80013e8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <xTaskRemoveFromEventList+0x78>)
 80017f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f6:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80017f8:	bf83      	ittte	hi
 80017fa:	4b08      	ldrhi	r3, [pc, #32]	; (800181c <xTaskRemoveFromEventList+0x7c>)
 80017fc:	2001      	movhi	r0, #1
 80017fe:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8001800:	2000      	movls	r0, #0
}
 8001802:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001804:	4629      	mov	r1, r5
 8001806:	4806      	ldr	r0, [pc, #24]	; (8001820 <xTaskRemoveFromEventList+0x80>)
 8001808:	e7ef      	b.n	80017ea <xTaskRemoveFromEventList+0x4a>
 800180a:	bf00      	nop
 800180c:	200000c4 	.word	0x200000c4
 8001810:	200000c8 	.word	0x200000c8
 8001814:	20000034 	.word	0x20000034
 8001818:	20000028 	.word	0x20000028
 800181c:	200000f0 	.word	0x200000f0
 8001820:	200000d4 	.word	0x200000d4

08001824 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <xTaskGetSchedulerState+0x18>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	b133      	cbz	r3, 8001838 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <xTaskGetSchedulerState+0x1c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001830:	bf0c      	ite	eq
 8001832:	2002      	moveq	r0, #2
 8001834:	2000      	movne	r0, #0
 8001836:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001838:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
 800183a:	4770      	bx	lr
 800183c:	200000e8 	.word	0x200000e8
 8001840:	200000c4 	.word	0x200000c4

08001844 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 8001844:	6803      	ldr	r3, [r0, #0]
 8001846:	4a11      	ldr	r2, [pc, #68]	; (800188c <HAL_TIM_PWM_MspInit+0x48>)
 8001848:	4293      	cmp	r3, r2
{
 800184a:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM1)
 800184c:	d10d      	bne.n	800186a <HAL_TIM_PWM_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */
//
  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_TIM_PWM_MspInit+0x4c>)
 8001854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001856:	f042 0201 	orr.w	r2, r2, #1
 800185a:	645a      	str	r2, [r3, #68]	; 0x44
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */
//
  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001866:	b002      	add	sp, #8
 8001868:	4770      	bx	lr
  else if(tim_pwmHandle->Instance==TIM4)
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_TIM_PWM_MspInit+0x50>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d1fa      	bne.n	8001866 <HAL_TIM_PWM_MspInit+0x22>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_TIM_PWM_MspInit+0x4c>)
 8001876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001878:	f042 0204 	orr.w	r2, r2, #4
 800187c:	641a      	str	r2, [r3, #64]	; 0x40
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	9b01      	ldr	r3, [sp, #4]
}
 8001888:	e7ed      	b.n	8001866 <HAL_TIM_PWM_MspInit+0x22>
 800188a:	bf00      	nop
 800188c:	40010000 	.word	0x40010000
 8001890:	40023800 	.word	0x40023800
 8001894:	40000800 	.word	0x40000800

08001898 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001898:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 800189a:	6803      	ldr	r3, [r0, #0]
 800189c:	4a11      	ldr	r2, [pc, #68]	; (80018e4 <HAL_TIM_MspPostInit+0x4c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d111      	bne.n	80018c6 <HAL_TIM_MspPostInit+0x2e>
//
  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DRIVE_PWM_Pin;
 80018a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a8:	2312      	movs	r3, #18
 80018aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018b4:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = DRIVE_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(DRIVE_PWM_GPIO_Port, &GPIO_InitStruct);
 80018b6:	a901      	add	r1, sp, #4
 80018b8:	480b      	ldr	r0, [pc, #44]	; (80018e8 <HAL_TIM_MspPostInit+0x50>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018ba:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DRIVE_PWM_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f7fe ff0c 	bl	80006d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */
//
  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80018c0:	b007      	add	sp, #28
 80018c2:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(timHandle->Instance==TIM4)
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <HAL_TIM_MspPostInit+0x54>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d1f9      	bne.n	80018c0 <HAL_TIM_MspPostInit+0x28>
    GPIO_InitStruct.Pin = DRIVE_PWM_Pin;
 80018cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d2:	2312      	movs	r3, #18
 80018d4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018de:	2302      	movs	r3, #2
 80018e0:	e7e9      	b.n	80018b6 <HAL_TIM_MspPostInit+0x1e>
 80018e2:	bf00      	nop
 80018e4:	40010000 	.word	0x40010000
 80018e8:	40020c00 	.word	0x40020c00
 80018ec:	40000800 	.word	0x40000800

080018f0 <TIMER_Init>:
{
 80018f0:	b530      	push	{r4, r5, lr}
  htim.Instance = PWM_TIMER;
 80018f2:	4c2c      	ldr	r4, [pc, #176]	; (80019a4 <TIMER_Init+0xb4>)
  htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f4:	4a2c      	ldr	r2, [pc, #176]	; (80019a8 <TIMER_Init+0xb8>)
 80018f6:	2500      	movs	r5, #0
{
 80018f8:	b091      	sub	sp, #68	; 0x44
  htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fa:	2307      	movs	r3, #7
  if (HAL_TIM_PWM_Init(&htim) != HAL_OK)
 80018fc:	4620      	mov	r0, r4
  htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fe:	e884 002c 	stmia.w	r4, {r2, r3, r5}
  htim.Init.Period = 0;
 8001902:	60e5      	str	r5, [r4, #12]
  htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001904:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim) != HAL_OK)
 8001906:	f7ff fc17 	bl	8001138 <HAL_TIM_PWM_Init>
 800190a:	b118      	cbz	r0, 8001914 <TIMER_Init+0x24>
    _Error_Handler(__FILE__, __LINE__);
 800190c:	211f      	movs	r1, #31
 800190e:	4827      	ldr	r0, [pc, #156]	; (80019ac <TIMER_Init+0xbc>)
 8001910:	f000 f961 	bl	8001bd6 <_Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig) != HAL_OK)
 8001914:	4669      	mov	r1, sp
 8001916:	4823      	ldr	r0, [pc, #140]	; (80019a4 <TIMER_Init+0xb4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001918:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191a:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig) != HAL_OK)
 800191c:	f7ff fd10 	bl	8001340 <HAL_TIMEx_MasterConfigSynchronization>
 8001920:	b118      	cbz	r0, 800192a <TIMER_Init+0x3a>
    _Error_Handler(__FILE__, __LINE__);
 8001922:	2126      	movs	r1, #38	; 0x26
 8001924:	4821      	ldr	r0, [pc, #132]	; (80019ac <TIMER_Init+0xbc>)
 8001926:	f000 f956 	bl	8001bd6 <_Error_Handler>
  if (htim.Instance == TIM1)
 800192a:	6821      	ldr	r1, [r4, #0]
 800192c:	4a20      	ldr	r2, [pc, #128]	; (80019b0 <TIMER_Init+0xc0>)
  if (HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800192e:	481d      	ldr	r0, [pc, #116]	; (80019a4 <TIMER_Init+0xb4>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001930:	2360      	movs	r3, #96	; 0x60
  if (htim.Instance == TIM1)
 8001932:	4291      	cmp	r1, r2
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001934:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001936:	f04f 0200 	mov.w	r2, #0
  sConfigOC.Pulse = 0;
 800193a:	f04f 0300 	mov.w	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800193e:	a902      	add	r1, sp, #8
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001940:	bf02      	ittt	eq
 8001942:	9305      	streq	r3, [sp, #20]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001944:	9307      	streq	r3, [sp, #28]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001946:	9308      	streq	r3, [sp, #32]
  sConfigOC.Pulse = 0;
 8001948:	9303      	str	r3, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800194a:	9304      	str	r3, [sp, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800194c:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800194e:	f7ff fc3d 	bl	80011cc <HAL_TIM_PWM_ConfigChannel>
 8001952:	b118      	cbz	r0, 800195c <TIMER_Init+0x6c>
    _Error_Handler(__FILE__, __LINE__);
 8001954:	2137      	movs	r1, #55	; 0x37
 8001956:	4815      	ldr	r0, [pc, #84]	; (80019ac <TIMER_Init+0xbc>)
 8001958:	f000 f93d 	bl	8001bd6 <_Error_Handler>
  if (htim.Instance == TIM1)
 800195c:	6822      	ldr	r2, [r4, #0]
 800195e:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <TIMER_Init+0xc0>)
 8001960:	429a      	cmp	r2, r3
 8001962:	d112      	bne.n	800198a <TIMER_Init+0x9a>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001964:	2300      	movs	r3, #0
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim, &sBreakDeadTimeConfig) != HAL_OK)
 800196a:	a909      	add	r1, sp, #36	; 0x24
 800196c:	480d      	ldr	r0, [pc, #52]	; (80019a4 <TIMER_Init+0xb4>)
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800196e:	9309      	str	r3, [sp, #36]	; 0x24
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001970:	930a      	str	r3, [sp, #40]	; 0x28
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001972:	930b      	str	r3, [sp, #44]	; 0x2c
	sBreakDeadTimeConfig.DeadTime = 0;
 8001974:	930c      	str	r3, [sp, #48]	; 0x30
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001976:	930d      	str	r3, [sp, #52]	; 0x34
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001978:	920e      	str	r2, [sp, #56]	; 0x38
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800197a:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim, &sBreakDeadTimeConfig) != HAL_OK)
 800197c:	f7ff fd02 	bl	8001384 <HAL_TIMEx_ConfigBreakDeadTime>
 8001980:	b118      	cbz	r0, 800198a <TIMER_Init+0x9a>
	  _Error_Handler(__FILE__, __LINE__);
 8001982:	2145      	movs	r1, #69	; 0x45
 8001984:	4809      	ldr	r0, [pc, #36]	; (80019ac <TIMER_Init+0xbc>)
 8001986:	f000 f926 	bl	8001bd6 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim);
 800198a:	4806      	ldr	r0, [pc, #24]	; (80019a4 <TIMER_Init+0xb4>)
 800198c:	f7ff ff84 	bl	8001898 <HAL_TIM_MspPostInit>
  HAL_TIM_Base_Start(&htim);
 8001990:	4804      	ldr	r0, [pc, #16]	; (80019a4 <TIMER_Init+0xb4>)
 8001992:	f7ff fa94 	bl	8000ebe <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim,TIM_CHANNEL_1);
 8001996:	2100      	movs	r1, #0
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <TIMER_Init+0xb4>)
 800199a:	f7ff fc85 	bl	80012a8 <HAL_TIM_PWM_Start>
}
 800199e:	b011      	add	sp, #68	; 0x44
 80019a0:	bd30      	pop	{r4, r5, pc}
 80019a2:	bf00      	nop
 80019a4:	200000f8 	.word	0x200000f8
 80019a8:	40000800 	.word	0x40000800
 80019ac:	08001ea8 	.word	0x08001ea8
 80019b0:	40010000 	.word	0x40010000

080019b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019b8:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ba:	4b44      	ldr	r3, [pc, #272]	; (8001acc <MX_GPIO_Init+0x118>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRIVE_EN_GPIO_Port, DRIVE_EN_Pin, GPIO_PIN_RESET);
 80019bc:	4e44      	ldr	r6, [pc, #272]	; (8001ad0 <MX_GPIO_Init+0x11c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 80019be:	4d45      	ldr	r5, [pc, #276]	; (8001ad4 <MX_GPIO_Init+0x120>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c0:	2400      	movs	r4, #0
 80019c2:	9401      	str	r4, [sp, #4]
 80019c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019ca:	631a      	str	r2, [r3, #48]	; 0x30
 80019cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ce:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80019d2:	9201      	str	r2, [sp, #4]
 80019d4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	9402      	str	r4, [sp, #8]
 80019d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019da:	f042 0201 	orr.w	r2, r2, #1
 80019de:	631a      	str	r2, [r3, #48]	; 0x30
 80019e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019e2:	f002 0201 	and.w	r2, r2, #1
 80019e6:	9202      	str	r2, [sp, #8]
 80019e8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ea:	9403      	str	r4, [sp, #12]
 80019ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ee:	f042 0210 	orr.w	r2, r2, #16
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
 80019f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f6:	f002 0210 	and.w	r2, r2, #16
 80019fa:	9203      	str	r2, [sp, #12]
 80019fc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fe:	9404      	str	r4, [sp, #16]
 8001a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a02:	f042 0208 	orr.w	r2, r2, #8
 8001a06:	631a      	str	r2, [r3, #48]	; 0x30
 8001a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a0a:	f002 0208 	and.w	r2, r2, #8
 8001a0e:	9204      	str	r2, [sp, #16]
 8001a10:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a12:	9405      	str	r4, [sp, #20]
 8001a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a16:	f042 0204 	orr.w	r2, r2, #4
 8001a1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a1e:	f002 0204 	and.w	r2, r2, #4
 8001a22:	9205      	str	r2, [sp, #20]
 8001a24:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	9406      	str	r4, [sp, #24]
 8001a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a2a:	f042 0202 	orr.w	r2, r2, #2
 8001a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(DRIVE_EN_GPIO_Port, DRIVE_EN_Pin, GPIO_PIN_RESET);
 8001a38:	4622      	mov	r2, r4
 8001a3a:	4630      	mov	r0, r6
 8001a3c:	2108      	movs	r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(DRIVE_EN_GPIO_Port, DRIVE_EN_Pin, GPIO_PIN_RESET);
 8001a40:	f7fe ff30 	bl	80008a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8001a44:	4628      	mov	r0, r5
 8001a46:	2201      	movs	r2, #1
 8001a48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a4c:	f7fe ff2a 	bl	80008a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRIVE_DIR_GPIO_Port, DRIVE_DIR_Pin, GPIO_PIN_RESET);
 8001a50:	4622      	mov	r2, r4
 8001a52:	4628      	mov	r0, r5
 8001a54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a58:	f7fe ff24 	bl	80008a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRIVE_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a5c:	f04f 0811 	mov.w	r8, #17
  GPIO_InitStruct.Pin = DRIVE_EN_Pin;
 8001a60:	2308      	movs	r3, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DRIVE_EN_GPIO_Port, &GPIO_InitStruct);
 8001a62:	a907      	add	r1, sp, #28
 8001a64:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = DRIVE_EN_Pin;
 8001a66:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2703      	movs	r7, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a6c:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(DRIVE_EN_GPIO_Port, &GPIO_InitStruct);
 8001a74:	f7fe fe30 	bl	80006d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001a78:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	a907      	add	r1, sp, #28
 8001a7e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001a80:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a82:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a86:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001a88:	f7fe fe26 	bl	80006d8 <HAL_GPIO_Init>


//  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_INT_Pin;
 8001a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a90:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 8001a92:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a94:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <MX_GPIO_Init+0x124>)
 8001a96:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 8001a98:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	f7fe fe1c 	bl	80006d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRIVE_DIR_Pin;
 8001aa0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(DRIVE_DIR_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	a907      	add	r1, sp, #28
 8001aa6:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = DRIVE_DIR_Pin;
 8001aa8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001aaa:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ab0:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(DRIVE_DIR_GPIO_Port, &GPIO_InitStruct);
 8001ab2:	f7fe fe11 	bl	80006d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab6:	a907      	add	r1, sp, #28
 8001ab8:	4808      	ldr	r0, [pc, #32]	; (8001adc <MX_GPIO_Init+0x128>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aba:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abc:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac2:	f7fe fe09 	bl	80006d8 <HAL_GPIO_Init>


//  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 2);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}
 8001ac6:	b00c      	add	sp, #48	; 0x30
 8001ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020000 	.word	0x40020000
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	10210000 	.word	0x10210000
 8001adc:	40020400 	.word	0x40020400

08001ae0 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001ae0:	b570      	push	{r4, r5, r6, lr}
 8001ae2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae4:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <SystemClock_Config+0xa8>)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	9101      	str	r1, [sp, #4]
 8001aea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001afc:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <SystemClock_Config+0xac>)
 8001afe:	9102      	str	r1, [sp, #8]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0e:	9302      	str	r3, [sp, #8]
 8001b10:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b12:	2301      	movs	r3, #1
 8001b14:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b1a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b20:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001b22:	2319      	movs	r3, #25
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b24:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001b26:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b28:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b2a:	f44f 73a8 	mov.w	r3, #336	; 0x150
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b2e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b30:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b32:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b34:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b36:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b38:	f7fe feca 	bl	80008d0 <HAL_RCC_OscConfig>
 8001b3c:	b100      	cbz	r0, 8001b40 <SystemClock_Config+0x60>
 8001b3e:	e7fe      	b.n	8001b3e <SystemClock_Config+0x5e>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b44:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b46:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b48:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b4e:	2105      	movs	r1, #5
 8001b50:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b52:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b54:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b56:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b58:	f7ff f85e 	bl	8000c18 <HAL_RCC_ClockConfig>
 8001b5c:	4604      	mov	r4, r0
 8001b5e:	b100      	cbz	r0, 8001b62 <SystemClock_Config+0x82>
 8001b60:	e7fe      	b.n	8001b60 <SystemClock_Config+0x80>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001b62:	f7ff f8f3 	bl	8000d4c <HAL_RCC_GetHCLKFreq>
 8001b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b6e:	f7fe fd91 	bl	8000694 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001b72:	4630      	mov	r0, r6
 8001b74:	f7fe fda4 	bl	80006c0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001b78:	4622      	mov	r2, r4
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f7fe fd48 	bl	8000614 <HAL_NVIC_SetPriority>
}
 8001b84:	b014      	add	sp, #80	; 0x50
 8001b86:	bd70      	pop	{r4, r5, r6, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40007000 	.word	0x40007000

08001b90 <main>:
{
 8001b90:	b508      	push	{r3, lr}
  HAL_Init();
 8001b92:	f7fe fcf5 	bl	8000580 <HAL_Init>
  SystemClock_Config();
 8001b96:	f7ff ffa3 	bl	8001ae0 <SystemClock_Config>
  MX_GPIO_Init();
 8001b9a:	f7ff ff0b 	bl	80019b4 <MX_GPIO_Init>
  TIMER_Init();
 8001b9e:	f7ff fea7 	bl	80018f0 <TIMER_Init>
	PWM_Set_Frekvens(32000);
 8001ba2:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8001ba6:	f000 f83f 	bl	8001c28 <PWM_Set_Frekvens>
		PWM_Set_Frekvens(0xFFFF);
 8001baa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001bae:	f000 f83b 	bl	8001c28 <PWM_Set_Frekvens>
		HAL_Delay(10);
 8001bb2:	200a      	movs	r0, #10
 8001bb4:	f7fe fd0c 	bl	80005d0 <HAL_Delay>
		PWM_Set_Frekvens(0x7FFF);
 8001bb8:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8001bbc:	f000 f834 	bl	8001c28 <PWM_Set_Frekvens>
		HAL_Delay(10);
 8001bc0:	200a      	movs	r0, #10
 8001bc2:	f7fe fd05 	bl	80005d0 <HAL_Delay>
 8001bc6:	e7f0      	b.n	8001baa <main+0x1a>

08001bc8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001bc8:	6803      	ldr	r3, [r0, #0]
 8001bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bce:	d101      	bne.n	8001bd4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001bd0:	f7fe bcf0 	b.w	80005b4 <HAL_IncTick>
 8001bd4:	4770      	bx	lr

08001bd6 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8001bd6:	e7fe      	b.n	8001bd6 <_Error_Handler>

08001bd8 <MOTOR_DELAY>:
		HAL_GPIO_TogglePin(DRIVE_DIR_GPIO_Port,DRIVE_DIR_Pin);
		MOTOR_DELAY();
		HAL_TIM_PWM_Start(&htim,TIM_CHANNEL_1);
	}
}
void MOTOR_DELAY(void){
 8001bd8:	f240 132d 	movw	r3, #301	; 0x12d
	for(int i=0;i<=300;i++){
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	d1fd      	bne.n	8001bdc <MOTOR_DELAY+0x4>
		asm("");
	}
}
 8001be0:	4770      	bx	lr
	...

08001be4 <MOTOR_DIR_TOGGLE>:
void MOTOR_DIR_TOGGLE(uint16_t dir){
 8001be4:	b510      	push	{r4, lr}
	if(HAL_GPIO_ReadPin(DRIVE_DIR_GPIO_Port,DRIVE_DIR_Pin)!=dir){
 8001be6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
void MOTOR_DIR_TOGGLE(uint16_t dir){
 8001bea:	4604      	mov	r4, r0
	if(HAL_GPIO_ReadPin(DRIVE_DIR_GPIO_Port,DRIVE_DIR_Pin)!=dir){
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <MOTOR_DIR_TOGGLE+0x3c>)
 8001bee:	f7fe fe53 	bl	8000898 <HAL_GPIO_ReadPin>
 8001bf2:	b280      	uxth	r0, r0
 8001bf4:	42a0      	cmp	r0, r4
 8001bf6:	d012      	beq.n	8001c1e <MOTOR_DIR_TOGGLE+0x3a>
		HAL_TIM_PWM_Stop(&htim,TIM_CHANNEL_1);
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	480a      	ldr	r0, [pc, #40]	; (8001c24 <MOTOR_DIR_TOGGLE+0x40>)
 8001bfc:	f7ff fb6e 	bl	80012dc <HAL_TIM_PWM_Stop>
		MOTOR_DELAY();
 8001c00:	f7ff ffea 	bl	8001bd8 <MOTOR_DELAY>
		HAL_GPIO_TogglePin(DRIVE_DIR_GPIO_Port,DRIVE_DIR_Pin);
 8001c04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MOTOR_DIR_TOGGLE+0x3c>)
 8001c0a:	f7fe fe50 	bl	80008ae <HAL_GPIO_TogglePin>
		MOTOR_DELAY();
 8001c0e:	f7ff ffe3 	bl	8001bd8 <MOTOR_DELAY>
		HAL_TIM_PWM_Start(&htim,TIM_CHANNEL_1);
 8001c12:	2100      	movs	r1, #0
 8001c14:	4803      	ldr	r0, [pc, #12]	; (8001c24 <MOTOR_DIR_TOGGLE+0x40>)
}
 8001c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_TIM_PWM_Start(&htim,TIM_CHANNEL_1);
 8001c1a:	f7ff bb45 	b.w	80012a8 <HAL_TIM_PWM_Start>
 8001c1e:	bd10      	pop	{r4, pc}
 8001c20:	40021000 	.word	0x40021000
 8001c24:	200000f8 	.word	0x200000f8

08001c28 <PWM_Set_Frekvens>:
void PWM_Set_Frekvens(uint16_t tempfart){
 8001c28:	b510      	push	{r4, lr}
	tempfart &= 0x7FFF;
 8001c2a:	f3c0 040e 	ubfx	r4, r0, #0, #15
	MOTOR_DIR_TOGGLE(retning);
 8001c2e:	0bc0      	lsrs	r0, r0, #15
 8001c30:	f7ff ffd8 	bl	8001be4 <MOTOR_DIR_TOGGLE>
	if(tempfart >= 1){
 8001c34:	b1c4      	cbz	r4, 8001c68 <PWM_Set_Frekvens+0x40>
		tempfart = 10500000000 / (tempfart*5826); //*128
 8001c36:	f241 62c2 	movw	r2, #5826	; 0x16c2
 8001c3a:	4362      	muls	r2, r4
 8001c3c:	17d3      	asrs	r3, r2, #31
 8001c3e:	a10f      	add	r1, pc, #60	; (adr r1, 8001c7c <PWM_Set_Frekvens+0x54>)
 8001c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c44:	f7fe fac4 	bl	80001d0 <__aeabi_ldivmod>
 8001c48:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 8001c4c:	b280      	uxth	r0, r0
 8001c4e:	4298      	cmp	r0, r3
 8001c50:	bf28      	it	cs
 8001c52:	4618      	movcs	r0, r3
 8001c54:	2837      	cmp	r0, #55	; 0x37
		PWM_TIMER->ARR = tempfart;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <PWM_Set_Frekvens+0x50>)
 8001c58:	bf38      	it	cc
 8001c5a:	2037      	movcc	r0, #55	; 0x37
 8001c5c:	62d8      	str	r0, [r3, #44]	; 0x2c
		PWM_TIMER->CCR1 = (tempfart/2);
 8001c5e:	0840      	lsrs	r0, r0, #1
 8001c60:	6358      	str	r0, [r3, #52]	; 0x34
		PWM_TIMER->CR1 = 0x81;
 8001c62:	2281      	movs	r2, #129	; 0x81
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	bd10      	pop	{r4, pc}
		PWM_TIMER->ARR = 10000;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <PWM_Set_Frekvens+0x50>)
 8001c6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c6e:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_TIMER->CCR1 = 10000;
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34
 8001c72:	e7f6      	b.n	8001c62 <PWM_Set_Frekvens+0x3a>
 8001c74:	f3af 8000 	nop.w
 8001c78:	40000800 	.word	0x40000800
 8001c7c:	71d94900 	.word	0x71d94900
 8001c80:	00000002 	.word	0x00000002

08001c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c86:	2003      	movs	r0, #3
 8001c88:	f7fe fcb2 	bl	80005f0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	4611      	mov	r1, r2
 8001c90:	f06f 000b 	mvn.w	r0, #11
 8001c94:	f7fe fcbe 	bl	8000614 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	f06f 000a 	mvn.w	r0, #10
 8001ca0:	f7fe fcb8 	bl	8000614 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	f06f 0009 	mvn.w	r0, #9
 8001cac:	f7fe fcb2 	bl	8000614 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	f06f 0004 	mvn.w	r0, #4
 8001cb8:	f7fe fcac 	bl	8000614 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	f06f 0003 	mvn.w	r0, #3
 8001cc4:	f7fe fca6 	bl	8000614 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	210f      	movs	r1, #15
 8001ccc:	f06f 0001 	mvn.w	r0, #1
 8001cd0:	f7fe fca0 	bl	8000614 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	210f      	movs	r1, #15
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001ce0:	f7fe bc98 	b.w	8000614 <HAL_NVIC_SetPriority>

08001ce4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce4:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8001ce6:	4601      	mov	r1, r0
{
 8001ce8:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8001cea:	2200      	movs	r2, #0
 8001cec:	201c      	movs	r0, #28
 8001cee:	f7fe fc91 	bl	8000614 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8001cf2:	201c      	movs	r0, #28
 8001cf4:	f7fe fcc2 	bl	800067c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001cf8:	2500      	movs	r5, #0
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <HAL_InitTick+0x6c>)
 8001cfc:	9502      	str	r5, [sp, #8]
 8001cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001d00:	4c14      	ldr	r4, [pc, #80]	; (8001d54 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d10:	a901      	add	r1, sp, #4
 8001d12:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001d14:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d16:	f7ff f82f 	bl	8000d78 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d1a:	f7ff f81d 	bl	8000d58 <HAL_RCC_GetPCLK1Freq>
  htim2.Instance = TIM2;
 8001d1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d22:	6023      	str	r3, [r4, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8001d24:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001d28:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d2a:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_InitTick+0x74>)
 8001d2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d32:	3801      	subs	r0, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8001d34:	6060      	str	r0, [r4, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001d36:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = 0;
 8001d38:	6125      	str	r5, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3a:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001d3c:	f7ff f9e2 	bl	8001104 <HAL_TIM_Base_Init>
 8001d40:	b920      	cbnz	r0, 8001d4c <HAL_InitTick+0x68>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7ff f8c8 	bl	8000ed8 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001d48:	b009      	add	sp, #36	; 0x24
 8001d4a:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	e7fb      	b.n	8001d48 <HAL_InitTick+0x64>
 8001d50:	40023800 	.word	0x40023800
 8001d54:	20000158 	.word	0x20000158
 8001d58:	000f4240 	.word	0x000f4240

08001d5c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8001d5c:	f7ff bb3a 	b.w	80013d4 <osSystickHandler>

08001d60 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d60:	4801      	ldr	r0, [pc, #4]	; (8001d68 <TIM2_IRQHandler+0x8>)
 8001d62:	f7ff b8c8 	b.w	8000ef6 <HAL_TIM_IRQHandler>
 8001d66:	bf00      	nop
 8001d68:	20000158 	.word	0x20000158

08001d6c <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8001d6c:	b507      	push	{r0, r1, r2, lr}
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001d6e:	a902      	add	r1, sp, #8
 8001d70:	2300      	movs	r3, #0
 8001d72:	f841 3d04 	str.w	r3, [r1, #-4]!
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	xSemaphoreGiveFromISR(ISRSemaHandle,&xHigherPriorityTaskWoken);
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <EXTI15_10_IRQHandler+0x34>)
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	f7ff fbdf 	bl	800153c <xQueueGiveFromISR>

  /* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001d7e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d82:	f7fe fd99 	bl	80008b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */;
  /* USER CODE END EXTI15_10_IRQn 1 */
  	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001d86:	9b01      	ldr	r3, [sp, #4]
 8001d88:	b13b      	cbz	r3, 8001d9a <EXTI15_10_IRQHandler+0x2e>
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <EXTI15_10_IRQHandler+0x38>)
 8001d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	f3bf 8f4f 	dsb	sy
 8001d96:	f3bf 8f6f 	isb	sy
}
 8001d9a:	b003      	add	sp, #12
 8001d9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001da0:	20000140 	.word	0x20000140
 8001da4:	e000ed04 	.word	0xe000ed04

08001da8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da8:	490f      	ldr	r1, [pc, #60]	; (8001de8 <SystemInit+0x40>)
 8001daa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001dae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <SystemInit+0x44>)
 8001db8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001dba:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001dbc:	f042 0201 	orr.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001dc2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001dca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dce:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001dd0:	4a07      	ldr	r2, [pc, #28]	; (8001df0 <SystemInit+0x48>)
 8001dd2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dda:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ddc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001de2:	608b      	str	r3, [r1, #8]
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00
 8001dec:	40023800 	.word	0x40023800
 8001df0:	24003010 	.word	0x24003010

08001df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001df8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001dfa:	e003      	b.n	8001e04 <LoopCopyDataInit>

08001dfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001dfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e02:	3104      	adds	r1, #4

08001e04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e04:	480b      	ldr	r0, [pc, #44]	; (8001e34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e0c:	d3f6      	bcc.n	8001dfc <CopyDataInit>
  ldr  r2, =_sbss
 8001e0e:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e10:	e002      	b.n	8001e18 <LoopFillZerobss>

08001e12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e14:	f842 3b04 	str.w	r3, [r2], #4

08001e18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e1c:	d3f9      	bcc.n	8001e12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e1e:	f7ff ffc3 	bl	8001da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e22:	f000 f811 	bl	8001e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e26:	f7ff feb3 	bl	8001b90 <main>
  bx  lr    
 8001e2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e2c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e30:	08001ee8 	.word	0x08001ee8
  ldr  r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e38:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001e3c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001e40:	20000194 	.word	0x20000194

08001e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <ADC_IRQHandler>
	...

08001e48 <__libc_init_array>:
 8001e48:	b570      	push	{r4, r5, r6, lr}
 8001e4a:	4e0d      	ldr	r6, [pc, #52]	; (8001e80 <__libc_init_array+0x38>)
 8001e4c:	4c0d      	ldr	r4, [pc, #52]	; (8001e84 <__libc_init_array+0x3c>)
 8001e4e:	1ba4      	subs	r4, r4, r6
 8001e50:	10a4      	asrs	r4, r4, #2
 8001e52:	2500      	movs	r5, #0
 8001e54:	42a5      	cmp	r5, r4
 8001e56:	d109      	bne.n	8001e6c <__libc_init_array+0x24>
 8001e58:	4e0b      	ldr	r6, [pc, #44]	; (8001e88 <__libc_init_array+0x40>)
 8001e5a:	4c0c      	ldr	r4, [pc, #48]	; (8001e8c <__libc_init_array+0x44>)
 8001e5c:	f000 f818 	bl	8001e90 <_init>
 8001e60:	1ba4      	subs	r4, r4, r6
 8001e62:	10a4      	asrs	r4, r4, #2
 8001e64:	2500      	movs	r5, #0
 8001e66:	42a5      	cmp	r5, r4
 8001e68:	d105      	bne.n	8001e76 <__libc_init_array+0x2e>
 8001e6a:	bd70      	pop	{r4, r5, r6, pc}
 8001e6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e70:	4798      	blx	r3
 8001e72:	3501      	adds	r5, #1
 8001e74:	e7ee      	b.n	8001e54 <__libc_init_array+0xc>
 8001e76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e7a:	4798      	blx	r3
 8001e7c:	3501      	adds	r5, #1
 8001e7e:	e7f2      	b.n	8001e66 <__libc_init_array+0x1e>
 8001e80:	08001ee0 	.word	0x08001ee0
 8001e84:	08001ee0 	.word	0x08001ee0
 8001e88:	08001ee0 	.word	0x08001ee0
 8001e8c:	08001ee4 	.word	0x08001ee4

08001e90 <_init>:
 8001e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e92:	bf00      	nop
 8001e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e96:	bc08      	pop	{r3}
 8001e98:	469e      	mov	lr, r3
 8001e9a:	4770      	bx	lr

08001e9c <_fini>:
 8001e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9e:	bf00      	nop
 8001ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ea2:	bc08      	pop	{r3}
 8001ea4:	469e      	mov	lr, r3
 8001ea6:	4770      	bx	lr
