
WheelMotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fac  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002134  08002134  00012134  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002160  08002160  00012160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002168  08002168  00012168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800216c  0800216c  0001216c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08002170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  8 .bss          000000ec  20000004  20000004  00020004  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000f0  200000f0  00020004  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 11 .debug_info   000173d3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002d6d  00000000  00000000  00037407  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006495  00000000  00000000  0003a174  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000980  00000000  00000000  00040610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  00040f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005795  00000000  00000000  00041ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003cbf  00000000  00000000  0004726d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004af2c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001c18  00000000  00000000  0004afa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800211c 	.word	0x0800211c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800211c 	.word	0x0800211c

080001c8 <__aeabi_ldivmod>:
 80001c8:	b97b      	cbnz	r3, 80001ea <__aeabi_ldivmod+0x22>
 80001ca:	b972      	cbnz	r2, 80001ea <__aeabi_ldivmod+0x22>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bfbe      	ittt	lt
 80001d0:	2000      	movlt	r0, #0
 80001d2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001d6:	e006      	blt.n	80001e6 <__aeabi_ldivmod+0x1e>
 80001d8:	bf08      	it	eq
 80001da:	2800      	cmpeq	r0, #0
 80001dc:	bf1c      	itt	ne
 80001de:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001e2:	f04f 30ff 	movne.w	r0, #4294967295
 80001e6:	f000 b9c5 	b.w	8000574 <__aeabi_idiv0>
 80001ea:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f2:	2900      	cmp	r1, #0
 80001f4:	db09      	blt.n	800020a <__aeabi_ldivmod+0x42>
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db1a      	blt.n	8000230 <__aeabi_ldivmod+0x68>
 80001fa:	f000 f84d 	bl	8000298 <__udivmoddi4>
 80001fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000206:	b004      	add	sp, #16
 8000208:	4770      	bx	lr
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	db1b      	blt.n	800024c <__aeabi_ldivmod+0x84>
 8000214:	f000 f840 	bl	8000298 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4240      	negs	r0, r0
 8000224:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000228:	4252      	negs	r2, r2
 800022a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800022e:	4770      	bx	lr
 8000230:	4252      	negs	r2, r2
 8000232:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000236:	f000 f82f 	bl	8000298 <__udivmoddi4>
 800023a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000242:	b004      	add	sp, #16
 8000244:	4240      	negs	r0, r0
 8000246:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024a:	4770      	bx	lr
 800024c:	4252      	negs	r2, r2
 800024e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000252:	f000 f821 	bl	8000298 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4252      	negs	r2, r2
 8000262:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000266:	4770      	bx	lr

08000268 <__aeabi_uldivmod>:
 8000268:	b953      	cbnz	r3, 8000280 <__aeabi_uldivmod+0x18>
 800026a:	b94a      	cbnz	r2, 8000280 <__aeabi_uldivmod+0x18>
 800026c:	2900      	cmp	r1, #0
 800026e:	bf08      	it	eq
 8000270:	2800      	cmpeq	r0, #0
 8000272:	bf1c      	itt	ne
 8000274:	f04f 31ff 	movne.w	r1, #4294967295
 8000278:	f04f 30ff 	movne.w	r0, #4294967295
 800027c:	f000 b97a 	b.w	8000574 <__aeabi_idiv0>
 8000280:	f1ad 0c08 	sub.w	ip, sp, #8
 8000284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000288:	f000 f806 	bl	8000298 <__udivmoddi4>
 800028c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000294:	b004      	add	sp, #16
 8000296:	4770      	bx	lr

08000298 <__udivmoddi4>:
 8000298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800029c:	468c      	mov	ip, r1
 800029e:	460d      	mov	r5, r1
 80002a0:	4604      	mov	r4, r0
 80002a2:	9e08      	ldr	r6, [sp, #32]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d151      	bne.n	800034c <__udivmoddi4+0xb4>
 80002a8:	428a      	cmp	r2, r1
 80002aa:	4617      	mov	r7, r2
 80002ac:	d96d      	bls.n	800038a <__udivmoddi4+0xf2>
 80002ae:	fab2 fe82 	clz	lr, r2
 80002b2:	f1be 0f00 	cmp.w	lr, #0
 80002b6:	d00b      	beq.n	80002d0 <__udivmoddi4+0x38>
 80002b8:	f1ce 0c20 	rsb	ip, lr, #32
 80002bc:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002c4:	fa02 f70e 	lsl.w	r7, r2, lr
 80002c8:	ea4c 0c05 	orr.w	ip, ip, r5
 80002cc:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002d4:	0c25      	lsrs	r5, r4, #16
 80002d6:	fbbc f8fa 	udiv	r8, ip, sl
 80002da:	fa1f f987 	uxth.w	r9, r7
 80002de:	fb0a cc18 	mls	ip, sl, r8, ip
 80002e2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002e6:	fb08 f309 	mul.w	r3, r8, r9
 80002ea:	42ab      	cmp	r3, r5
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x6c>
 80002ee:	19ed      	adds	r5, r5, r7
 80002f0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002f4:	f080 8123 	bcs.w	800053e <__udivmoddi4+0x2a6>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	f240 8120 	bls.w	800053e <__udivmoddi4+0x2a6>
 80002fe:	f1a8 0802 	sub.w	r8, r8, #2
 8000302:	443d      	add	r5, r7
 8000304:	1aed      	subs	r5, r5, r3
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb5 f0fa 	udiv	r0, r5, sl
 800030c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000310:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000314:	fb00 f909 	mul.w	r9, r0, r9
 8000318:	45a1      	cmp	r9, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x98>
 800031c:	19e4      	adds	r4, r4, r7
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	f080 810a 	bcs.w	800053a <__udivmoddi4+0x2a2>
 8000326:	45a1      	cmp	r9, r4
 8000328:	f240 8107 	bls.w	800053a <__udivmoddi4+0x2a2>
 800032c:	3802      	subs	r0, #2
 800032e:	443c      	add	r4, r7
 8000330:	eba4 0409 	sub.w	r4, r4, r9
 8000334:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000338:	2100      	movs	r1, #0
 800033a:	2e00      	cmp	r6, #0
 800033c:	d061      	beq.n	8000402 <__udivmoddi4+0x16a>
 800033e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000342:	2300      	movs	r3, #0
 8000344:	6034      	str	r4, [r6, #0]
 8000346:	6073      	str	r3, [r6, #4]
 8000348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034c:	428b      	cmp	r3, r1
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0xc8>
 8000350:	2e00      	cmp	r6, #0
 8000352:	d054      	beq.n	80003fe <__udivmoddi4+0x166>
 8000354:	2100      	movs	r1, #0
 8000356:	e886 0021 	stmia.w	r6, {r0, r5}
 800035a:	4608      	mov	r0, r1
 800035c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	f040 808e 	bne.w	8000486 <__udivmoddi4+0x1ee>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xdc>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80fa 	bhi.w	8000568 <__udivmoddi4+0x2d0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb65 0503 	sbc.w	r5, r5, r3
 800037a:	2001      	movs	r0, #1
 800037c:	46ac      	mov	ip, r5
 800037e:	2e00      	cmp	r6, #0
 8000380:	d03f      	beq.n	8000402 <__udivmoddi4+0x16a>
 8000382:	e886 1010 	stmia.w	r6, {r4, ip}
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	b912      	cbnz	r2, 8000392 <__udivmoddi4+0xfa>
 800038c:	2701      	movs	r7, #1
 800038e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000392:	fab7 fe87 	clz	lr, r7
 8000396:	f1be 0f00 	cmp.w	lr, #0
 800039a:	d134      	bne.n	8000406 <__udivmoddi4+0x16e>
 800039c:	1beb      	subs	r3, r5, r7
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa1f fc87 	uxth.w	ip, r7
 80003a4:	2101      	movs	r1, #1
 80003a6:	fbb3 f8f2 	udiv	r8, r3, r2
 80003aa:	0c25      	lsrs	r5, r4, #16
 80003ac:	fb02 3318 	mls	r3, r2, r8, r3
 80003b0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003b4:	fb0c f308 	mul.w	r3, ip, r8
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x134>
 80003bc:	19ed      	adds	r5, r5, r7
 80003be:	f108 30ff 	add.w	r0, r8, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x132>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	f200 80d1 	bhi.w	800056c <__udivmoddi4+0x2d4>
 80003ca:	4680      	mov	r8, r0
 80003cc:	1aed      	subs	r5, r5, r3
 80003ce:	b2a3      	uxth	r3, r4
 80003d0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003d4:	fb02 5510 	mls	r5, r2, r0, r5
 80003d8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003dc:	fb0c fc00 	mul.w	ip, ip, r0
 80003e0:	45a4      	cmp	ip, r4
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x15c>
 80003e4:	19e4      	adds	r4, r4, r7
 80003e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x15a>
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	f200 80b8 	bhi.w	8000562 <__udivmoddi4+0x2ca>
 80003f2:	4618      	mov	r0, r3
 80003f4:	eba4 040c 	sub.w	r4, r4, ip
 80003f8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fc:	e79d      	b.n	800033a <__udivmoddi4+0xa2>
 80003fe:	4631      	mov	r1, r6
 8000400:	4630      	mov	r0, r6
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	f1ce 0420 	rsb	r4, lr, #32
 800040a:	fa05 f30e 	lsl.w	r3, r5, lr
 800040e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000412:	fa20 f804 	lsr.w	r8, r0, r4
 8000416:	0c3a      	lsrs	r2, r7, #16
 8000418:	fa25 f404 	lsr.w	r4, r5, r4
 800041c:	ea48 0803 	orr.w	r8, r8, r3
 8000420:	fbb4 f1f2 	udiv	r1, r4, r2
 8000424:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000428:	fb02 4411 	mls	r4, r2, r1, r4
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000434:	fb01 f30c 	mul.w	r3, r1, ip
 8000438:	42ab      	cmp	r3, r5
 800043a:	fa00 f40e 	lsl.w	r4, r0, lr
 800043e:	d909      	bls.n	8000454 <__udivmoddi4+0x1bc>
 8000440:	19ed      	adds	r5, r5, r7
 8000442:	f101 30ff 	add.w	r0, r1, #4294967295
 8000446:	f080 808a 	bcs.w	800055e <__udivmoddi4+0x2c6>
 800044a:	42ab      	cmp	r3, r5
 800044c:	f240 8087 	bls.w	800055e <__udivmoddi4+0x2c6>
 8000450:	3902      	subs	r1, #2
 8000452:	443d      	add	r5, r7
 8000454:	1aeb      	subs	r3, r5, r3
 8000456:	fa1f f588 	uxth.w	r5, r8
 800045a:	fbb3 f0f2 	udiv	r0, r3, r2
 800045e:	fb02 3310 	mls	r3, r2, r0, r3
 8000462:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000466:	fb00 f30c 	mul.w	r3, r0, ip
 800046a:	42ab      	cmp	r3, r5
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x1e6>
 800046e:	19ed      	adds	r5, r5, r7
 8000470:	f100 38ff 	add.w	r8, r0, #4294967295
 8000474:	d26f      	bcs.n	8000556 <__udivmoddi4+0x2be>
 8000476:	42ab      	cmp	r3, r5
 8000478:	d96d      	bls.n	8000556 <__udivmoddi4+0x2be>
 800047a:	3802      	subs	r0, #2
 800047c:	443d      	add	r5, r7
 800047e:	1aeb      	subs	r3, r5, r3
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	e78f      	b.n	80003a6 <__udivmoddi4+0x10e>
 8000486:	f1c1 0720 	rsb	r7, r1, #32
 800048a:	fa22 f807 	lsr.w	r8, r2, r7
 800048e:	408b      	lsls	r3, r1
 8000490:	fa05 f401 	lsl.w	r4, r5, r1
 8000494:	ea48 0303 	orr.w	r3, r8, r3
 8000498:	fa20 fe07 	lsr.w	lr, r0, r7
 800049c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	ea4e 0e04 	orr.w	lr, lr, r4
 80004a6:	fbb5 f9fc 	udiv	r9, r5, ip
 80004aa:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004ae:	fb0c 5519 	mls	r5, ip, r9, r5
 80004b2:	fa1f f883 	uxth.w	r8, r3
 80004b6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004ba:	fb09 f408 	mul.w	r4, r9, r8
 80004be:	42ac      	cmp	r4, r5
 80004c0:	fa02 f201 	lsl.w	r2, r2, r1
 80004c4:	fa00 fa01 	lsl.w	sl, r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x244>
 80004ca:	18ed      	adds	r5, r5, r3
 80004cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d0:	d243      	bcs.n	800055a <__udivmoddi4+0x2c2>
 80004d2:	42ac      	cmp	r4, r5
 80004d4:	d941      	bls.n	800055a <__udivmoddi4+0x2c2>
 80004d6:	f1a9 0902 	sub.w	r9, r9, #2
 80004da:	441d      	add	r5, r3
 80004dc:	1b2d      	subs	r5, r5, r4
 80004de:	fa1f fe8e 	uxth.w	lr, lr
 80004e2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004e6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ea:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004ee:	fb00 f808 	mul.w	r8, r0, r8
 80004f2:	45a0      	cmp	r8, r4
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x26e>
 80004f6:	18e4      	adds	r4, r4, r3
 80004f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004fc:	d229      	bcs.n	8000552 <__udivmoddi4+0x2ba>
 80004fe:	45a0      	cmp	r8, r4
 8000500:	d927      	bls.n	8000552 <__udivmoddi4+0x2ba>
 8000502:	3802      	subs	r0, #2
 8000504:	441c      	add	r4, r3
 8000506:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050a:	eba4 0408 	sub.w	r4, r4, r8
 800050e:	fba0 8902 	umull	r8, r9, r0, r2
 8000512:	454c      	cmp	r4, r9
 8000514:	46c6      	mov	lr, r8
 8000516:	464d      	mov	r5, r9
 8000518:	d315      	bcc.n	8000546 <__udivmoddi4+0x2ae>
 800051a:	d012      	beq.n	8000542 <__udivmoddi4+0x2aa>
 800051c:	b156      	cbz	r6, 8000534 <__udivmoddi4+0x29c>
 800051e:	ebba 030e 	subs.w	r3, sl, lr
 8000522:	eb64 0405 	sbc.w	r4, r4, r5
 8000526:	fa04 f707 	lsl.w	r7, r4, r7
 800052a:	40cb      	lsrs	r3, r1
 800052c:	431f      	orrs	r7, r3
 800052e:	40cc      	lsrs	r4, r1
 8000530:	6037      	str	r7, [r6, #0]
 8000532:	6074      	str	r4, [r6, #4]
 8000534:	2100      	movs	r1, #0
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	4618      	mov	r0, r3
 800053c:	e6f8      	b.n	8000330 <__udivmoddi4+0x98>
 800053e:	4690      	mov	r8, r2
 8000540:	e6e0      	b.n	8000304 <__udivmoddi4+0x6c>
 8000542:	45c2      	cmp	sl, r8
 8000544:	d2ea      	bcs.n	800051c <__udivmoddi4+0x284>
 8000546:	ebb8 0e02 	subs.w	lr, r8, r2
 800054a:	eb69 0503 	sbc.w	r5, r9, r3
 800054e:	3801      	subs	r0, #1
 8000550:	e7e4      	b.n	800051c <__udivmoddi4+0x284>
 8000552:	4628      	mov	r0, r5
 8000554:	e7d7      	b.n	8000506 <__udivmoddi4+0x26e>
 8000556:	4640      	mov	r0, r8
 8000558:	e791      	b.n	800047e <__udivmoddi4+0x1e6>
 800055a:	4681      	mov	r9, r0
 800055c:	e7be      	b.n	80004dc <__udivmoddi4+0x244>
 800055e:	4601      	mov	r1, r0
 8000560:	e778      	b.n	8000454 <__udivmoddi4+0x1bc>
 8000562:	3802      	subs	r0, #2
 8000564:	443c      	add	r4, r7
 8000566:	e745      	b.n	80003f4 <__udivmoddi4+0x15c>
 8000568:	4608      	mov	r0, r1
 800056a:	e708      	b.n	800037e <__udivmoddi4+0xe6>
 800056c:	f1a8 0802 	sub.w	r8, r8, #2
 8000570:	443d      	add	r5, r7
 8000572:	e72b      	b.n	80003cc <__udivmoddi4+0x134>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000578:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <HAL_InitTick+0x24>)
{
 800057c:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000584:	fbb0 f0f3 	udiv	r0, r0, r3
 8000588:	f000 f884 	bl	8000694 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	4621      	mov	r1, r4
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f000 f83e 	bl	8000614 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000598:	2000      	movs	r0, #0
 800059a:	bd10      	pop	{r4, pc}
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_Init>:
{
 80005a0:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x30>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005aa:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005b2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005ba:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005bc:	2003      	movs	r0, #3
 80005be:	f000 f817 	bl	80005f0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f7ff ffd8 	bl	8000578 <HAL_InitTick>
  HAL_MspInit();
 80005c8:	f001 fc3a 	bl	8001e40 <HAL_MspInit>
}
 80005cc:	2000      	movs	r0, #0
 80005ce:	bd08      	pop	{r3, pc}
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005d4:	4a02      	ldr	r2, [pc, #8]	; (80005e0 <HAL_IncTick+0xc>)
 80005d6:	6813      	ldr	r3, [r2, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000020 	.word	0x20000020

080005e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005e4:	4b01      	ldr	r3, [pc, #4]	; (80005ec <HAL_GetTick+0x8>)
 80005e6:	6818      	ldr	r0, [r3, #0]
}
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000020 	.word	0x20000020

080005f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4a07      	ldr	r2, [pc, #28]	; (8000610 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005f2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	0c1b      	lsrs	r3, r3, #16
 80005fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000600:	0200      	lsls	r0, r0, #8
 8000602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000606:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800060a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800060c:	60d3      	str	r3, [r2, #12]
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b17      	ldr	r3, [pc, #92]	; (8000674 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000616:	b530      	push	{r4, r5, lr}
 8000618:	68dc      	ldr	r4, [r3, #12]
 800061a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800061e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000622:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000624:	2b04      	cmp	r3, #4
 8000626:	bf28      	it	cs
 8000628:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	f04f 0501 	mov.w	r5, #1
 8000630:	fa05 f303 	lsl.w	r3, r5, r3
 8000634:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000638:	bf8c      	ite	hi
 800063a:	3c03      	subhi	r4, #3
 800063c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063e:	4019      	ands	r1, r3
 8000640:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000642:	fa05 f404 	lsl.w	r4, r5, r4
 8000646:	3c01      	subs	r4, #1
 8000648:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800064a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064c:	ea42 0201 	orr.w	r2, r2, r1
 8000650:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000654:	bfaf      	iteee	ge
 8000656:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065a:	f000 000f 	andlt.w	r0, r0, #15
 800065e:	4b06      	ldrlt	r3, [pc, #24]	; (8000678 <HAL_NVIC_SetPriority+0x64>)
 8000660:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	bfa5      	ittet	ge
 8000664:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000668:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00
 8000678:	e000ed14 	.word	0xe000ed14

0800067c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800067c:	0942      	lsrs	r2, r0, #5
 800067e:	2301      	movs	r3, #1
 8000680:	f000 001f 	and.w	r0, r0, #31
 8000684:	fa03 f000 	lsl.w	r0, r3, r0
 8000688:	4b01      	ldr	r3, [pc, #4]	; (8000690 <HAL_NVIC_EnableIRQ+0x14>)
 800068a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800068e:	4770      	bx	lr
 8000690:	e000e100 	.word	0xe000e100

08000694 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000694:	3801      	subs	r0, #1
 8000696:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800069a:	d20a      	bcs.n	80006b2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069e:	4a07      	ldr	r2, [pc, #28]	; (80006bc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006a0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	21f0      	movs	r1, #240	; 0xf0
 80006a4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006a8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006aa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ac:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006b2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000e010 	.word	0xe000e010
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006c2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006c4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006c6:	bf0c      	ite	eq
 80006c8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006cc:	f022 0204 	bicne.w	r2, r2, #4
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	4770      	bx	lr
 80006d4:	e000e010 	.word	0xe000e010

080006d8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80006d8:	4770      	bx	lr

080006da <HAL_SYSTICK_IRQHandler>:
{
 80006da:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80006dc:	f7ff fffc 	bl	80006d8 <HAL_SYSTICK_Callback>
 80006e0:	bd08      	pop	{r3, pc}
	...

080006e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006e8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ea:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800089c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006f0:	4a68      	ldr	r2, [pc, #416]	; (8000894 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006f2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80008a0 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006f6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006f8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006fa:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006fe:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000700:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000704:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000708:	45b6      	cmp	lr, r6
 800070a:	f040 80ae 	bne.w	800086a <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800070e:	684c      	ldr	r4, [r1, #4]
 8000710:	f024 0710 	bic.w	r7, r4, #16
 8000714:	2f02      	cmp	r7, #2
 8000716:	d116      	bne.n	8000746 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000718:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800071c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000720:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000724:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000728:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800072c:	f04f 0c0f 	mov.w	ip, #15
 8000730:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000734:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000738:	690d      	ldr	r5, [r1, #16]
 800073a:	fa05 f50b 	lsl.w	r5, r5, fp
 800073e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000742:	f8ca 5020 	str.w	r5, [sl, #32]
 8000746:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800074a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800074c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000750:	fa05 f50a 	lsl.w	r5, r5, sl
 8000754:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000756:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800075a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800075e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000762:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000764:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000768:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800076a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800076e:	d811      	bhi.n	8000794 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000770:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000772:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000776:	68cf      	ldr	r7, [r1, #12]
 8000778:	fa07 fc0a 	lsl.w	ip, r7, sl
 800077c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000780:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000782:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000784:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000788:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800078c:	409f      	lsls	r7, r3
 800078e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000792:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000794:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000796:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000798:	688f      	ldr	r7, [r1, #8]
 800079a:	fa07 f70a 	lsl.w	r7, r7, sl
 800079e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007a0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007a2:	00e5      	lsls	r5, r4, #3
 80007a4:	d561      	bpl.n	800086a <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	f04f 0b00 	mov.w	fp, #0
 80007aa:	f8cd b00c 	str.w	fp, [sp, #12]
 80007ae:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007b2:	4d39      	ldr	r5, [pc, #228]	; (8000898 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b4:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007b8:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80007bc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80007c0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80007c4:	9703      	str	r7, [sp, #12]
 80007c6:	9f03      	ldr	r7, [sp, #12]
 80007c8:	f023 0703 	bic.w	r7, r3, #3
 80007cc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007d0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007d4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007d8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007dc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007e0:	f04f 0e0f 	mov.w	lr, #15
 80007e4:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007e8:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007ea:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007ee:	d043      	beq.n	8000878 <HAL_GPIO_Init+0x194>
 80007f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f4:	42a8      	cmp	r0, r5
 80007f6:	d041      	beq.n	800087c <HAL_GPIO_Init+0x198>
 80007f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007fc:	42a8      	cmp	r0, r5
 80007fe:	d03f      	beq.n	8000880 <HAL_GPIO_Init+0x19c>
 8000800:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000804:	42a8      	cmp	r0, r5
 8000806:	d03d      	beq.n	8000884 <HAL_GPIO_Init+0x1a0>
 8000808:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800080c:	42a8      	cmp	r0, r5
 800080e:	d03b      	beq.n	8000888 <HAL_GPIO_Init+0x1a4>
 8000810:	4548      	cmp	r0, r9
 8000812:	d03b      	beq.n	800088c <HAL_GPIO_Init+0x1a8>
 8000814:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000818:	42a8      	cmp	r0, r5
 800081a:	d039      	beq.n	8000890 <HAL_GPIO_Init+0x1ac>
 800081c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000820:	42a8      	cmp	r0, r5
 8000822:	bf14      	ite	ne
 8000824:	2508      	movne	r5, #8
 8000826:	2507      	moveq	r5, #7
 8000828:	fa05 f50c 	lsl.w	r5, r5, ip
 800082c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000830:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000832:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000834:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000836:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800083a:	bf0c      	ite	eq
 800083c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800083e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000840:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000842:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000844:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000848:	bf0c      	ite	eq
 800084a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800084c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800084e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000850:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000852:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000856:	bf0c      	ite	eq
 8000858:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800085a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800085c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800085e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000860:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000862:	bf54      	ite	pl
 8000864:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000866:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000868:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800086a:	3301      	adds	r3, #1
 800086c:	2b10      	cmp	r3, #16
 800086e:	f47f af44 	bne.w	80006fa <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000872:	b005      	add	sp, #20
 8000874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000878:	465d      	mov	r5, fp
 800087a:	e7d5      	b.n	8000828 <HAL_GPIO_Init+0x144>
 800087c:	2501      	movs	r5, #1
 800087e:	e7d3      	b.n	8000828 <HAL_GPIO_Init+0x144>
 8000880:	2502      	movs	r5, #2
 8000882:	e7d1      	b.n	8000828 <HAL_GPIO_Init+0x144>
 8000884:	2503      	movs	r5, #3
 8000886:	e7cf      	b.n	8000828 <HAL_GPIO_Init+0x144>
 8000888:	2504      	movs	r5, #4
 800088a:	e7cd      	b.n	8000828 <HAL_GPIO_Init+0x144>
 800088c:	2505      	movs	r5, #5
 800088e:	e7cb      	b.n	8000828 <HAL_GPIO_Init+0x144>
 8000890:	2506      	movs	r5, #6
 8000892:	e7c9      	b.n	8000828 <HAL_GPIO_Init+0x144>
 8000894:	40013c00 	.word	0x40013c00
 8000898:	40020000 	.word	0x40020000
 800089c:	40023800 	.word	0x40023800
 80008a0:	40021400 	.word	0x40021400

080008a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008a4:	b10a      	cbz	r2, 80008aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008a6:	6181      	str	r1, [r0, #24]
 80008a8:	4770      	bx	lr
 80008aa:	0409      	lsls	r1, r1, #16
 80008ac:	e7fb      	b.n	80008a6 <HAL_GPIO_WritePin+0x2>

080008ae <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008ae:	4770      	bx	lr

080008b0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80008b0:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80008b2:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80008b4:	6959      	ldr	r1, [r3, #20]
 80008b6:	4201      	tst	r1, r0
 80008b8:	d002      	beq.n	80008c0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80008ba:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80008bc:	f7ff fff7 	bl	80008ae <HAL_GPIO_EXTI_Callback>
 80008c0:	bd08      	pop	{r3, pc}
 80008c2:	bf00      	nop
 80008c4:	40013c00 	.word	0x40013c00

080008c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008ca:	4604      	mov	r4, r0
 80008cc:	b910      	cbnz	r0, 80008d4 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 80008ce:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80008d0:	b003      	add	sp, #12
 80008d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008d4:	6803      	ldr	r3, [r0, #0]
 80008d6:	07d8      	lsls	r0, r3, #31
 80008d8:	d43b      	bmi.n	8000952 <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008da:	6823      	ldr	r3, [r4, #0]
 80008dc:	0799      	lsls	r1, r3, #30
 80008de:	f100 8084 	bmi.w	80009ea <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008e2:	6823      	ldr	r3, [r4, #0]
 80008e4:	071e      	lsls	r6, r3, #28
 80008e6:	f100 80c6 	bmi.w	8000a76 <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008ea:	6823      	ldr	r3, [r4, #0]
 80008ec:	075d      	lsls	r5, r3, #29
 80008ee:	d52a      	bpl.n	8000946 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	4baa      	ldr	r3, [pc, #680]	; (8000ba0 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 80008f6:	4dab      	ldr	r5, [pc, #684]	; (8000ba4 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80008f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008fe:	641a      	str	r2, [r3, #64]	; 0x40
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	9301      	str	r3, [sp, #4]
 8000908:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800090a:	682b      	ldr	r3, [r5, #0]
 800090c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000910:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000912:	f7ff fe67 	bl	80005e4 <HAL_GetTick>
 8000916:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000918:	682b      	ldr	r3, [r5, #0]
 800091a:	05da      	lsls	r2, r3, #23
 800091c:	f140 80cd 	bpl.w	8000aba <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000920:	68a3      	ldr	r3, [r4, #8]
 8000922:	4d9f      	ldr	r5, [pc, #636]	; (8000ba0 <HAL_RCC_OscConfig+0x2d8>)
 8000924:	2b01      	cmp	r3, #1
 8000926:	f040 80cf 	bne.w	8000ac8 <HAL_RCC_OscConfig+0x200>
 800092a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000932:	f7ff fe57 	bl	80005e4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000936:	4d9a      	ldr	r5, [pc, #616]	; (8000ba0 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000938:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800093a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800093e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000940:	079b      	lsls	r3, r3, #30
 8000942:	f140 80e2 	bpl.w	8000b0a <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000946:	69a2      	ldr	r2, [r4, #24]
 8000948:	2a00      	cmp	r2, #0
 800094a:	f040 80e5 	bne.w	8000b18 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 800094e:	2000      	movs	r0, #0
 8000950:	e7be      	b.n	80008d0 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000952:	4b93      	ldr	r3, [pc, #588]	; (8000ba0 <HAL_RCC_OscConfig+0x2d8>)
 8000954:	689a      	ldr	r2, [r3, #8]
 8000956:	f002 020c 	and.w	r2, r2, #12
 800095a:	2a04      	cmp	r2, #4
 800095c:	d007      	beq.n	800096e <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800095e:	689a      	ldr	r2, [r3, #8]
 8000960:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000964:	2a08      	cmp	r2, #8
 8000966:	d10a      	bne.n	800097e <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	025a      	lsls	r2, r3, #9
 800096c:	d507      	bpl.n	800097e <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800096e:	4b8c      	ldr	r3, [pc, #560]	; (8000ba0 <HAL_RCC_OscConfig+0x2d8>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	039b      	lsls	r3, r3, #14
 8000974:	d5b1      	bpl.n	80008da <HAL_RCC_OscConfig+0x12>
 8000976:	6863      	ldr	r3, [r4, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1ae      	bne.n	80008da <HAL_RCC_OscConfig+0x12>
 800097c:	e7a7      	b.n	80008ce <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800097e:	6863      	ldr	r3, [r4, #4]
 8000980:	4d87      	ldr	r5, [pc, #540]	; (8000ba0 <HAL_RCC_OscConfig+0x2d8>)
 8000982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000986:	d111      	bne.n	80009ac <HAL_RCC_OscConfig+0xe4>
 8000988:	682b      	ldr	r3, [r5, #0]
 800098a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800098e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000990:	f7ff fe28 	bl	80005e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000994:	4d82      	ldr	r5, [pc, #520]	; (8000ba0 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000996:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000998:	682b      	ldr	r3, [r5, #0]
 800099a:	039f      	lsls	r7, r3, #14
 800099c:	d49d      	bmi.n	80008da <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800099e:	f7ff fe21 	bl	80005e4 <HAL_GetTick>
 80009a2:	1b80      	subs	r0, r0, r6
 80009a4:	2864      	cmp	r0, #100	; 0x64
 80009a6:	d9f7      	bls.n	8000998 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80009a8:	2003      	movs	r0, #3
 80009aa:	e791      	b.n	80008d0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009b0:	d104      	bne.n	80009bc <HAL_RCC_OscConfig+0xf4>
 80009b2:	682b      	ldr	r3, [r5, #0]
 80009b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b8:	602b      	str	r3, [r5, #0]
 80009ba:	e7e5      	b.n	8000988 <HAL_RCC_OscConfig+0xc0>
 80009bc:	682a      	ldr	r2, [r5, #0]
 80009be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009c2:	602a      	str	r2, [r5, #0]
 80009c4:	682a      	ldr	r2, [r5, #0]
 80009c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009ca:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d1df      	bne.n	8000990 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 80009d0:	f7ff fe08 	bl	80005e4 <HAL_GetTick>
 80009d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009d6:	682b      	ldr	r3, [r5, #0]
 80009d8:	0398      	lsls	r0, r3, #14
 80009da:	f57f af7e 	bpl.w	80008da <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009de:	f7ff fe01 	bl	80005e4 <HAL_GetTick>
 80009e2:	1b80      	subs	r0, r0, r6
 80009e4:	2864      	cmp	r0, #100	; 0x64
 80009e6:	d9f6      	bls.n	80009d6 <HAL_RCC_OscConfig+0x10e>
 80009e8:	e7de      	b.n	80009a8 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009ea:	4b6d      	ldr	r3, [pc, #436]	; (8000ba0 <HAL_RCC_OscConfig+0x2d8>)
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	f012 0f0c 	tst.w	r2, #12
 80009f2:	d007      	beq.n	8000a04 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009f4:	689a      	ldr	r2, [r3, #8]
 80009f6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009fa:	2a08      	cmp	r2, #8
 80009fc:	d112      	bne.n	8000a24 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	0259      	lsls	r1, r3, #9
 8000a02:	d40f      	bmi.n	8000a24 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a04:	4b66      	ldr	r3, [pc, #408]	; (8000ba0 <HAL_RCC_OscConfig+0x2d8>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	0792      	lsls	r2, r2, #30
 8000a0a:	d503      	bpl.n	8000a14 <HAL_RCC_OscConfig+0x14c>
 8000a0c:	68e2      	ldr	r2, [r4, #12]
 8000a0e:	2a01      	cmp	r2, #1
 8000a10:	f47f af5d 	bne.w	80008ce <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	6921      	ldr	r1, [r4, #16]
 8000a18:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a1c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a20:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a22:	e75e      	b.n	80008e2 <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a24:	68e2      	ldr	r2, [r4, #12]
 8000a26:	4b60      	ldr	r3, [pc, #384]	; (8000ba8 <HAL_RCC_OscConfig+0x2e0>)
 8000a28:	b1b2      	cbz	r2, 8000a58 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a2e:	f7ff fdd9 	bl	80005e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a32:	4d5b      	ldr	r5, [pc, #364]	; (8000ba0 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000a34:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a36:	682b      	ldr	r3, [r5, #0]
 8000a38:	079b      	lsls	r3, r3, #30
 8000a3a:	d507      	bpl.n	8000a4c <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a3c:	682b      	ldr	r3, [r5, #0]
 8000a3e:	6922      	ldr	r2, [r4, #16]
 8000a40:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a44:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a48:	602b      	str	r3, [r5, #0]
 8000a4a:	e74a      	b.n	80008e2 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a4c:	f7ff fdca 	bl	80005e4 <HAL_GetTick>
 8000a50:	1b80      	subs	r0, r0, r6
 8000a52:	2802      	cmp	r0, #2
 8000a54:	d9ef      	bls.n	8000a36 <HAL_RCC_OscConfig+0x16e>
 8000a56:	e7a7      	b.n	80009a8 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8000a58:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a5a:	f7ff fdc3 	bl	80005e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a5e:	4d50      	ldr	r5, [pc, #320]	; (8000ba0 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000a60:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a62:	682b      	ldr	r3, [r5, #0]
 8000a64:	079f      	lsls	r7, r3, #30
 8000a66:	f57f af3c 	bpl.w	80008e2 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a6a:	f7ff fdbb 	bl	80005e4 <HAL_GetTick>
 8000a6e:	1b80      	subs	r0, r0, r6
 8000a70:	2802      	cmp	r0, #2
 8000a72:	d9f6      	bls.n	8000a62 <HAL_RCC_OscConfig+0x19a>
 8000a74:	e798      	b.n	80009a8 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a76:	6962      	ldr	r2, [r4, #20]
 8000a78:	4b4c      	ldr	r3, [pc, #304]	; (8000bac <HAL_RCC_OscConfig+0x2e4>)
 8000a7a:	b17a      	cbz	r2, 8000a9c <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a80:	f7ff fdb0 	bl	80005e4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a84:	4d46      	ldr	r5, [pc, #280]	; (8000ba0 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000a86:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a88:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a8a:	0798      	lsls	r0, r3, #30
 8000a8c:	f53f af2d 	bmi.w	80008ea <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a90:	f7ff fda8 	bl	80005e4 <HAL_GetTick>
 8000a94:	1b80      	subs	r0, r0, r6
 8000a96:	2802      	cmp	r0, #2
 8000a98:	d9f6      	bls.n	8000a88 <HAL_RCC_OscConfig+0x1c0>
 8000a9a:	e785      	b.n	80009a8 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 8000a9c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a9e:	f7ff fda1 	bl	80005e4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000aa2:	4d3f      	ldr	r5, [pc, #252]	; (8000ba0 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000aa4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000aa6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000aa8:	0799      	lsls	r1, r3, #30
 8000aaa:	f57f af1e 	bpl.w	80008ea <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aae:	f7ff fd99 	bl	80005e4 <HAL_GetTick>
 8000ab2:	1b80      	subs	r0, r0, r6
 8000ab4:	2802      	cmp	r0, #2
 8000ab6:	d9f6      	bls.n	8000aa6 <HAL_RCC_OscConfig+0x1de>
 8000ab8:	e776      	b.n	80009a8 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000aba:	f7ff fd93 	bl	80005e4 <HAL_GetTick>
 8000abe:	1b80      	subs	r0, r0, r6
 8000ac0:	2802      	cmp	r0, #2
 8000ac2:	f67f af29 	bls.w	8000918 <HAL_RCC_OscConfig+0x50>
 8000ac6:	e76f      	b.n	80009a8 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ac8:	2b05      	cmp	r3, #5
 8000aca:	d104      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x20e>
 8000acc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	672b      	str	r3, [r5, #112]	; 0x70
 8000ad4:	e729      	b.n	800092a <HAL_RCC_OscConfig+0x62>
 8000ad6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ad8:	f022 0201 	bic.w	r2, r2, #1
 8000adc:	672a      	str	r2, [r5, #112]	; 0x70
 8000ade:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ae0:	f022 0204 	bic.w	r2, r2, #4
 8000ae4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f47f af23 	bne.w	8000932 <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8000aec:	f7ff fd7a 	bl	80005e4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000af0:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000af4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000af6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000af8:	0798      	lsls	r0, r3, #30
 8000afa:	f57f af24 	bpl.w	8000946 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000afe:	f7ff fd71 	bl	80005e4 <HAL_GetTick>
 8000b02:	1b80      	subs	r0, r0, r6
 8000b04:	42b8      	cmp	r0, r7
 8000b06:	d9f6      	bls.n	8000af6 <HAL_RCC_OscConfig+0x22e>
 8000b08:	e74e      	b.n	80009a8 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b0a:	f7ff fd6b 	bl	80005e4 <HAL_GetTick>
 8000b0e:	1b80      	subs	r0, r0, r6
 8000b10:	42b8      	cmp	r0, r7
 8000b12:	f67f af14 	bls.w	800093e <HAL_RCC_OscConfig+0x76>
 8000b16:	e747      	b.n	80009a8 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b18:	4d21      	ldr	r5, [pc, #132]	; (8000ba0 <HAL_RCC_OscConfig+0x2d8>)
 8000b1a:	68ab      	ldr	r3, [r5, #8]
 8000b1c:	f003 030c 	and.w	r3, r3, #12
 8000b20:	2b08      	cmp	r3, #8
 8000b22:	f43f aed4 	beq.w	80008ce <HAL_RCC_OscConfig+0x6>
 8000b26:	4e22      	ldr	r6, [pc, #136]	; (8000bb0 <HAL_RCC_OscConfig+0x2e8>)
 8000b28:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b2a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b2c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b2e:	d12a      	bne.n	8000b86 <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8000b30:	f7ff fd58 	bl	80005e4 <HAL_GetTick>
 8000b34:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b36:	682b      	ldr	r3, [r5, #0]
 8000b38:	0199      	lsls	r1, r3, #6
 8000b3a:	d41e      	bmi.n	8000b7a <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b3c:	6a22      	ldr	r2, [r4, #32]
 8000b3e:	69e3      	ldr	r3, [r4, #28]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b44:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b4a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b50:	4c13      	ldr	r4, [pc, #76]	; (8000ba0 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b52:	0852      	lsrs	r2, r2, #1
 8000b54:	3a01      	subs	r2, #1
 8000b56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b5a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b60:	f7ff fd40 	bl	80005e4 <HAL_GetTick>
 8000b64:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b66:	6823      	ldr	r3, [r4, #0]
 8000b68:	019a      	lsls	r2, r3, #6
 8000b6a:	f53f aef0 	bmi.w	800094e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b6e:	f7ff fd39 	bl	80005e4 <HAL_GetTick>
 8000b72:	1b40      	subs	r0, r0, r5
 8000b74:	2802      	cmp	r0, #2
 8000b76:	d9f6      	bls.n	8000b66 <HAL_RCC_OscConfig+0x29e>
 8000b78:	e716      	b.n	80009a8 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b7a:	f7ff fd33 	bl	80005e4 <HAL_GetTick>
 8000b7e:	1bc0      	subs	r0, r0, r7
 8000b80:	2802      	cmp	r0, #2
 8000b82:	d9d8      	bls.n	8000b36 <HAL_RCC_OscConfig+0x26e>
 8000b84:	e710      	b.n	80009a8 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8000b86:	f7ff fd2d 	bl	80005e4 <HAL_GetTick>
 8000b8a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b8c:	682b      	ldr	r3, [r5, #0]
 8000b8e:	019b      	lsls	r3, r3, #6
 8000b90:	f57f aedd 	bpl.w	800094e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b94:	f7ff fd26 	bl	80005e4 <HAL_GetTick>
 8000b98:	1b00      	subs	r0, r0, r4
 8000b9a:	2802      	cmp	r0, #2
 8000b9c:	d9f6      	bls.n	8000b8c <HAL_RCC_OscConfig+0x2c4>
 8000b9e:	e703      	b.n	80009a8 <HAL_RCC_OscConfig+0xe0>
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40007000 	.word	0x40007000
 8000ba8:	42470000 	.word	0x42470000
 8000bac:	42470e80 	.word	0x42470e80
 8000bb0:	42470060 	.word	0x42470060

08000bb4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bb4:	4913      	ldr	r1, [pc, #76]	; (8000c04 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bb6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bb8:	688b      	ldr	r3, [r1, #8]
 8000bba:	f003 030c 	and.w	r3, r3, #12
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	d003      	beq.n	8000bca <HAL_RCC_GetSysClockFreq+0x16>
 8000bc2:	2b08      	cmp	r3, #8
 8000bc4:	d003      	beq.n	8000bce <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bc6:	4810      	ldr	r0, [pc, #64]	; (8000c08 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000bc8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000bca:	4810      	ldr	r0, [pc, #64]	; (8000c0c <HAL_RCC_GetSysClockFreq+0x58>)
 8000bcc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bce:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bd0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bd2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bd4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bd8:	bf14      	ite	ne
 8000bda:	480c      	ldrne	r0, [pc, #48]	; (8000c0c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bdc:	480a      	ldreq	r0, [pc, #40]	; (8000c08 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bde:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000be2:	bf18      	it	ne
 8000be4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000be6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bea:	fba1 0100 	umull	r0, r1, r1, r0
 8000bee:	f7ff fb3b 	bl	8000268 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <HAL_RCC_GetSysClockFreq+0x50>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000bfe:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c02:	bd08      	pop	{r3, pc}
 8000c04:	40023800 	.word	0x40023800
 8000c08:	00f42400 	.word	0x00f42400
 8000c0c:	017d7840 	.word	0x017d7840

08000c10 <HAL_RCC_ClockConfig>:
{
 8000c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c14:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c16:	4604      	mov	r4, r0
 8000c18:	b910      	cbnz	r0, 8000c20 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c20:	4b44      	ldr	r3, [pc, #272]	; (8000d34 <HAL_RCC_ClockConfig+0x124>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	f002 020f 	and.w	r2, r2, #15
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	d328      	bcc.n	8000c7e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c2c:	6821      	ldr	r1, [r4, #0]
 8000c2e:	078f      	lsls	r7, r1, #30
 8000c30:	d42d      	bmi.n	8000c8e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c32:	07c8      	lsls	r0, r1, #31
 8000c34:	d440      	bmi.n	8000cb8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c36:	4b3f      	ldr	r3, [pc, #252]	; (8000d34 <HAL_RCC_ClockConfig+0x124>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	f002 020f 	and.w	r2, r2, #15
 8000c3e:	4295      	cmp	r5, r2
 8000c40:	d366      	bcc.n	8000d10 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c42:	6822      	ldr	r2, [r4, #0]
 8000c44:	0751      	lsls	r1, r2, #29
 8000c46:	d46c      	bmi.n	8000d22 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c48:	0713      	lsls	r3, r2, #28
 8000c4a:	d507      	bpl.n	8000c5c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c4c:	4a3a      	ldr	r2, [pc, #232]	; (8000d38 <HAL_RCC_ClockConfig+0x128>)
 8000c4e:	6921      	ldr	r1, [r4, #16]
 8000c50:	6893      	ldr	r3, [r2, #8]
 8000c52:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c56:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c5a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c5c:	f7ff ffaa 	bl	8000bb4 <HAL_RCC_GetSysClockFreq>
 8000c60:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <HAL_RCC_ClockConfig+0x128>)
 8000c62:	4a36      	ldr	r2, [pc, #216]	; (8000d3c <HAL_RCC_ClockConfig+0x12c>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c6a:	5cd3      	ldrb	r3, [r2, r3]
 8000c6c:	40d8      	lsrs	r0, r3
 8000c6e:	4b34      	ldr	r3, [pc, #208]	; (8000d40 <HAL_RCC_ClockConfig+0x130>)
 8000c70:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff fc80 	bl	8000578 <HAL_InitTick>
  return HAL_OK;
 8000c78:	2000      	movs	r0, #0
 8000c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c7e:	b2ca      	uxtb	r2, r1
 8000c80:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f003 030f 	and.w	r3, r3, #15
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d1c6      	bne.n	8000c1a <HAL_RCC_ClockConfig+0xa>
 8000c8c:	e7ce      	b.n	8000c2c <HAL_RCC_ClockConfig+0x1c>
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c90:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c94:	bf1e      	ittt	ne
 8000c96:	689a      	ldrne	r2, [r3, #8]
 8000c98:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c9c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c9e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ca0:	bf42      	ittt	mi
 8000ca2:	689a      	ldrmi	r2, [r3, #8]
 8000ca4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000ca8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000caa:	689a      	ldr	r2, [r3, #8]
 8000cac:	68a0      	ldr	r0, [r4, #8]
 8000cae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cb2:	4302      	orrs	r2, r0
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	e7bc      	b.n	8000c32 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cb8:	6862      	ldr	r2, [r4, #4]
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <HAL_RCC_ClockConfig+0x128>)
 8000cbc:	2a01      	cmp	r2, #1
 8000cbe:	d11d      	bne.n	8000cfc <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc6:	d0a8      	beq.n	8000c1a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cc8:	4e1b      	ldr	r6, [pc, #108]	; (8000d38 <HAL_RCC_ClockConfig+0x128>)
 8000cca:	68b3      	ldr	r3, [r6, #8]
 8000ccc:	f023 0303 	bic.w	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000cd4:	f7ff fc86 	bl	80005e4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cd8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cdc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cde:	68b3      	ldr	r3, [r6, #8]
 8000ce0:	6862      	ldr	r2, [r4, #4]
 8000ce2:	f003 030c 	and.w	r3, r3, #12
 8000ce6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000cea:	d0a4      	beq.n	8000c36 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cec:	f7ff fc7a 	bl	80005e4 <HAL_GetTick>
 8000cf0:	1bc0      	subs	r0, r0, r7
 8000cf2:	4540      	cmp	r0, r8
 8000cf4:	d9f3      	bls.n	8000cde <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000cf6:	2003      	movs	r0, #3
}
 8000cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cfc:	1e91      	subs	r1, r2, #2
 8000cfe:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d00:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d02:	d802      	bhi.n	8000d0a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d04:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d08:	e7dd      	b.n	8000cc6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d0a:	f013 0f02 	tst.w	r3, #2
 8000d0e:	e7da      	b.n	8000cc6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d10:	b2ea      	uxtb	r2, r5
 8000d12:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	429d      	cmp	r5, r3
 8000d1c:	f47f af7d 	bne.w	8000c1a <HAL_RCC_ClockConfig+0xa>
 8000d20:	e78f      	b.n	8000c42 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d22:	4905      	ldr	r1, [pc, #20]	; (8000d38 <HAL_RCC_ClockConfig+0x128>)
 8000d24:	68e0      	ldr	r0, [r4, #12]
 8000d26:	688b      	ldr	r3, [r1, #8]
 8000d28:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d2c:	4303      	orrs	r3, r0
 8000d2e:	608b      	str	r3, [r1, #8]
 8000d30:	e78a      	b.n	8000c48 <HAL_RCC_ClockConfig+0x38>
 8000d32:	bf00      	nop
 8000d34:	40023c00 	.word	0x40023c00
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	08002141 	.word	0x08002141
 8000d40:	20000000 	.word	0x20000000

08000d44 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000d44:	4b01      	ldr	r3, [pc, #4]	; (8000d4c <HAL_RCC_GetHCLKFreq+0x8>)
 8000d46:	6818      	ldr	r0, [r3, #0]
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000000 	.word	0x20000000

08000d50 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d54:	9e06      	ldr	r6, [sp, #24]
 8000d56:	4604      	mov	r4, r0
 8000d58:	4688      	mov	r8, r1
 8000d5a:	4617      	mov	r7, r2
 8000d5c:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000d5e:	6822      	ldr	r2, [r4, #0]
 8000d60:	6893      	ldr	r3, [r2, #8]
 8000d62:	ea38 0303 	bics.w	r3, r8, r3
 8000d66:	bf0c      	ite	eq
 8000d68:	2301      	moveq	r3, #1
 8000d6a:	2300      	movne	r3, #0
 8000d6c:	429f      	cmp	r7, r3
 8000d6e:	d102      	bne.n	8000d76 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000d70:	2000      	movs	r0, #0
}
 8000d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000d76:	1c6b      	adds	r3, r5, #1
 8000d78:	d0f2      	beq.n	8000d60 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000d7a:	bb55      	cbnz	r5, 8000dd2 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000d84:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000d86:	6862      	ldr	r2, [r4, #4]
 8000d88:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000d8c:	d10a      	bne.n	8000da4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8000d8e:	68a2      	ldr	r2, [r4, #8]
 8000d90:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000d94:	d002      	beq.n	8000d9c <SPI_WaitFlagStateUntilTimeout+0x4c>
 8000d96:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000d9a:	d103      	bne.n	8000da4 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000da2:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000da4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000da6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000daa:	d109      	bne.n	8000dc0 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000db2:	0412      	lsls	r2, r2, #16
 8000db4:	0c12      	lsrs	r2, r2, #16
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000dbe:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000dcc:	2003      	movs	r0, #3
 8000dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000dd2:	f7ff fc07 	bl	80005e4 <HAL_GetTick>
 8000dd6:	1b80      	subs	r0, r0, r6
 8000dd8:	4285      	cmp	r5, r0
 8000dda:	d8c0      	bhi.n	8000d5e <SPI_WaitFlagStateUntilTimeout+0xe>
 8000ddc:	e7ce      	b.n	8000d7c <SPI_WaitFlagStateUntilTimeout+0x2c>

08000dde <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000dde:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000de0:	460b      	mov	r3, r1
 8000de2:	9200      	str	r2, [sp, #0]
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	2200      	movs	r2, #0
{
 8000de8:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000dea:	f7ff ffb1 	bl	8000d50 <SPI_WaitFlagStateUntilTimeout>
 8000dee:	b120      	cbz	r0, 8000dfa <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000df0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000df2:	f043 0320 	orr.w	r3, r3, #32
 8000df6:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8000df8:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8000dfa:	b002      	add	sp, #8
 8000dfc:	bd10      	pop	{r4, pc}

08000dfe <HAL_SPI_Init>:
{
 8000dfe:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8000e00:	4604      	mov	r4, r0
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d036      	beq.n	8000e74 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8000e0a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000e0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e12:	b91b      	cbnz	r3, 8000e1c <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000e14:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000e18:	f000 ffea 	bl	8001df0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000e1c:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e1e:	68a0      	ldr	r0, [r4, #8]
 8000e20:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e22:	2302      	movs	r3, #2
 8000e24:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000e28:	680b      	ldr	r3, [r1, #0]
 8000e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e2e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e30:	6863      	ldr	r3, [r4, #4]
 8000e32:	4303      	orrs	r3, r0
 8000e34:	68e0      	ldr	r0, [r4, #12]
 8000e36:	4303      	orrs	r3, r0
 8000e38:	6920      	ldr	r0, [r4, #16]
 8000e3a:	4303      	orrs	r3, r0
 8000e3c:	6960      	ldr	r0, [r4, #20]
 8000e3e:	4303      	orrs	r3, r0
 8000e40:	69e0      	ldr	r0, [r4, #28]
 8000e42:	4303      	orrs	r3, r0
 8000e44:	6a20      	ldr	r0, [r4, #32]
 8000e46:	4303      	orrs	r3, r0
 8000e48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000e4a:	4303      	orrs	r3, r0
 8000e4c:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000e50:	4303      	orrs	r3, r0
 8000e52:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000e54:	0c12      	lsrs	r2, r2, #16
 8000e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e58:	f002 0204 	and.w	r2, r2, #4
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000e60:	69cb      	ldr	r3, [r1, #28]
 8000e62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e66:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e68:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000e6a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e6c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000e6e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000e72:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e74:	2001      	movs	r0, #1
}
 8000e76:	bd10      	pop	{r4, pc}

08000e78 <HAL_SPI_Transmit>:
{
 8000e78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000e7c:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000e7e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000e82:	2b01      	cmp	r3, #1
{
 8000e84:	4604      	mov	r4, r0
 8000e86:	460d      	mov	r5, r1
 8000e88:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000e8a:	f000 809c 	beq.w	8000fc6 <HAL_SPI_Transmit+0x14e>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000e94:	f7ff fba6 	bl	80005e4 <HAL_GetTick>
 8000e98:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000e9a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000e9e:	b2c0      	uxtb	r0, r0
 8000ea0:	2801      	cmp	r0, #1
 8000ea2:	f040 808e 	bne.w	8000fc2 <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0))
 8000ea6:	2d00      	cmp	r5, #0
 8000ea8:	d04e      	beq.n	8000f48 <HAL_SPI_Transmit+0xd0>
 8000eaa:	f1b8 0f00 	cmp.w	r8, #0
 8000eae:	d04b      	beq.n	8000f48 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000eba:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000ebc:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000ec0:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000ec2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000ec4:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000ec6:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ec8:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000eca:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ed0:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8000ed2:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000ed6:	bf02      	ittt	eq
 8000ed8:	681a      	ldreq	r2, [r3, #0]
 8000eda:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8000ede:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000ee4:	bf5e      	ittt	pl
 8000ee6:	681a      	ldrpl	r2, [r3, #0]
 8000ee8:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000eec:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000eee:	68e2      	ldr	r2, [r4, #12]
 8000ef0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000ef4:	6862      	ldr	r2, [r4, #4]
 8000ef6:	d138      	bne.n	8000f6a <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000ef8:	b11a      	cbz	r2, 8000f02 <HAL_SPI_Transmit+0x8a>
 8000efa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000efc:	b292      	uxth	r2, r2
 8000efe:	2a01      	cmp	r2, #1
 8000f00:	d106      	bne.n	8000f10 <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000f02:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000f06:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8000f08:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000f10:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	b993      	cbnz	r3, 8000f3c <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000f16:	9700      	str	r7, [sp, #0]
 8000f18:	4633      	mov	r3, r6
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f7ff ff16 	bl	8000d50 <SPI_WaitFlagStateUntilTimeout>
 8000f24:	b978      	cbnz	r0, 8000f46 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000f26:	463a      	mov	r2, r7
 8000f28:	4631      	mov	r1, r6
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	f7ff ff57 	bl	8000dde <SPI_CheckFlag_BSY>
 8000f30:	2800      	cmp	r0, #0
 8000f32:	d038      	beq.n	8000fa6 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000f34:	2320      	movs	r3, #32
 8000f36:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000f38:	2001      	movs	r0, #1
    goto error;
 8000f3a:	e005      	b.n	8000f48 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	0790      	lsls	r0, r2, #30
 8000f42:	d4de      	bmi.n	8000f02 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000f44:	b94e      	cbnz	r6, 8000f5a <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8000f46:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000f54:	b004      	add	sp, #16
 8000f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000f5a:	1c71      	adds	r1, r6, #1
 8000f5c:	d0d8      	beq.n	8000f10 <HAL_SPI_Transmit+0x98>
 8000f5e:	f7ff fb41 	bl	80005e4 <HAL_GetTick>
 8000f62:	1bc0      	subs	r0, r0, r7
 8000f64:	4286      	cmp	r6, r0
 8000f66:	d8d3      	bhi.n	8000f10 <HAL_SPI_Transmit+0x98>
 8000f68:	e7ed      	b.n	8000f46 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8000f6a:	b11a      	cbz	r2, 8000f74 <HAL_SPI_Transmit+0xfc>
 8000f6c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000f6e:	b292      	uxth	r2, r2
 8000f70:	2a01      	cmp	r2, #1
 8000f72:	d106      	bne.n	8000f82 <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000f74:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000f78:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000f7a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000f82:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0c5      	beq.n	8000f16 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	0792      	lsls	r2, r2, #30
 8000f90:	d4f0      	bmi.n	8000f74 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000f92:	2e00      	cmp	r6, #0
 8000f94:	d0d7      	beq.n	8000f46 <HAL_SPI_Transmit+0xce>
 8000f96:	1c73      	adds	r3, r6, #1
 8000f98:	d0f3      	beq.n	8000f82 <HAL_SPI_Transmit+0x10a>
 8000f9a:	f7ff fb23 	bl	80005e4 <HAL_GetTick>
 8000f9e:	1bc0      	subs	r0, r0, r7
 8000fa0:	4286      	cmp	r6, r0
 8000fa2:	d8ee      	bhi.n	8000f82 <HAL_SPI_Transmit+0x10a>
 8000fa4:	e7cf      	b.n	8000f46 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000fa6:	68a3      	ldr	r3, [r4, #8]
 8000fa8:	b933      	cbnz	r3, 8000fb8 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000faa:	9303      	str	r3, [sp, #12]
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	68da      	ldr	r2, [r3, #12]
 8000fb0:	9203      	str	r2, [sp, #12]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	9303      	str	r3, [sp, #12]
 8000fb6:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000fb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000fba:	3000      	adds	r0, #0
 8000fbc:	bf18      	it	ne
 8000fbe:	2001      	movne	r0, #1
 8000fc0:	e7c2      	b.n	8000f48 <HAL_SPI_Transmit+0xd0>
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	e7c0      	b.n	8000f48 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8000fc6:	2002      	movs	r0, #2
 8000fc8:	e7c4      	b.n	8000f54 <HAL_SPI_Transmit+0xdc>

08000fca <HAL_SPI_TransmitReceive>:
{
 8000fca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fce:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8000fd0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000fd4:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8000fd6:	2b01      	cmp	r3, #1
{
 8000fd8:	4604      	mov	r4, r0
 8000fda:	460d      	mov	r5, r1
 8000fdc:	4616      	mov	r6, r2
 8000fde:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8000fe0:	f000 80ed 	beq.w	80011be <HAL_SPI_TransmitReceive+0x1f4>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000fea:	f7ff fafb 	bl	80005e4 <HAL_GetTick>
  tmp  = hspi->State;
 8000fee:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8000ff2:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8000ff4:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000ff6:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8000ff8:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000ffa:	d00a      	beq.n	8001012 <HAL_SPI_TransmitReceive+0x48>
 8000ffc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001000:	f040 80db 	bne.w	80011ba <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001004:	68a2      	ldr	r2, [r4, #8]
 8001006:	2a00      	cmp	r2, #0
 8001008:	f040 80d7 	bne.w	80011ba <HAL_SPI_TransmitReceive+0x1f0>
 800100c:	2b04      	cmp	r3, #4
 800100e:	f040 80d4 	bne.w	80011ba <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8001012:	2d00      	cmp	r5, #0
 8001014:	d04e      	beq.n	80010b4 <HAL_SPI_TransmitReceive+0xea>
 8001016:	2e00      	cmp	r6, #0
 8001018:	d04c      	beq.n	80010b4 <HAL_SPI_TransmitReceive+0xea>
 800101a:	f1b9 0f00 	cmp.w	r9, #0
 800101e:	d049      	beq.n	80010b4 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8001020:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001024:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8001026:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001028:	bf04      	itt	eq
 800102a:	2305      	moveq	r3, #5
 800102c:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001030:	2300      	movs	r3, #0
 8001032:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001034:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001036:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001038:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800103a:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800103e:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001042:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001044:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001048:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800104a:	bf58      	it	pl
 800104c:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800104e:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001050:	bf58      	it	pl
 8001052:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001056:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800105a:	bf58      	it	pl
 800105c:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800105e:	68e2      	ldr	r2, [r4, #12]
 8001060:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001064:	d15d      	bne.n	8001122 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001066:	b119      	cbz	r1, 8001070 <HAL_SPI_TransmitReceive+0xa6>
 8001068:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800106a:	b292      	uxth	r2, r2
 800106c:	2a01      	cmp	r2, #1
 800106e:	d106      	bne.n	800107e <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001070:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001074:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001076:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001078:	3b01      	subs	r3, #1
 800107a:	b29b      	uxth	r3, r3
 800107c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800107e:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001082:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001084:	b29b      	uxth	r3, r3
 8001086:	b9bb      	cbnz	r3, 80010b8 <HAL_SPI_TransmitReceive+0xee>
 8001088:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800108a:	b29b      	uxth	r3, r3
 800108c:	b9a3      	cbnz	r3, 80010b8 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800108e:	f8cd 8000 	str.w	r8, [sp]
 8001092:	463b      	mov	r3, r7
 8001094:	2201      	movs	r2, #1
 8001096:	2102      	movs	r1, #2
 8001098:	4620      	mov	r0, r4
 800109a:	f7ff fe59 	bl	8000d50 <SPI_WaitFlagStateUntilTimeout>
 800109e:	2800      	cmp	r0, #0
 80010a0:	d135      	bne.n	800110e <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80010a2:	4642      	mov	r2, r8
 80010a4:	4639      	mov	r1, r7
 80010a6:	4620      	mov	r0, r4
 80010a8:	f7ff fe99 	bl	8000dde <SPI_CheckFlag_BSY>
 80010ac:	2800      	cmp	r0, #0
 80010ae:	d079      	beq.n	80011a4 <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80010b0:	2320      	movs	r3, #32
 80010b2:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80010b4:	2001      	movs	r0, #1
 80010b6:	e02b      	b.n	8001110 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80010b8:	f1b9 0f00 	cmp.w	r9, #0
 80010bc:	d00f      	beq.n	80010de <HAL_SPI_TransmitReceive+0x114>
 80010be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	b163      	cbz	r3, 80010de <HAL_SPI_TransmitReceive+0x114>
 80010c4:	6823      	ldr	r3, [r4, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	0791      	lsls	r1, r2, #30
 80010ca:	d508      	bpl.n	80010de <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80010cc:	f835 2b02 	ldrh.w	r2, [r5], #2
 80010d0:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80010d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010d4:	3b01      	subs	r3, #1
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80010da:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80010de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	b163      	cbz	r3, 80010fe <HAL_SPI_TransmitReceive+0x134>
 80010e4:	6823      	ldr	r3, [r4, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	07d2      	lsls	r2, r2, #31
 80010ea:	d508      	bpl.n	80010fe <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 80010f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010f4:	3b01      	subs	r3, #1
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80010fa:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80010fe:	1c78      	adds	r0, r7, #1
 8001100:	d0bf      	beq.n	8001082 <HAL_SPI_TransmitReceive+0xb8>
 8001102:	f7ff fa6f 	bl	80005e4 <HAL_GetTick>
 8001106:	eba0 0008 	sub.w	r0, r0, r8
 800110a:	4287      	cmp	r7, r0
 800110c:	d8b9      	bhi.n	8001082 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 800110e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001110:	2301      	movs	r3, #1
 8001112:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001116:	2300      	movs	r3, #0
 8001118:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800111c:	b005      	add	sp, #20
 800111e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001122:	b119      	cbz	r1, 800112c <HAL_SPI_TransmitReceive+0x162>
 8001124:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001126:	b292      	uxth	r2, r2
 8001128:	2a01      	cmp	r2, #1
 800112a:	d106      	bne.n	800113a <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 800112c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001130:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8001132:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001134:	3b01      	subs	r3, #1
 8001136:	b29b      	uxth	r3, r3
 8001138:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800113a:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800113e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001140:	b29b      	uxth	r3, r3
 8001142:	b91b      	cbnz	r3, 800114c <HAL_SPI_TransmitReceive+0x182>
 8001144:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001146:	b29b      	uxth	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0a0      	beq.n	800108e <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800114c:	f1b9 0f00 	cmp.w	r9, #0
 8001150:	d00f      	beq.n	8001172 <HAL_SPI_TransmitReceive+0x1a8>
 8001152:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001154:	b29b      	uxth	r3, r3
 8001156:	b163      	cbz	r3, 8001172 <HAL_SPI_TransmitReceive+0x1a8>
 8001158:	6823      	ldr	r3, [r4, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	0791      	lsls	r1, r2, #30
 800115e:	d508      	bpl.n	8001172 <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001160:	782a      	ldrb	r2, [r5, #0]
 8001162:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001164:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001166:	3b01      	subs	r3, #1
 8001168:	b29b      	uxth	r3, r3
 800116a:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800116c:	3501      	adds	r5, #1
        txallowed = 0U;
 800116e:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001172:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001174:	b29b      	uxth	r3, r3
 8001176:	b163      	cbz	r3, 8001192 <HAL_SPI_TransmitReceive+0x1c8>
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	07d2      	lsls	r2, r2, #31
 800117e:	d508      	bpl.n	8001192 <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 8001184:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001186:	3b01      	subs	r3, #1
 8001188:	b29b      	uxth	r3, r3
 800118a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800118c:	3601      	adds	r6, #1
        txallowed = 1U;
 800118e:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001192:	1c7b      	adds	r3, r7, #1
 8001194:	d0d3      	beq.n	800113e <HAL_SPI_TransmitReceive+0x174>
 8001196:	f7ff fa25 	bl	80005e4 <HAL_GetTick>
 800119a:	eba0 0008 	sub.w	r0, r0, r8
 800119e:	4287      	cmp	r7, r0
 80011a0:	d8cd      	bhi.n	800113e <HAL_SPI_TransmitReceive+0x174>
 80011a2:	e7b4      	b.n	800110e <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80011a4:	68a3      	ldr	r3, [r4, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1b2      	bne.n	8001110 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	9003      	str	r0, [sp, #12]
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	9203      	str	r2, [sp, #12]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	9303      	str	r3, [sp, #12]
 80011b6:	9b03      	ldr	r3, [sp, #12]
 80011b8:	e7aa      	b.n	8001110 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 80011ba:	2002      	movs	r0, #2
 80011bc:	e7a8      	b.n	8001110 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 80011be:	2002      	movs	r0, #2
 80011c0:	e7ac      	b.n	800111c <HAL_SPI_TransmitReceive+0x152>

080011c2 <HAL_SPI_Receive>:
{
 80011c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80011c6:	461e      	mov	r6, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80011c8:	6843      	ldr	r3, [r0, #4]
 80011ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80011ce:	4604      	mov	r4, r0
 80011d0:	460d      	mov	r5, r1
 80011d2:	4690      	mov	r8, r2
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80011d4:	d10c      	bne.n	80011f0 <HAL_SPI_Receive+0x2e>
 80011d6:	6883      	ldr	r3, [r0, #8]
 80011d8:	b953      	cbnz	r3, 80011f0 <HAL_SPI_Receive+0x2e>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 80011da:	2304      	movs	r3, #4
 80011dc:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 80011e0:	4613      	mov	r3, r2
 80011e2:	9600      	str	r6, [sp, #0]
 80011e4:	460a      	mov	r2, r1
 80011e6:	f7ff fef0 	bl	8000fca <HAL_SPI_TransmitReceive>
}
 80011ea:	b002      	add	sp, #8
 80011ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 80011f0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	f000 8081 	beq.w	80012fc <HAL_SPI_Receive+0x13a>
 80011fa:	2301      	movs	r3, #1
 80011fc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001200:	f7ff f9f0 	bl	80005e4 <HAL_GetTick>
 8001204:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8001206:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800120a:	b2c0      	uxtb	r0, r0
 800120c:	2801      	cmp	r0, #1
 800120e:	d173      	bne.n	80012f8 <HAL_SPI_Receive+0x136>
  if((pData == NULL ) || (Size == 0))
 8001210:	2d00      	cmp	r5, #0
 8001212:	d058      	beq.n	80012c6 <HAL_SPI_Receive+0x104>
 8001214:	f1b8 0f00 	cmp.w	r8, #0
 8001218:	d055      	beq.n	80012c6 <HAL_SPI_Receive+0x104>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800121a:	2304      	movs	r3, #4
 800121c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001220:	2300      	movs	r3, #0
 8001222:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001224:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8001226:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 800122a:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800122c:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800122e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001230:	6463      	str	r3, [r4, #68]	; 0x44
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001232:	68a3      	ldr	r3, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001234:	63a5      	str	r5, [r4, #56]	; 0x38
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800123a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferSize  = Size;
 800123c:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 8001240:	bf02      	ittt	eq
 8001242:	681a      	ldreq	r2, [r3, #0]
 8001244:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8001248:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800124e:	bf5e      	ittt	pl
 8001250:	681a      	ldrpl	r2, [r3, #0]
 8001252:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001256:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001258:	68e3      	ldr	r3, [r4, #12]
 800125a:	b1cb      	cbz	r3, 8001290 <HAL_SPI_Receive+0xce>
    while(hspi->RxXferCount > 0U)
 800125c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800125e:	b29b      	uxth	r3, r3
 8001260:	b1d3      	cbz	r3, 8001298 <HAL_SPI_Receive+0xd6>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001262:	6823      	ldr	r3, [r4, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	07d2      	lsls	r2, r2, #31
 8001268:	d53c      	bpl.n	80012e4 <HAL_SPI_Receive+0x122>
        *((uint16_t*)pData) = hspi->Instance->DR;
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 8001270:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001272:	3b01      	subs	r3, #1
 8001274:	b29b      	uxth	r3, r3
 8001276:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001278:	e7f0      	b.n	800125c <HAL_SPI_Receive+0x9a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800127a:	6823      	ldr	r3, [r4, #0]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	07d0      	lsls	r0, r2, #31
 8001280:	d51f      	bpl.n	80012c2 <HAL_SPI_Receive+0x100>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8001282:	7b1b      	ldrb	r3, [r3, #12]
 8001284:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 8001288:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800128a:	3b01      	subs	r3, #1
 800128c:	b29b      	uxth	r3, r3
 800128e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while(hspi->RxXferCount > 0U)
 8001290:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001292:	b29b      	uxth	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f0      	bne.n	800127a <HAL_SPI_Receive+0xb8>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001298:	6863      	ldr	r3, [r4, #4]
 800129a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800129e:	d10b      	bne.n	80012b8 <HAL_SPI_Receive+0xf6>
 80012a0:	68a3      	ldr	r3, [r4, #8]
 80012a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012a6:	d002      	beq.n	80012ae <HAL_SPI_Receive+0xec>
 80012a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ac:	d104      	bne.n	80012b8 <HAL_SPI_Receive+0xf6>
    __HAL_SPI_DISABLE(hspi);
 80012ae:	6822      	ldr	r2, [r4, #0]
 80012b0:	6813      	ldr	r3, [r2, #0]
 80012b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012b6:	6013      	str	r3, [r2, #0]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80012b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80012ba:	3000      	adds	r0, #0
 80012bc:	bf18      	it	ne
 80012be:	2001      	movne	r0, #1
 80012c0:	e001      	b.n	80012c6 <HAL_SPI_Receive+0x104>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80012c2:	b93e      	cbnz	r6, 80012d4 <HAL_SPI_Receive+0x112>
          errorcode = HAL_TIMEOUT;
 80012c4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80012c6:	2301      	movs	r3, #1
 80012c8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80012cc:	2300      	movs	r3, #0
 80012ce:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 80012d2:	e78a      	b.n	80011ea <HAL_SPI_Receive+0x28>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80012d4:	1c71      	adds	r1, r6, #1
 80012d6:	d0db      	beq.n	8001290 <HAL_SPI_Receive+0xce>
 80012d8:	f7ff f984 	bl	80005e4 <HAL_GetTick>
 80012dc:	1bc0      	subs	r0, r0, r7
 80012de:	4286      	cmp	r6, r0
 80012e0:	d8d6      	bhi.n	8001290 <HAL_SPI_Receive+0xce>
 80012e2:	e7ef      	b.n	80012c4 <HAL_SPI_Receive+0x102>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80012e4:	2e00      	cmp	r6, #0
 80012e6:	d0ed      	beq.n	80012c4 <HAL_SPI_Receive+0x102>
 80012e8:	1c73      	adds	r3, r6, #1
 80012ea:	d0b7      	beq.n	800125c <HAL_SPI_Receive+0x9a>
 80012ec:	f7ff f97a 	bl	80005e4 <HAL_GetTick>
 80012f0:	1bc0      	subs	r0, r0, r7
 80012f2:	4286      	cmp	r6, r0
 80012f4:	d8b2      	bhi.n	800125c <HAL_SPI_Receive+0x9a>
 80012f6:	e7e5      	b.n	80012c4 <HAL_SPI_Receive+0x102>
    errorcode = HAL_BUSY;
 80012f8:	2002      	movs	r0, #2
 80012fa:	e7e4      	b.n	80012c6 <HAL_SPI_Receive+0x104>
  __HAL_LOCK(hspi);
 80012fc:	2002      	movs	r0, #2
 80012fe:	e774      	b.n	80011ea <HAL_SPI_Receive+0x28>

08001300 <HAL_SPI_GetState>:
  return hspi->State;
 8001300:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8001304:	4770      	bx	lr
	...

08001308 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001308:	6a03      	ldr	r3, [r0, #32]
 800130a:	f023 0301 	bic.w	r3, r3, #1
 800130e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001310:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001312:	6842      	ldr	r2, [r0, #4]
{
 8001314:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001316:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001318:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800131a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800131e:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001320:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001322:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001326:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001328:	4c0c      	ldr	r4, [pc, #48]	; (800135c <TIM_OC1_SetConfig+0x54>)
 800132a:	42a0      	cmp	r0, r4
 800132c:	d009      	beq.n	8001342 <TIM_OC1_SetConfig+0x3a>
 800132e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001332:	42a0      	cmp	r0, r4
 8001334:	d005      	beq.n	8001342 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001336:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001338:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800133a:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800133c:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800133e:	6203      	str	r3, [r0, #32]
} 
 8001340:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001342:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001344:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001346:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800134a:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800134c:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800134e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001352:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001354:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001358:	4322      	orrs	r2, r4
 800135a:	e7ec      	b.n	8001336 <TIM_OC1_SetConfig+0x2e>
 800135c:	40010000 	.word	0x40010000

08001360 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001360:	6a03      	ldr	r3, [r0, #32]
 8001362:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001366:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001368:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800136a:	6842      	ldr	r2, [r0, #4]
{
 800136c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800136e:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001370:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001372:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001376:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001378:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800137a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800137e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001382:	4c0e      	ldr	r4, [pc, #56]	; (80013bc <TIM_OC3_SetConfig+0x5c>)
 8001384:	42a0      	cmp	r0, r4
 8001386:	d009      	beq.n	800139c <TIM_OC3_SetConfig+0x3c>
 8001388:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800138c:	42a0      	cmp	r0, r4
 800138e:	d005      	beq.n	800139c <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001390:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001392:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001394:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001396:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001398:	6203      	str	r3, [r0, #32]
}
 800139a:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800139c:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800139e:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 80013a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80013a4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80013a8:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80013aa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80013ae:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80013b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80013b4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 80013b8:	e7ea      	b.n	8001390 <TIM_OC3_SetConfig+0x30>
 80013ba:	bf00      	nop
 80013bc:	40010000 	.word	0x40010000

080013c0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80013c0:	6a03      	ldr	r3, [r0, #32]
 80013c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013c6:	6203      	str	r3, [r0, #32]
{
 80013c8:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013ca:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80013cc:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80013ce:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80013d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80013d2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80013d6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80013da:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80013dc:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80013e0:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80013e4:	4d09      	ldr	r5, [pc, #36]	; (800140c <TIM_OC4_SetConfig+0x4c>)
 80013e6:	42a8      	cmp	r0, r5
 80013e8:	d009      	beq.n	80013fe <TIM_OC4_SetConfig+0x3e>
 80013ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013ee:	42a8      	cmp	r0, r5
 80013f0:	d005      	beq.n	80013fe <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013f2:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80013f4:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80013f6:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80013f8:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013fa:	6204      	str	r4, [r0, #32]
}
 80013fc:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80013fe:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001400:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001404:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001408:	e7f3      	b.n	80013f2 <TIM_OC4_SetConfig+0x32>
 800140a:	bf00      	nop
 800140c:	40010000 	.word	0x40010000

08001410 <HAL_TIM_Base_Start>:
  __HAL_TIM_ENABLE(htim);
 8001410:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001412:	2302      	movs	r3, #2
 8001414:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE(htim);
 8001418:	6813      	ldr	r3, [r2, #0]
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 8001420:	2301      	movs	r3, #1
 8001422:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8001426:	2000      	movs	r0, #0
 8001428:	4770      	bx	lr
	...

0800142c <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800142c:	4a2e      	ldr	r2, [pc, #184]	; (80014e8 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 800142e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001430:	4290      	cmp	r0, r2
 8001432:	d012      	beq.n	800145a <TIM_Base_SetConfig+0x2e>
 8001434:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001438:	d00f      	beq.n	800145a <TIM_Base_SetConfig+0x2e>
 800143a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800143e:	4290      	cmp	r0, r2
 8001440:	d00b      	beq.n	800145a <TIM_Base_SetConfig+0x2e>
 8001442:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001446:	4290      	cmp	r0, r2
 8001448:	d007      	beq.n	800145a <TIM_Base_SetConfig+0x2e>
 800144a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800144e:	4290      	cmp	r0, r2
 8001450:	d003      	beq.n	800145a <TIM_Base_SetConfig+0x2e>
 8001452:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001456:	4290      	cmp	r0, r2
 8001458:	d11d      	bne.n	8001496 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800145a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800145c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001460:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001462:	4a21      	ldr	r2, [pc, #132]	; (80014e8 <TIM_Base_SetConfig+0xbc>)
 8001464:	4290      	cmp	r0, r2
 8001466:	d104      	bne.n	8001472 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001468:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800146a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800146e:	4313      	orrs	r3, r2
 8001470:	e028      	b.n	80014c4 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001472:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001476:	d0f7      	beq.n	8001468 <TIM_Base_SetConfig+0x3c>
 8001478:	4a1c      	ldr	r2, [pc, #112]	; (80014ec <TIM_Base_SetConfig+0xc0>)
 800147a:	4290      	cmp	r0, r2
 800147c:	d0f4      	beq.n	8001468 <TIM_Base_SetConfig+0x3c>
 800147e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001482:	4290      	cmp	r0, r2
 8001484:	d0f0      	beq.n	8001468 <TIM_Base_SetConfig+0x3c>
 8001486:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800148a:	4290      	cmp	r0, r2
 800148c:	d0ec      	beq.n	8001468 <TIM_Base_SetConfig+0x3c>
 800148e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001492:	4290      	cmp	r0, r2
 8001494:	d0e8      	beq.n	8001468 <TIM_Base_SetConfig+0x3c>
 8001496:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <TIM_Base_SetConfig+0xc4>)
 8001498:	4290      	cmp	r0, r2
 800149a:	d0e5      	beq.n	8001468 <TIM_Base_SetConfig+0x3c>
 800149c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014a0:	4290      	cmp	r0, r2
 80014a2:	d0e1      	beq.n	8001468 <TIM_Base_SetConfig+0x3c>
 80014a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014a8:	4290      	cmp	r0, r2
 80014aa:	d0dd      	beq.n	8001468 <TIM_Base_SetConfig+0x3c>
 80014ac:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80014b0:	4290      	cmp	r0, r2
 80014b2:	d0d9      	beq.n	8001468 <TIM_Base_SetConfig+0x3c>
 80014b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014b8:	4290      	cmp	r0, r2
 80014ba:	d0d5      	beq.n	8001468 <TIM_Base_SetConfig+0x3c>
 80014bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014c0:	4290      	cmp	r0, r2
 80014c2:	d0d1      	beq.n	8001468 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 80014c4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014c6:	688b      	ldr	r3, [r1, #8]
 80014c8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80014ca:	680b      	ldr	r3, [r1, #0]
 80014cc:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <TIM_Base_SetConfig+0xbc>)
 80014d0:	4298      	cmp	r0, r3
 80014d2:	d006      	beq.n	80014e2 <TIM_Base_SetConfig+0xb6>
 80014d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014d8:	4298      	cmp	r0, r3
 80014da:	d002      	beq.n	80014e2 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 80014dc:	2301      	movs	r3, #1
 80014de:	6143      	str	r3, [r0, #20]
}
 80014e0:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80014e2:	690b      	ldr	r3, [r1, #16]
 80014e4:	6303      	str	r3, [r0, #48]	; 0x30
 80014e6:	e7f9      	b.n	80014dc <TIM_Base_SetConfig+0xb0>
 80014e8:	40010000 	.word	0x40010000
 80014ec:	40000400 	.word	0x40000400
 80014f0:	40014000 	.word	0x40014000

080014f4 <HAL_TIM_PWM_Init>:
{
 80014f4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80014f6:	4604      	mov	r4, r0
 80014f8:	b1a0      	cbz	r0, 8001524 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80014fa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80014fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001502:	b91b      	cbnz	r3, 800150c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001504:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8001508:	f000 fcfe 	bl	8001f08 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 800150c:	2302      	movs	r3, #2
 800150e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001512:	6820      	ldr	r0, [r4, #0]
 8001514:	1d21      	adds	r1, r4, #4
 8001516:	f7ff ff89 	bl	800142c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800151a:	2301      	movs	r3, #1
 800151c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001520:	2000      	movs	r0, #0
 8001522:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001524:	2001      	movs	r0, #1
}  
 8001526:	bd10      	pop	{r4, pc}

08001528 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001528:	6a03      	ldr	r3, [r0, #32]
 800152a:	f023 0310 	bic.w	r3, r3, #16
 800152e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001530:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001532:	6842      	ldr	r2, [r0, #4]
{
 8001534:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8001536:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001538:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800153a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800153e:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001542:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001544:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001548:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800154c:	4c0d      	ldr	r4, [pc, #52]	; (8001584 <TIM_OC2_SetConfig+0x5c>)
 800154e:	42a0      	cmp	r0, r4
 8001550:	d009      	beq.n	8001566 <TIM_OC2_SetConfig+0x3e>
 8001552:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001556:	42a0      	cmp	r0, r4
 8001558:	d005      	beq.n	8001566 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 800155a:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800155c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800155e:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001560:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001562:	6203      	str	r3, [r0, #32]
}
 8001564:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001566:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001568:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 800156a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800156e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001572:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001574:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001578:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800157a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800157e:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8001582:	e7ea      	b.n	800155a <TIM_OC2_SetConfig+0x32>
 8001584:	40010000 	.word	0x40010000

08001588 <HAL_TIM_PWM_ConfigChannel>:
{
 8001588:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800158a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800158e:	2b01      	cmp	r3, #1
{
 8001590:	4604      	mov	r4, r0
 8001592:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001596:	d025      	beq.n	80015e4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001598:	2301      	movs	r3, #1
 800159a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800159e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 80015a2:	2a0c      	cmp	r2, #12
 80015a4:	d818      	bhi.n	80015d8 <HAL_TIM_PWM_ConfigChannel+0x50>
 80015a6:	e8df f002 	tbb	[pc, r2]
 80015aa:	1707      	.short	0x1707
 80015ac:	171e1717 	.word	0x171e1717
 80015b0:	172f1717 	.word	0x172f1717
 80015b4:	1717      	.short	0x1717
 80015b6:	40          	.byte	0x40
 80015b7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80015b8:	6820      	ldr	r0, [r4, #0]
 80015ba:	f7ff fea5 	bl	8001308 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80015be:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80015c0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80015c2:	699a      	ldr	r2, [r3, #24]
 80015c4:	f042 0208 	orr.w	r2, r2, #8
 80015c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80015ca:	699a      	ldr	r2, [r3, #24]
 80015cc:	f022 0204 	bic.w	r2, r2, #4
 80015d0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80015d2:	699a      	ldr	r2, [r3, #24]
 80015d4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80015d6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80015d8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80015da:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80015dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80015e0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80015e4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80015e6:	6820      	ldr	r0, [r4, #0]
 80015e8:	f7ff ff9e 	bl	8001528 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80015ec:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80015ee:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80015f0:	699a      	ldr	r2, [r3, #24]
 80015f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80015f8:	699a      	ldr	r2, [r3, #24]
 80015fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001600:	699a      	ldr	r2, [r3, #24]
 8001602:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001606:	e7e6      	b.n	80015d6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001608:	6820      	ldr	r0, [r4, #0]
 800160a:	f7ff fea9 	bl	8001360 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800160e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001610:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001612:	69da      	ldr	r2, [r3, #28]
 8001614:	f042 0208 	orr.w	r2, r2, #8
 8001618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800161a:	69da      	ldr	r2, [r3, #28]
 800161c:	f022 0204 	bic.w	r2, r2, #4
 8001620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001622:	69da      	ldr	r2, [r3, #28]
 8001624:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001626:	61da      	str	r2, [r3, #28]
    break;
 8001628:	e7d6      	b.n	80015d8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800162a:	6820      	ldr	r0, [r4, #0]
 800162c:	f7ff fec8 	bl	80013c0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001630:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001632:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001634:	69da      	ldr	r2, [r3, #28]
 8001636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800163a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800163c:	69da      	ldr	r2, [r3, #28]
 800163e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001642:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001644:	69da      	ldr	r2, [r3, #28]
 8001646:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800164a:	e7ec      	b.n	8001626 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800164c <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 800164c:	6a03      	ldr	r3, [r0, #32]
{
 800164e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001650:	2401      	movs	r4, #1
 8001652:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001654:	ea23 0304 	bic.w	r3, r3, r4
 8001658:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800165a:	6a03      	ldr	r3, [r0, #32]
 800165c:	408a      	lsls	r2, r1
 800165e:	431a      	orrs	r2, r3
 8001660:	6202      	str	r2, [r0, #32]
 8001662:	bd10      	pop	{r4, pc}

08001664 <HAL_TIM_PWM_Start>:
{
 8001664:	b510      	push	{r4, lr}
 8001666:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001668:	2201      	movs	r2, #1
 800166a:	6800      	ldr	r0, [r0, #0]
 800166c:	f7ff ffee 	bl	800164c <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001670:	6823      	ldr	r3, [r4, #0]
 8001672:	4a08      	ldr	r2, [pc, #32]	; (8001694 <HAL_TIM_PWM_Start+0x30>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d003      	beq.n	8001680 <HAL_TIM_PWM_Start+0x1c>
 8001678:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800167c:	4293      	cmp	r3, r2
 800167e:	d103      	bne.n	8001688 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8001680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001682:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001686:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	f042 0201 	orr.w	r2, r2, #1
 800168e:	601a      	str	r2, [r3, #0]
} 
 8001690:	2000      	movs	r0, #0
 8001692:	bd10      	pop	{r4, pc}
 8001694:	40010000 	.word	0x40010000

08001698 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001698:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800169c:	2b01      	cmp	r3, #1
{
 800169e:	b510      	push	{r4, lr}
 80016a0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80016a4:	d018      	beq.n	80016d8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80016a6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80016aa:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80016ac:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80016ae:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80016b0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80016b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016b6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	4322      	orrs	r2, r4
 80016bc:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016c4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80016cc:	2301      	movs	r3, #1
 80016ce:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80016d2:	2300      	movs	r3, #0
 80016d4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80016d8:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80016da:	bd10      	pop	{r4, pc}

080016dc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80016dc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d01f      	beq.n	8001724 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80016e4:	68cb      	ldr	r3, [r1, #12]
 80016e6:	688a      	ldr	r2, [r1, #8]
 80016e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80016ee:	684a      	ldr	r2, [r1, #4]
 80016f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80016f6:	680a      	ldr	r2, [r1, #0]
 80016f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80016fe:	690a      	ldr	r2, [r1, #16]
 8001700:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001704:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001706:	694a      	ldr	r2, [r1, #20]
 8001708:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800170c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800170e:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001710:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001714:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001716:	6802      	ldr	r2, [r0, #0]
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 800171a:	2300      	movs	r3, #0
 800171c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001720:	4618      	mov	r0, r3
 8001722:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001724:	2002      	movs	r0, #2
}
 8001726:	4770      	bx	lr

08001728 <convertCANid2Reg.constprop.1>:
/* Konverter CAN-ID til leselig */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
  uint8_t wipSIDL = 0;
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 8001728:	2902      	cmp	r1, #2
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <convertCANid2Reg.constprop.1+0x34>)
 800172c:	d110      	bne.n	8001750 <convertCANid2Reg.constprop.1+0x28>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
 800172e:	0a02      	lsrs	r2, r0, #8
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8001730:	70d8      	strb	r0, [r3, #3]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
 8001732:	0c00      	lsrs	r0, r0, #16
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8001734:	f000 0103 	and.w	r1, r0, #3
    tempPassedInID = tempPassedInID << 3;
 8001738:	00c0      	lsls	r0, r0, #3
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 800173a:	709a      	strb	r2, [r3, #2]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800173c:	f000 02e0 	and.w	r2, r0, #224	; 0xe0
 8001740:	430a      	orrs	r2, r1
    wipSIDL = wipSIDL + 0x08;
 8001742:	3208      	adds	r2, #8
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8001744:	f022 0214 	bic.w	r2, r2, #20
 8001748:	705a      	strb	r2, [r3, #1]
  {
    passedIdReg->tempEID8 = 0;
    passedIdReg->tempEID0 = 0;
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
 800174a:	0a00      	lsrs	r0, r0, #8
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800174c:	7018      	strb	r0, [r3, #0]
 800174e:	4770      	bx	lr
    passedIdReg->tempEID8 = 0;
 8001750:	2200      	movs	r2, #0
    tempPassedInID = tempPassedInID << 5;
 8001752:	0140      	lsls	r0, r0, #5
    passedIdReg->tempEID8 = 0;
 8001754:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8001756:	70da      	strb	r2, [r3, #3]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8001758:	7058      	strb	r0, [r3, #1]
 800175a:	e7f6      	b.n	800174a <convertCANid2Reg.constprop.1+0x22>
 800175c:	2000002c 	.word	0x2000002c

08001760 <CANSPI_Initialize>:
{
 8001760:	b510      	push	{r4, lr}
 8001762:	b088      	sub	sp, #32
  RXM0reg.RXM0SIDH = (mask0&0x7F8)>>3;
 8001764:	2400      	movs	r4, #0
 8001766:	f88d 4018 	strb.w	r4, [sp, #24]
  RXM0reg.RXM0SIDL = (mask0&0x7)<<5;
 800176a:	f88d 4019 	strb.w	r4, [sp, #25]
  RXM0reg.RXM0EID8 = 0x00;
 800176e:	f88d 401a 	strb.w	r4, [sp, #26]
  RXM0reg.RXM0EID0 = 0x00;
 8001772:	f88d 401b 	strb.w	r4, [sp, #27]
  RXM1reg.RXM1SIDH = (mask1&0x7F8)>>3;
 8001776:	f88d 401c 	strb.w	r4, [sp, #28]
  RXM1reg.RXM1SIDL = (mask1&0x7)<<5;
 800177a:	f88d 401d 	strb.w	r4, [sp, #29]
  RXM1reg.RXM1EID8 = 0x00;
 800177e:	f88d 401e 	strb.w	r4, [sp, #30]
  RXM1reg.RXM1EID0 = 0x00;
 8001782:	f88d 401f 	strb.w	r4, [sp, #31]
  RXF0reg.RXF0SIDH = (filter0&0x7F8)>>3;
 8001786:	f88d 4000 	strb.w	r4, [sp]
  RXF0reg.RXF0SIDL = (filter0&0x7)<<5;     //Standard Filter
 800178a:	f88d 4001 	strb.w	r4, [sp, #1]
  RXF0reg.RXF0EID8 = 0x00;
 800178e:	f88d 4002 	strb.w	r4, [sp, #2]
  RXF0reg.RXF0EID0 = 0x00;
 8001792:	f88d 4003 	strb.w	r4, [sp, #3]
  RXF1reg.RXF1SIDH = (filter1&0x7F8)>>3;
 8001796:	f88d 4004 	strb.w	r4, [sp, #4]
  RXF1reg.RXF1SIDL = (filter1&0x7)<<5;     //Extended Filter
 800179a:	f88d 4005 	strb.w	r4, [sp, #5]
  RXF1reg.RXF1EID8 = 0x00;
 800179e:	f88d 4006 	strb.w	r4, [sp, #6]
  RXF1reg.RXF1EID0 = 0x00;
 80017a2:	f88d 4007 	strb.w	r4, [sp, #7]
  RXF2reg.RXF2SIDH = (filter2&0x7F8)>>3;
 80017a6:	f88d 4008 	strb.w	r4, [sp, #8]
  RXF2reg.RXF2SIDL = (filter2&0x7)<<5;
 80017aa:	f88d 4009 	strb.w	r4, [sp, #9]
  RXF2reg.RXF2EID8 = 0x00;
 80017ae:	f88d 400a 	strb.w	r4, [sp, #10]
  RXF2reg.RXF2EID0 = 0x00;
 80017b2:	f88d 400b 	strb.w	r4, [sp, #11]
  RXF3reg.RXF3SIDH = (filter3&0x7F8)>>3;
 80017b6:	f88d 400c 	strb.w	r4, [sp, #12]
  RXF3reg.RXF3SIDL = (filter3&0x7)<<5;
 80017ba:	f88d 400d 	strb.w	r4, [sp, #13]
  RXF3reg.RXF3EID8 = 0x00;
 80017be:	f88d 400e 	strb.w	r4, [sp, #14]
  RXF3reg.RXF3EID0 = 0x00;
 80017c2:	f88d 400f 	strb.w	r4, [sp, #15]
  RXF4reg.RXF4SIDH = (filter4&0x7F8)>>3;
 80017c6:	f88d 4010 	strb.w	r4, [sp, #16]
  RXF4reg.RXF4SIDL = (filter4&0x7)<<5;
 80017ca:	f88d 4011 	strb.w	r4, [sp, #17]
  RXF4reg.RXF4EID8 = 0x00;
 80017ce:	f88d 4012 	strb.w	r4, [sp, #18]
  RXF4reg.RXF4EID0 = 0x00;
 80017d2:	f88d 4013 	strb.w	r4, [sp, #19]
  RXF5reg.RXF5SIDH = (filter5&0x7F8)>>3;
 80017d6:	f88d 4014 	strb.w	r4, [sp, #20]
  RXF5reg.RXF5SIDL = (filter5&0x7)<<5;
 80017da:	f88d 4015 	strb.w	r4, [sp, #21]
  RXF5reg.RXF5EID8 = 0x00;
 80017de:	f88d 4016 	strb.w	r4, [sp, #22]
  RXF5reg.RXF5EID0 = 0x00;
 80017e2:	f88d 4017 	strb.w	r4, [sp, #23]
  if(!MCP2515_Initialize())
 80017e6:	f000 f8af 	bl	8001948 <MCP2515_Initialize>
 80017ea:	b910      	cbnz	r0, 80017f2 <CANSPI_Initialize+0x92>
    return false;
 80017ec:	2000      	movs	r0, #0
}
 80017ee:	b008      	add	sp, #32
 80017f0:	bd10      	pop	{r4, pc}
  if(!MCP2515_SetConfigMode())
 80017f2:	f000 f8fb 	bl	80019ec <MCP2515_SetConfigMode>
 80017f6:	2800      	cmp	r0, #0
 80017f8:	d0f8      	beq.n	80017ec <CANSPI_Initialize+0x8c>
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80017fa:	aa06      	add	r2, sp, #24
 80017fc:	2123      	movs	r1, #35	; 0x23
 80017fe:	2020      	movs	r0, #32
 8001800:	f000 f91e 	bl	8001a40 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8001804:	aa07      	add	r2, sp, #28
 8001806:	2127      	movs	r1, #39	; 0x27
 8001808:	2024      	movs	r0, #36	; 0x24
 800180a:	f000 f919 	bl	8001a40 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800180e:	466a      	mov	r2, sp
 8001810:	2103      	movs	r1, #3
 8001812:	4620      	mov	r0, r4
 8001814:	f000 f914 	bl	8001a40 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8001818:	aa01      	add	r2, sp, #4
 800181a:	2107      	movs	r1, #7
 800181c:	2004      	movs	r0, #4
 800181e:	f000 f90f 	bl	8001a40 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8001822:	aa02      	add	r2, sp, #8
 8001824:	210b      	movs	r1, #11
 8001826:	2008      	movs	r0, #8
 8001828:	f000 f90a 	bl	8001a40 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 800182c:	aa03      	add	r2, sp, #12
 800182e:	2113      	movs	r1, #19
 8001830:	2010      	movs	r0, #16
 8001832:	f000 f905 	bl	8001a40 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8001836:	aa04      	add	r2, sp, #16
 8001838:	2117      	movs	r1, #23
 800183a:	2014      	movs	r0, #20
 800183c:	f000 f900 	bl	8001a40 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8001840:	aa05      	add	r2, sp, #20
 8001842:	211b      	movs	r1, #27
 8001844:	2018      	movs	r0, #24
 8001846:	f000 f8fb 	bl	8001a40 <MCP2515_WriteByteSequence>
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 800184a:	2104      	movs	r1, #4
 800184c:	2060      	movs	r0, #96	; 0x60
 800184e:	f000 f8af 	bl	80019b0 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8001852:	2101      	movs	r1, #1
 8001854:	2070      	movs	r0, #112	; 0x70
 8001856:	f000 f8ab 	bl	80019b0 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_CANINTE, 0x03);		//Enable interrupt on RXB0/RXB1
 800185a:	2103      	movs	r1, #3
 800185c:	202b      	movs	r0, #43	; 0x2b
 800185e:	f000 f8a7 	bl	80019b0 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8001862:	4621      	mov	r1, r4
 8001864:	202a      	movs	r0, #42	; 0x2a
 8001866:	f000 f8a3 	bl	80019b0 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_CNF2, 0xE0);
 800186a:	21e0      	movs	r1, #224	; 0xe0
 800186c:	2029      	movs	r0, #41	; 0x29
 800186e:	f000 f89f 	bl	80019b0 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_CNF3, 0x82);
 8001872:	2182      	movs	r1, #130	; 0x82
 8001874:	2028      	movs	r0, #40	; 0x28
 8001876:	f000 f89b 	bl	80019b0 <MCP2515_WriteByte>
  if(!MCP2515_SetNormalMode())
 800187a:	f000 f8cc 	bl	8001a16 <MCP2515_SetNormalMode>
    return false;
 800187e:	3000      	adds	r0, #0
 8001880:	bf18      	it	ne
 8001882:	2001      	movne	r0, #1
 8001884:	e7b3      	b.n	80017ee <CANSPI_Initialize+0x8e>
	...

08001888 <CANSPI_Transmit>:
{
 8001888:	b570      	push	{r4, r5, r6, lr}
  idReg.tempSIDH = 0;
 800188a:	4e1e      	ldr	r6, [pc, #120]	; (8001904 <CANSPI_Transmit+0x7c>)
 800188c:	2500      	movs	r5, #0
{
 800188e:	4604      	mov	r4, r0
  idReg.tempSIDH = 0;
 8001890:	7035      	strb	r5, [r6, #0]
  idReg.tempSIDL = 0;
 8001892:	7075      	strb	r5, [r6, #1]
  idReg.tempEID8 = 0;
 8001894:	70b5      	strb	r5, [r6, #2]
  idReg.tempEID0 = 0;
 8001896:	70f5      	strb	r5, [r6, #3]
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8001898:	f000 f93a 	bl	8001b10 <MCP2515_ReadStatus>
 800189c:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <CANSPI_Transmit+0x80>)
  if (ctrlStatus.TXB0REQ != 1)
 800189e:	0741      	lsls	r1, r0, #29
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 80018a0:	7018      	strb	r0, [r3, #0]
  if (ctrlStatus.TXB0REQ != 1)
 80018a2:	d40f      	bmi.n	80018c4 <CANSPI_Transmit+0x3c>
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80018a4:	7821      	ldrb	r1, [r4, #0]
 80018a6:	6860      	ldr	r0, [r4, #4]
 80018a8:	f7ff ff3e 	bl	8001728 <convertCANid2Reg.constprop.1>
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80018ac:	2040      	movs	r0, #64	; 0x40
 80018ae:	f104 0309 	add.w	r3, r4, #9
 80018b2:	7a22      	ldrb	r2, [r4, #8]
 80018b4:	4631      	mov	r1, r6
 80018b6:	f000 f8e9 	bl	8001a8c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 80018ba:	2081      	movs	r0, #129	; 0x81
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 80018bc:	f000 f912 	bl	8001ae4 <MCP2515_RequestToSend>
    returnValue = 1;
 80018c0:	2001      	movs	r0, #1
 80018c2:	bd70      	pop	{r4, r5, r6, pc}
  else if (ctrlStatus.TXB1REQ != 1)
 80018c4:	06c2      	lsls	r2, r0, #27
 80018c6:	d40c      	bmi.n	80018e2 <CANSPI_Transmit+0x5a>
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80018c8:	7821      	ldrb	r1, [r4, #0]
 80018ca:	6860      	ldr	r0, [r4, #4]
 80018cc:	f7ff ff2c 	bl	8001728 <convertCANid2Reg.constprop.1>
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80018d0:	2042      	movs	r0, #66	; 0x42
 80018d2:	f104 0309 	add.w	r3, r4, #9
 80018d6:	7a22      	ldrb	r2, [r4, #8]
 80018d8:	4631      	mov	r1, r6
 80018da:	f000 f8d7 	bl	8001a8c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 80018de:	2082      	movs	r0, #130	; 0x82
 80018e0:	e7ec      	b.n	80018bc <CANSPI_Transmit+0x34>
  else if (ctrlStatus.TXB2REQ != 1)
 80018e2:	0643      	lsls	r3, r0, #25
 80018e4:	d40c      	bmi.n	8001900 <CANSPI_Transmit+0x78>
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80018e6:	7821      	ldrb	r1, [r4, #0]
 80018e8:	6860      	ldr	r0, [r4, #4]
 80018ea:	f7ff ff1d 	bl	8001728 <convertCANid2Reg.constprop.1>
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80018ee:	2044      	movs	r0, #68	; 0x44
 80018f0:	f104 0309 	add.w	r3, r4, #9
 80018f4:	7a22      	ldrb	r2, [r4, #8]
 80018f6:	4631      	mov	r1, r6
 80018f8:	f000 f8c8 	bl	8001a8c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 80018fc:	2084      	movs	r0, #132	; 0x84
 80018fe:	e7dd      	b.n	80018bc <CANSPI_Transmit+0x34>
  uint8_t returnValue = 0;
 8001900:	4628      	mov	r0, r5
}
 8001902:	bd70      	pop	{r4, r5, r6, pc}
 8001904:	2000002c 	.word	0x2000002c
 8001908:	20000028 	.word	0x20000028

0800190c <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* E */
static void SPI_Tx(uint8_t data)
{
 800190c:	b507      	push	{r0, r1, r2, lr}
 800190e:	a902      	add	r1, sp, #8
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8001910:	230a      	movs	r3, #10
{
 8001912:	f801 0d01 	strb.w	r0, [r1, #-1]!
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8001916:	2201      	movs	r2, #1
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <SPI_Tx+0x18>)
 800191a:	f7ff faad 	bl	8000e78 <HAL_SPI_Transmit>
}
 800191e:	b003      	add	sp, #12
 8001920:	f85d fb04 	ldr.w	pc, [sp], #4
 8001924:	2000005c 	.word	0x2000005c

08001928 <SPI_Rx>:
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
}

/* SPI Rx Wrapper funksjon*/
static uint8_t SPI_Rx(void)
{
 8001928:	b507      	push	{r0, r1, r2, lr}
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800192a:	230a      	movs	r3, #10
 800192c:	2201      	movs	r2, #1
 800192e:	f10d 0107 	add.w	r1, sp, #7
 8001932:	4804      	ldr	r0, [pc, #16]	; (8001944 <SPI_Rx+0x1c>)
 8001934:	f7ff fc45 	bl	80011c2 <HAL_SPI_Receive>
  return retVal;
}
 8001938:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800193c:	b003      	add	sp, #12
 800193e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001942:	bf00      	nop
 8001944:	2000005c 	.word	0x2000005c

08001948 <MCP2515_Initialize>:
{
 8001948:	b538      	push	{r3, r4, r5, lr}
  MCP2515_CS_HIGH();    
 800194a:	2201      	movs	r2, #1
 800194c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001950:	4807      	ldr	r0, [pc, #28]	; (8001970 <MCP2515_Initialize+0x28>)
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001952:	4d08      	ldr	r5, [pc, #32]	; (8001974 <MCP2515_Initialize+0x2c>)
  MCP2515_CS_HIGH();    
 8001954:	f7fe ffa6 	bl	80008a4 <HAL_GPIO_WritePin>
 8001958:	240a      	movs	r4, #10
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 800195a:	4628      	mov	r0, r5
 800195c:	f7ff fcd0 	bl	8001300 <HAL_SPI_GetState>
 8001960:	2801      	cmp	r0, #1
 8001962:	d004      	beq.n	800196e <MCP2515_Initialize+0x26>
 8001964:	3c01      	subs	r4, #1
  } while(loop > 0); 
 8001966:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800196a:	d1f6      	bne.n	800195a <MCP2515_Initialize+0x12>
  return false;
 800196c:	4620      	mov	r0, r4
}
 800196e:	bd38      	pop	{r3, r4, r5, pc}
 8001970:	40021000 	.word	0x40021000
 8001974:	2000005c 	.word	0x2000005c

08001978 <MCP2515_ReadByte>:
{
 8001978:	b538      	push	{r3, r4, r5, lr}
  MCP2515_CS_LOW();
 800197a:	4c0c      	ldr	r4, [pc, #48]	; (80019ac <MCP2515_ReadByte+0x34>)
 800197c:	2200      	movs	r2, #0
 800197e:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 8001982:	4605      	mov	r5, r0
  MCP2515_CS_LOW();
 8001984:	4620      	mov	r0, r4
 8001986:	f7fe ff8d 	bl	80008a4 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_READ);
 800198a:	2003      	movs	r0, #3
 800198c:	f7ff ffbe 	bl	800190c <SPI_Tx>
  SPI_Tx(address);
 8001990:	4628      	mov	r0, r5
 8001992:	f7ff ffbb 	bl	800190c <SPI_Tx>
  retVal = SPI_Rx();
 8001996:	f7ff ffc7 	bl	8001928 <SPI_Rx>
  MCP2515_CS_HIGH();
 800199a:	2201      	movs	r2, #1
  retVal = SPI_Rx();
 800199c:	4605      	mov	r5, r0
  MCP2515_CS_HIGH();
 800199e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7fe ff7e 	bl	80008a4 <HAL_GPIO_WritePin>
}
 80019a8:	4628      	mov	r0, r5
 80019aa:	bd38      	pop	{r3, r4, r5, pc}
 80019ac:	40021000 	.word	0x40021000

080019b0 <MCP2515_WriteByte>:
{    
 80019b0:	b570      	push	{r4, r5, r6, lr}
  MCP2515_CS_LOW();  
 80019b2:	4c0d      	ldr	r4, [pc, #52]	; (80019e8 <MCP2515_WriteByte+0x38>)
 80019b4:	2200      	movs	r2, #0
{    
 80019b6:	4606      	mov	r6, r0
 80019b8:	460d      	mov	r5, r1
  MCP2515_CS_LOW();  
 80019ba:	4620      	mov	r0, r4
 80019bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019c0:	f7fe ff70 	bl	80008a4 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_WRITE);
 80019c4:	2002      	movs	r0, #2
 80019c6:	f7ff ffa1 	bl	800190c <SPI_Tx>
  SPI_Tx(address);
 80019ca:	4630      	mov	r0, r6
 80019cc:	f7ff ff9e 	bl	800190c <SPI_Tx>
  SPI_Tx(data);  
 80019d0:	4628      	mov	r0, r5
 80019d2:	f7ff ff9b 	bl	800190c <SPI_Tx>
  MCP2515_CS_HIGH();
 80019d6:	4620      	mov	r0, r4
 80019d8:	2201      	movs	r2, #1
 80019da:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 80019de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MCP2515_CS_HIGH();
 80019e2:	f7fe bf5f 	b.w	80008a4 <HAL_GPIO_WritePin>
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000

080019ec <MCP2515_SetConfigMode>:
{
 80019ec:	b510      	push	{r4, lr}
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80019ee:	2180      	movs	r1, #128	; 0x80
 80019f0:	200f      	movs	r0, #15
 80019f2:	f7ff ffdd 	bl	80019b0 <MCP2515_WriteByte>
 80019f6:	240a      	movs	r4, #10
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80019f8:	200e      	movs	r0, #14
 80019fa:	f7ff ffbd 	bl	8001978 <MCP2515_ReadByte>
 80019fe:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
 8001a02:	2880      	cmp	r0, #128	; 0x80
 8001a04:	d005      	beq.n	8001a12 <MCP2515_SetConfigMode+0x26>
 8001a06:	3c01      	subs	r4, #1
  } while(loop > 0); 
 8001a08:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001a0c:	d1f4      	bne.n	80019f8 <MCP2515_SetConfigMode+0xc>
  return false;
 8001a0e:	4620      	mov	r0, r4
 8001a10:	bd10      	pop	{r4, pc}
      return true;
 8001a12:	2001      	movs	r0, #1
}
 8001a14:	bd10      	pop	{r4, pc}

08001a16 <MCP2515_SetNormalMode>:
{
 8001a16:	b510      	push	{r4, lr}
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8001a18:	2100      	movs	r1, #0
 8001a1a:	200f      	movs	r0, #15
 8001a1c:	f7ff ffc8 	bl	80019b0 <MCP2515_WriteByte>
 8001a20:	240a      	movs	r4, #10
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8001a22:	200e      	movs	r0, #14
 8001a24:	f7ff ffa8 	bl	8001978 <MCP2515_ReadByte>
 8001a28:	f010 0fe0 	tst.w	r0, #224	; 0xe0
 8001a2c:	d005      	beq.n	8001a3a <MCP2515_SetNormalMode+0x24>
 8001a2e:	3c01      	subs	r4, #1
  } while(loop > 0);
 8001a30:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001a34:	d1f5      	bne.n	8001a22 <MCP2515_SetNormalMode+0xc>
  return false;
 8001a36:	4620      	mov	r0, r4
 8001a38:	bd10      	pop	{r4, pc}
      return true;
 8001a3a:	2001      	movs	r0, #1
}
 8001a3c:	bd10      	pop	{r4, pc}
	...

08001a40 <MCP2515_WriteByteSequence>:
{    
 8001a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MCP2515_CS_LOW();
 8001a42:	4d10      	ldr	r5, [pc, #64]	; (8001a84 <MCP2515_WriteByteSequence+0x44>)
{    
 8001a44:	4606      	mov	r6, r0
 8001a46:	460c      	mov	r4, r1
 8001a48:	4617      	mov	r7, r2
  MCP2515_CS_LOW();
 8001a4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a4e:	2200      	movs	r2, #0
 8001a50:	4628      	mov	r0, r5
 8001a52:	f7fe ff27 	bl	80008a4 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_WRITE);
 8001a56:	2002      	movs	r0, #2
 8001a58:	f7ff ff58 	bl	800190c <SPI_Tx>
  SPI_Tx(startAddress);
 8001a5c:	4630      	mov	r0, r6
 8001a5e:	f7ff ff55 	bl	800190c <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8001a62:	1c62      	adds	r2, r4, #1
 8001a64:	1b92      	subs	r2, r2, r6
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8001a66:	4639      	mov	r1, r7
 8001a68:	230a      	movs	r3, #10
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	4806      	ldr	r0, [pc, #24]	; (8001a88 <MCP2515_WriteByteSequence+0x48>)
 8001a6e:	f7ff fa03 	bl	8000e78 <HAL_SPI_Transmit>
  MCP2515_CS_HIGH();
 8001a72:	4628      	mov	r0, r5
 8001a74:	2201      	movs	r2, #1
 8001a76:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 8001a7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  MCP2515_CS_HIGH();
 8001a7e:	f7fe bf11 	b.w	80008a4 <HAL_GPIO_WritePin>
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	2000005c 	.word	0x2000005c

08001a8c <MCP2515_LoadTxSequence>:
{    
 8001a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  MCP2515_CS_LOW();
 8001a90:	4c12      	ldr	r4, [pc, #72]	; (8001adc <MCP2515_LoadTxSequence+0x50>)
{    
 8001a92:	4616      	mov	r6, r2
 8001a94:	4605      	mov	r5, r0
 8001a96:	4688      	mov	r8, r1
  MCP2515_CS_LOW();
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a9e:	4620      	mov	r0, r4
{    
 8001aa0:	461f      	mov	r7, r3
  MCP2515_CS_LOW();
 8001aa2:	f7fe feff 	bl	80008a4 <HAL_GPIO_WritePin>
  SPI_Tx(instruction);
 8001aa6:	4628      	mov	r0, r5
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8001aa8:	4d0d      	ldr	r5, [pc, #52]	; (8001ae0 <MCP2515_LoadTxSequence+0x54>)
  SPI_Tx(instruction);
 8001aaa:	f7ff ff2f 	bl	800190c <SPI_Tx>
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8001aae:	4641      	mov	r1, r8
 8001ab0:	230a      	movs	r3, #10
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	4628      	mov	r0, r5
 8001ab6:	f7ff f9df 	bl	8000e78 <HAL_SPI_Transmit>
  SPI_Tx(dlc);
 8001aba:	4630      	mov	r0, r6
 8001abc:	f7ff ff26 	bl	800190c <SPI_Tx>
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8001ac0:	4632      	mov	r2, r6
 8001ac2:	4639      	mov	r1, r7
 8001ac4:	4628      	mov	r0, r5
 8001ac6:	230a      	movs	r3, #10
 8001ac8:	f7ff f9d6 	bl	8000e78 <HAL_SPI_Transmit>
  MCP2515_CS_HIGH();
 8001acc:	4620      	mov	r0, r4
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 8001ad4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  MCP2515_CS_HIGH();
 8001ad8:	f7fe bee4 	b.w	80008a4 <HAL_GPIO_WritePin>
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	2000005c 	.word	0x2000005c

08001ae4 <MCP2515_RequestToSend>:
{
 8001ae4:	b538      	push	{r3, r4, r5, lr}
  MCP2515_CS_LOW();
 8001ae6:	4c09      	ldr	r4, [pc, #36]	; (8001b0c <MCP2515_RequestToSend+0x28>)
{
 8001ae8:	4605      	mov	r5, r0
  MCP2515_CS_LOW();
 8001aea:	2200      	movs	r2, #0
 8001aec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af0:	4620      	mov	r0, r4
 8001af2:	f7fe fed7 	bl	80008a4 <HAL_GPIO_WritePin>
  SPI_Tx(instruction);
 8001af6:	4628      	mov	r0, r5
 8001af8:	f7ff ff08 	bl	800190c <SPI_Tx>
  MCP2515_CS_HIGH();
 8001afc:	4620      	mov	r0, r4
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 8001b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  MCP2515_CS_HIGH();
 8001b08:	f7fe becc 	b.w	80008a4 <HAL_GPIO_WritePin>
 8001b0c:	40021000 	.word	0x40021000

08001b10 <MCP2515_ReadStatus>:
{
 8001b10:	b538      	push	{r3, r4, r5, lr}
  MCP2515_CS_LOW();
 8001b12:	4c0a      	ldr	r4, [pc, #40]	; (8001b3c <MCP2515_ReadStatus+0x2c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	f7fe fec2 	bl	80008a4 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_READ_STATUS);
 8001b20:	20a0      	movs	r0, #160	; 0xa0
 8001b22:	f7ff fef3 	bl	800190c <SPI_Tx>
  retVal = SPI_Rx();
 8001b26:	f7ff feff 	bl	8001928 <SPI_Rx>
  MCP2515_CS_HIGH();
 8001b2a:	2201      	movs	r2, #1
  retVal = SPI_Rx();
 8001b2c:	4605      	mov	r5, r0
  MCP2515_CS_HIGH();
 8001b2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b32:	4620      	mov	r0, r4
 8001b34:	f7fe feb6 	bl	80008a4 <HAL_GPIO_WritePin>
}
 8001b38:	4628      	mov	r0, r5
 8001b3a:	bd38      	pop	{r3, r4, r5, pc}
 8001b3c:	40021000 	.word	0x40021000

08001b40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b42:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b44:	2400      	movs	r4, #0
 8001b46:	4b3c      	ldr	r3, [pc, #240]	; (8001c38 <MX_GPIO_Init+0xf8>)
 8001b48:	9400      	str	r4, [sp, #0]
 8001b4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRIVE_EN_GPIO_Port, DRIVE_EN_Pin, GPIO_PIN_RESET);
 8001b4c:	4e3b      	ldr	r6, [pc, #236]	; (8001c3c <MX_GPIO_Init+0xfc>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8001b4e:	4d3c      	ldr	r5, [pc, #240]	; (8001c40 <MX_GPIO_Init+0x100>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b54:	631a      	str	r2, [r3, #48]	; 0x30
 8001b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b58:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001b5c:	9200      	str	r2, [sp, #0]
 8001b5e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b60:	9401      	str	r4, [sp, #4]
 8001b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b64:	f042 0201 	orr.w	r2, r2, #1
 8001b68:	631a      	str	r2, [r3, #48]	; 0x30
 8001b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b6c:	f002 0201 	and.w	r2, r2, #1
 8001b70:	9201      	str	r2, [sp, #4]
 8001b72:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b74:	9402      	str	r4, [sp, #8]
 8001b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b78:	f042 0210 	orr.w	r2, r2, #16
 8001b7c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b80:	f002 0210 	and.w	r2, r2, #16
 8001b84:	9202      	str	r2, [sp, #8]
 8001b86:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b88:	9403      	str	r4, [sp, #12]
 8001b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b8c:	f042 0208 	orr.w	r2, r2, #8
 8001b90:	631a      	str	r2, [r3, #48]	; 0x30
 8001b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b94:	f002 0208 	and.w	r2, r2, #8
 8001b98:	9203      	str	r2, [sp, #12]
 8001b9a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9c:	9404      	str	r4, [sp, #16]
 8001b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba0:	f042 0204 	orr.w	r2, r2, #4
 8001ba4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(DRIVE_EN_GPIO_Port, DRIVE_EN_Pin, GPIO_PIN_RESET);
 8001bae:	4622      	mov	r2, r4
 8001bb0:	4630      	mov	r0, r6
 8001bb2:	2108      	movs	r1, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb4:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(DRIVE_EN_GPIO_Port, DRIVE_EN_Pin, GPIO_PIN_RESET);
 8001bb6:	f7fe fe75 	bl	80008a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8001bba:	4628      	mov	r0, r5
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc2:	f7fe fe6f 	bl	80008a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRIVE_DIR_GPIO_Port, DRIVE_DIR_Pin, GPIO_PIN_RESET);
 8001bc6:	4622      	mov	r2, r4
 8001bc8:	4628      	mov	r0, r5
 8001bca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bce:	f7fe fe69 	bl	80008a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRIVE_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001bd2:	2711      	movs	r7, #17
  GPIO_InitStruct.Pin = DRIVE_EN_Pin;
 8001bd4:	2308      	movs	r3, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DRIVE_EN_GPIO_Port, &GPIO_InitStruct);
 8001bd6:	a905      	add	r1, sp, #20
 8001bd8:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = DRIVE_EN_Pin;
 8001bda:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bdc:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001bde:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(DRIVE_EN_GPIO_Port, &GPIO_InitStruct);
 8001be4:	f7fe fd7e 	bl	80006e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001be8:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001bec:	a905      	add	r1, sp, #20
 8001bee:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001bf0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf2:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001bf6:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f7fe fd74 	bl	80006e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_INT_Pin;
 8001bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c00:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 8001c02:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <MX_GPIO_Init+0x104>)
 8001c06:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 8001c08:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	f7fe fd6a 	bl	80006e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRIVE_DIR_Pin;
 8001c10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(DRIVE_DIR_GPIO_Port, &GPIO_InitStruct);
 8001c14:	a905      	add	r1, sp, #20
 8001c16:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = DRIVE_DIR_Pin;
 8001c18:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001c1a:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c1e:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(DRIVE_DIR_GPIO_Port, &GPIO_InitStruct);
 8001c20:	f7fe fd60 	bl	80006e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c24:	4622      	mov	r2, r4
 8001c26:	4621      	mov	r1, r4
 8001c28:	2028      	movs	r0, #40	; 0x28
 8001c2a:	f7fe fcf3 	bl	8000614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c2e:	2028      	movs	r0, #40	; 0x28
 8001c30:	f7fe fd24 	bl	800067c <HAL_NVIC_EnableIRQ>

}
 8001c34:	b00b      	add	sp, #44	; 0x2c
 8001c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	40021000 	.word	0x40021000
 8001c44:	10210000 	.word	0x10210000

08001c48 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001c48:	b530      	push	{r4, r5, lr}
 8001c4a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4c:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <SystemClock_Config+0xa8>)
 8001c4e:	2100      	movs	r1, #0
 8001c50:	9101      	str	r1, [sp, #4]
 8001c52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c64:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <SystemClock_Config+0xac>)
 8001c66:	9102      	str	r1, [sp, #8]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c76:	9302      	str	r3, [sp, #8]
 8001c78:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c82:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c88:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c8a:	2319      	movs	r3, #25
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c8c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c8e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c90:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c92:	f44f 73a8 	mov.w	r3, #336	; 0x150
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c96:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c98:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c9a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c9c:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c9e:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca0:	f7fe fe12 	bl	80008c8 <HAL_RCC_OscConfig>
 8001ca4:	b100      	cbz	r0, 8001ca8 <SystemClock_Config+0x60>
 8001ca6:	e7fe      	b.n	8001ca6 <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca8:	230f      	movs	r3, #15
 8001caa:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb0:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cb2:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cb4:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cba:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cbc:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cbe:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cc0:	f7fe ffa6 	bl	8000c10 <HAL_RCC_ClockConfig>
 8001cc4:	4604      	mov	r4, r0
 8001cc6:	b100      	cbz	r0, 8001cca <SystemClock_Config+0x82>
 8001cc8:	e7fe      	b.n	8001cc8 <SystemClock_Config+0x80>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001cca:	f7ff f83b 	bl	8000d44 <HAL_RCC_GetHCLKFreq>
 8001cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cd6:	f7fe fcdd 	bl	8000694 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001cda:	4628      	mov	r0, r5
 8001cdc:	f7fe fcf0 	bl	80006c0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce8:	f7fe fc94 	bl	8000614 <HAL_NVIC_SetPriority>
}
 8001cec:	b015      	add	sp, #84	; 0x54
 8001cee:	bd30      	pop	{r4, r5, pc}
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40007000 	.word	0x40007000

08001cf8 <main>:
{
 8001cf8:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 8001cfa:	f7fe fc51 	bl	80005a0 <HAL_Init>
  SystemClock_Config();
 8001cfe:	f7ff ffa3 	bl	8001c48 <SystemClock_Config>
  MX_GPIO_Init();
 8001d02:	f7ff ff1d 	bl	8001b40 <MX_GPIO_Init>
  MX_SPI3_Init();
 8001d06:	f000 f84d 	bl	8001da4 <MX_SPI3_Init>
  TIMER_Init();
 8001d0a:	f000 f957 	bl	8001fbc <TIMER_Init>
	CANSPI_Initialize();
 8001d0e:	f7ff fd27 	bl	8001760 <CANSPI_Initialize>
	PWM_Set_Frekvens(32000);
 8001d12:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8001d16:	f000 f81b 	bl	8001d50 <PWM_Set_Frekvens>
		txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8001d1a:	4c0a      	ldr	r4, [pc, #40]	; (8001d44 <main+0x4c>)
 8001d1c:	f04f 0601 	mov.w	r6, #1
		txMessage.frame.id = 0x0A;
 8001d20:	250a      	movs	r5, #10
		txMessage.frame.dlc = 8;
 8001d22:	2308      	movs	r3, #8
 8001d24:	7223      	strb	r3, [r4, #8]
		CANSPI_Transmit(&txMessage);
 8001d26:	4807      	ldr	r0, [pc, #28]	; (8001d44 <main+0x4c>)
		txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8001d28:	7026      	strb	r6, [r4, #0]
		txMessage.frame.data0 = 0xFF;
 8001d2a:	23ff      	movs	r3, #255	; 0xff
		txMessage.frame.id = 0x0A;
 8001d2c:	6065      	str	r5, [r4, #4]
		txMessage.frame.data0 = 0xFF;
 8001d2e:	7263      	strb	r3, [r4, #9]
		txMessage.frame.data1 = 0xFF;
 8001d30:	72a3      	strb	r3, [r4, #10]
		txMessage.frame.data2 = 0xFF;
 8001d32:	72e3      	strb	r3, [r4, #11]
		txMessage.frame.data3 = 0xFF;
 8001d34:	7323      	strb	r3, [r4, #12]
		txMessage.frame.data4 = 0xFF;
 8001d36:	7363      	strb	r3, [r4, #13]
		txMessage.frame.data5 = 0xFF;
 8001d38:	73a3      	strb	r3, [r4, #14]
		txMessage.frame.data6 = 0xFF;
 8001d3a:	73e3      	strb	r3, [r4, #15]
		txMessage.frame.data7 = 0xFF;
 8001d3c:	7423      	strb	r3, [r4, #16]
		CANSPI_Transmit(&txMessage);
 8001d3e:	f7ff fda3 	bl	8001888 <CANSPI_Transmit>
 8001d42:	e7ee      	b.n	8001d22 <main+0x2a>
 8001d44:	20000030 	.word	0x20000030

08001d48 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8001d48:	e7fe      	b.n	8001d48 <_Error_Handler>
 8001d4a:	0000      	movs	r0, r0
 8001d4c:	0000      	movs	r0, r0
	...

08001d50 <PWM_Set_Frekvens>:





void PWM_Set_Frekvens(uint16_t tempfart){
 8001d50:	b508      	push	{r3, lr}
//	}
//	else{
//		MOTOR_BAK();
//	}

	if(tempfart >= 1){
 8001d52:	b1c0      	cbz	r0, 8001d86 <PWM_Set_Frekvens+0x36>

		tempfart = 10500000000 / (tempfart*5826); //*128
 8001d54:	f241 62c2 	movw	r2, #5826	; 0x16c2
 8001d58:	4342      	muls	r2, r0
 8001d5a:	17d3      	asrs	r3, r2, #31
 8001d5c:	a10f      	add	r1, pc, #60	; (adr r1, 8001d9c <PWM_Set_Frekvens+0x4c>)
 8001d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d62:	f7fe fa31 	bl	80001c8 <__aeabi_ldivmod>
 8001d66:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 8001d6a:	b280      	uxth	r0, r0
 8001d6c:	4298      	cmp	r0, r3
 8001d6e:	bf28      	it	cs
 8001d70:	4618      	movcs	r0, r3
 8001d72:	2837      	cmp	r0, #55	; 0x37
		if (tempfart <=55){tempfart = 55;}
		if (tempfart >= 65000){tempfart = 65000;}

		PWM_TIMER->ARR = tempfart;
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <PWM_Set_Frekvens+0x48>)
 8001d76:	bf38      	it	cc
 8001d78:	2037      	movcc	r0, #55	; 0x37
 8001d7a:	62d8      	str	r0, [r3, #44]	; 0x2c
		PWM_TIMER->CCR1 = (tempfart/2);
 8001d7c:	0840      	lsrs	r0, r0, #1
 8001d7e:	6358      	str	r0, [r3, #52]	; 0x34
	}else{
//		HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_1);
//		MOTOR_DISABLE()
		PWM_TIMER->ARR = 10000;
		PWM_TIMER->CCR1 = 10000;
		PWM_TIMER->CR1 = 0x81;
 8001d80:	2281      	movs	r2, #129	; 0x81
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	bd08      	pop	{r3, pc}
		PWM_TIMER->ARR = 10000;
 8001d86:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <PWM_Set_Frekvens+0x48>)
 8001d88:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d8c:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_TIMER->CCR1 = 10000;
 8001d8e:	635a      	str	r2, [r3, #52]	; 0x34
 8001d90:	e7f6      	b.n	8001d80 <PWM_Set_Frekvens+0x30>
 8001d92:	bf00      	nop
 8001d94:	f3af 8000 	nop.w
 8001d98:	40000800 	.word	0x40000800
 8001d9c:	71d94900 	.word	0x71d94900
 8001da0:	00000002 	.word	0x00000002

08001da4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001da4:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 8001da6:	480f      	ldr	r0, [pc, #60]	; (8001de4 <MX_SPI3_Init+0x40>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <MX_SPI3_Init+0x44>)
 8001daa:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001dae:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001db2:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001db6:	2300      	movs	r3, #0
 8001db8:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dba:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dbc:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dbe:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001dc0:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dc2:	6203      	str	r3, [r0, #32]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001dc4:	2210      	movs	r2, #16
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dc6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dc8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001dca:	230a      	movs	r3, #10
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001dcc:	61c2      	str	r2, [r0, #28]
  hspi3.Init.CRCPolynomial = 10;
 8001dce:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001dd0:	f7ff f815 	bl	8000dfe <HAL_SPI_Init>
 8001dd4:	b128      	cbz	r0, 8001de2 <MX_SPI3_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001dd6:	2145      	movs	r1, #69	; 0x45
 8001dd8:	4804      	ldr	r0, [pc, #16]	; (8001dec <MX_SPI3_Init+0x48>)
  }

}
 8001dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001dde:	f7ff bfb3 	b.w	8001d48 <_Error_Handler>
 8001de2:	bd08      	pop	{r3, pc}
 8001de4:	2000005c 	.word	0x2000005c
 8001de8:	40003c00 	.word	0x40003c00
 8001dec:	08002134 	.word	0x08002134

08001df0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001df0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI3)
 8001df2:	6802      	ldr	r2, [r0, #0]
 8001df4:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <HAL_SPI_MspInit+0x48>)
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d11a      	bne.n	8001e30 <HAL_SPI_MspInit+0x40>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8001e00:	9100      	str	r1, [sp, #0]
 8001e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e04:	480d      	ldr	r0, [pc, #52]	; (8001e3c <HAL_SPI_MspInit+0x4c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e0a:	641a      	str	r2, [r3, #64]	; 0x40
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	9103      	str	r1, [sp, #12]
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001e18:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e1c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e26:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e28:	2306      	movs	r3, #6
 8001e2a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2c:	f7fe fc5a 	bl	80006e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001e30:	b007      	add	sp, #28
 8001e32:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e36:	bf00      	nop
 8001e38:	40003c00 	.word	0x40003c00
 8001e3c:	40020800 	.word	0x40020800

08001e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e42:	2003      	movs	r0, #3
 8001e44:	f7fe fbd4 	bl	80005f0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	f06f 000b 	mvn.w	r0, #11
 8001e50:	f7fe fbe0 	bl	8000614 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	4611      	mov	r1, r2
 8001e58:	f06f 000a 	mvn.w	r0, #10
 8001e5c:	f7fe fbda 	bl	8000614 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	4611      	mov	r1, r2
 8001e64:	f06f 0009 	mvn.w	r0, #9
 8001e68:	f7fe fbd4 	bl	8000614 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	4611      	mov	r1, r2
 8001e70:	f06f 0004 	mvn.w	r0, #4
 8001e74:	f7fe fbce 	bl	8000614 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	f06f 0003 	mvn.w	r0, #3
 8001e80:	f7fe fbc8 	bl	8000614 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001e84:	2200      	movs	r2, #0
 8001e86:	4611      	mov	r1, r2
 8001e88:	f06f 0001 	mvn.w	r0, #1
 8001e8c:	f7fe fbc2 	bl	8000614 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	4611      	mov	r1, r2
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e9c:	f7fe bbba 	b.w	8000614 <HAL_NVIC_SetPriority>

08001ea0 <SVC_Handler>:
 8001ea0:	4770      	bx	lr

08001ea2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001ea2:	4770      	bx	lr

08001ea4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001ea4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea6:	f7fe fb95 	bl	80005d4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001eae:	f7fe bc14 	b.w	80006da <HAL_SYSTICK_IRQHandler>

08001eb2 <EXTI15_10_IRQHandler>:
////		}
	// }


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001eb2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001eb6:	f7fe bcfb 	b.w	80008b0 <HAL_GPIO_EXTI_IRQHandler>
	...

08001ebc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ebc:	490f      	ldr	r1, [pc, #60]	; (8001efc <SystemInit+0x40>)
 8001ebe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001ec2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001eca:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <SystemInit+0x44>)
 8001ecc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ece:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001ed0:	f042 0201 	orr.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001ed6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001ede:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001ee4:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <SystemInit+0x48>)
 8001ee6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001eee:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ef0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ef2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001ef6:	608b      	str	r3, [r1, #8]
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00
 8001f00:	40023800 	.word	0x40023800
 8001f04:	24003010 	.word	0x24003010

08001f08 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 8001f08:	6803      	ldr	r3, [r0, #0]
 8001f0a:	4a11      	ldr	r2, [pc, #68]	; (8001f50 <HAL_TIM_PWM_MspInit+0x48>)
 8001f0c:	4293      	cmp	r3, r2
{
 8001f0e:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM1)
 8001f10:	d10d      	bne.n	8001f2e <HAL_TIM_PWM_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */
//
  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_TIM_PWM_MspInit+0x4c>)
 8001f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	645a      	str	r2, [r3, #68]	; 0x44
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */
//
  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001f2a:	b002      	add	sp, #8
 8001f2c:	4770      	bx	lr
  else if(tim_pwmHandle->Instance==TIM4)
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <HAL_TIM_PWM_MspInit+0x50>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d1fa      	bne.n	8001f2a <HAL_TIM_PWM_MspInit+0x22>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f34:	2300      	movs	r3, #0
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_TIM_PWM_MspInit+0x4c>)
 8001f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f3c:	f042 0204 	orr.w	r2, r2, #4
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	9b01      	ldr	r3, [sp, #4]
}
 8001f4c:	e7ed      	b.n	8001f2a <HAL_TIM_PWM_MspInit+0x22>
 8001f4e:	bf00      	nop
 8001f50:	40010000 	.word	0x40010000
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40000800 	.word	0x40000800

08001f5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8001f5e:	6803      	ldr	r3, [r0, #0]
 8001f60:	4a12      	ldr	r2, [pc, #72]	; (8001fac <HAL_TIM_MspPostInit+0x50>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d111      	bne.n	8001f8a <HAL_TIM_MspPostInit+0x2e>
//
  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = DRIVE_PWM2_Pin;
 8001f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f6a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f6c:	2312      	movs	r3, #18
 8001f6e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(DRIVE_PWM2_GPIO_Port, &GPIO_InitStruct);
 8001f78:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <HAL_TIM_MspPostInit+0x54>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DRIVE_PWM2_GPIO_Port, &GPIO_InitStruct);
 8001f7e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = DRIVE_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(DRIVE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001f80:	f7fe fbb0 	bl	80006e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */
//
  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f84:	b007      	add	sp, #28
 8001f86:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(timHandle->Instance==TIM4)
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <HAL_TIM_MspPostInit+0x58>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d1f9      	bne.n	8001f84 <HAL_TIM_MspPostInit+0x28>
    GPIO_InitStruct.Pin = DRIVE_PWM_Pin;
 8001f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f94:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f96:	2312      	movs	r3, #18
 8001f98:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DRIVE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001fa6:	a901      	add	r1, sp, #4
 8001fa8:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <HAL_TIM_MspPostInit+0x5c>)
 8001faa:	e7e9      	b.n	8001f80 <HAL_TIM_MspPostInit+0x24>
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40000800 	.word	0x40000800
 8001fb8:	40020c00 	.word	0x40020c00

08001fbc <TIMER_Init>:
{
 8001fbc:	b530      	push	{r4, r5, lr}
  htim.Instance = PWM_TIMER;
 8001fbe:	4c2c      	ldr	r4, [pc, #176]	; (8002070 <TIMER_Init+0xb4>)
  htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc0:	4a2c      	ldr	r2, [pc, #176]	; (8002074 <TIMER_Init+0xb8>)
 8001fc2:	2500      	movs	r5, #0
{
 8001fc4:	b091      	sub	sp, #68	; 0x44
  htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc6:	2307      	movs	r3, #7
  if (HAL_TIM_PWM_Init(&htim) != HAL_OK)
 8001fc8:	4620      	mov	r0, r4
  htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fca:	e884 002c 	stmia.w	r4, {r2, r3, r5}
  htim.Init.Period = 0;
 8001fce:	60e5      	str	r5, [r4, #12]
  htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd0:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim) != HAL_OK)
 8001fd2:	f7ff fa8f 	bl	80014f4 <HAL_TIM_PWM_Init>
 8001fd6:	b118      	cbz	r0, 8001fe0 <TIMER_Init+0x24>
    _Error_Handler(__FILE__, __LINE__);
 8001fd8:	2144      	movs	r1, #68	; 0x44
 8001fda:	4827      	ldr	r0, [pc, #156]	; (8002078 <TIMER_Init+0xbc>)
 8001fdc:	f7ff feb4 	bl	8001d48 <_Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig) != HAL_OK)
 8001fe0:	4669      	mov	r1, sp
 8001fe2:	4823      	ldr	r0, [pc, #140]	; (8002070 <TIMER_Init+0xb4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe4:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe6:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig) != HAL_OK)
 8001fe8:	f7ff fb56 	bl	8001698 <HAL_TIMEx_MasterConfigSynchronization>
 8001fec:	b118      	cbz	r0, 8001ff6 <TIMER_Init+0x3a>
    _Error_Handler(__FILE__, __LINE__);
 8001fee:	214b      	movs	r1, #75	; 0x4b
 8001ff0:	4821      	ldr	r0, [pc, #132]	; (8002078 <TIMER_Init+0xbc>)
 8001ff2:	f7ff fea9 	bl	8001d48 <_Error_Handler>
  if (htim.Instance == TIM1)
 8001ff6:	6821      	ldr	r1, [r4, #0]
 8001ff8:	4a20      	ldr	r2, [pc, #128]	; (800207c <TIMER_Init+0xc0>)
  if (HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ffa:	481d      	ldr	r0, [pc, #116]	; (8002070 <TIMER_Init+0xb4>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ffc:	2360      	movs	r3, #96	; 0x60
  if (htim.Instance == TIM1)
 8001ffe:	4291      	cmp	r1, r2
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002000:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002002:	f04f 0200 	mov.w	r2, #0
  sConfigOC.Pulse = 0;
 8002006:	f04f 0300 	mov.w	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800200a:	a902      	add	r1, sp, #8
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800200c:	bf02      	ittt	eq
 800200e:	9305      	streq	r3, [sp, #20]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002010:	9307      	streq	r3, [sp, #28]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002012:	9308      	streq	r3, [sp, #32]
  sConfigOC.Pulse = 0;
 8002014:	9303      	str	r3, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002016:	9304      	str	r3, [sp, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002018:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800201a:	f7ff fab5 	bl	8001588 <HAL_TIM_PWM_ConfigChannel>
 800201e:	b118      	cbz	r0, 8002028 <TIMER_Init+0x6c>
    _Error_Handler(__FILE__, __LINE__);
 8002020:	215c      	movs	r1, #92	; 0x5c
 8002022:	4815      	ldr	r0, [pc, #84]	; (8002078 <TIMER_Init+0xbc>)
 8002024:	f7ff fe90 	bl	8001d48 <_Error_Handler>
  if (htim.Instance == TIM1)
 8002028:	6822      	ldr	r2, [r4, #0]
 800202a:	4b14      	ldr	r3, [pc, #80]	; (800207c <TIMER_Init+0xc0>)
 800202c:	429a      	cmp	r2, r3
 800202e:	d112      	bne.n	8002056 <TIMER_Init+0x9a>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002030:	2300      	movs	r3, #0
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002032:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim, &sBreakDeadTimeConfig) != HAL_OK)
 8002036:	a909      	add	r1, sp, #36	; 0x24
 8002038:	480d      	ldr	r0, [pc, #52]	; (8002070 <TIMER_Init+0xb4>)
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800203a:	9309      	str	r3, [sp, #36]	; 0x24
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800203c:	930a      	str	r3, [sp, #40]	; 0x28
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800203e:	930b      	str	r3, [sp, #44]	; 0x2c
	sBreakDeadTimeConfig.DeadTime = 0;
 8002040:	930c      	str	r3, [sp, #48]	; 0x30
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002042:	930d      	str	r3, [sp, #52]	; 0x34
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002044:	920e      	str	r2, [sp, #56]	; 0x38
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002046:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim, &sBreakDeadTimeConfig) != HAL_OK)
 8002048:	f7ff fb48 	bl	80016dc <HAL_TIMEx_ConfigBreakDeadTime>
 800204c:	b118      	cbz	r0, 8002056 <TIMER_Init+0x9a>
	  _Error_Handler(__FILE__, __LINE__);
 800204e:	216a      	movs	r1, #106	; 0x6a
 8002050:	4809      	ldr	r0, [pc, #36]	; (8002078 <TIMER_Init+0xbc>)
 8002052:	f7ff fe79 	bl	8001d48 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim);
 8002056:	4806      	ldr	r0, [pc, #24]	; (8002070 <TIMER_Init+0xb4>)
 8002058:	f7ff ff80 	bl	8001f5c <HAL_TIM_MspPostInit>
  HAL_TIM_Base_Start(&htim);
 800205c:	4804      	ldr	r0, [pc, #16]	; (8002070 <TIMER_Init+0xb4>)
 800205e:	f7ff f9d7 	bl	8001410 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim,TIM_CHANNEL_1);
 8002062:	2100      	movs	r1, #0
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <TIMER_Init+0xb4>)
 8002066:	f7ff fafd 	bl	8001664 <HAL_TIM_PWM_Start>
}
 800206a:	b011      	add	sp, #68	; 0x44
 800206c:	bd30      	pop	{r4, r5, pc}
 800206e:	bf00      	nop
 8002070:	200000b4 	.word	0x200000b4
 8002074:	40000800 	.word	0x40000800
 8002078:	08002151 	.word	0x08002151
 800207c:	40010000 	.word	0x40010000

08002080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002084:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002086:	e003      	b.n	8002090 <LoopCopyDataInit>

08002088 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800208a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800208c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800208e:	3104      	adds	r1, #4

08002090 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002090:	480b      	ldr	r0, [pc, #44]	; (80020c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002092:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002094:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002096:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002098:	d3f6      	bcc.n	8002088 <CopyDataInit>
  ldr  r2, =_sbss
 800209a:	4a0b      	ldr	r2, [pc, #44]	; (80020c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800209c:	e002      	b.n	80020a4 <LoopFillZerobss>

0800209e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800209e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020a0:	f842 3b04 	str.w	r3, [r2], #4

080020a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020a8:	d3f9      	bcc.n	800209e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020aa:	f7ff ff07 	bl	8001ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ae:	f000 f811 	bl	80020d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020b2:	f7ff fe21 	bl	8001cf8 <main>
  bx  lr    
 80020b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80020bc:	08002170 	.word	0x08002170
  ldr  r0, =_sdata
 80020c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020c4:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80020c8:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80020cc:	200000f0 	.word	0x200000f0

080020d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d0:	e7fe      	b.n	80020d0 <ADC_IRQHandler>
	...

080020d4 <__libc_init_array>:
 80020d4:	b570      	push	{r4, r5, r6, lr}
 80020d6:	4e0d      	ldr	r6, [pc, #52]	; (800210c <__libc_init_array+0x38>)
 80020d8:	4c0d      	ldr	r4, [pc, #52]	; (8002110 <__libc_init_array+0x3c>)
 80020da:	1ba4      	subs	r4, r4, r6
 80020dc:	10a4      	asrs	r4, r4, #2
 80020de:	2500      	movs	r5, #0
 80020e0:	42a5      	cmp	r5, r4
 80020e2:	d109      	bne.n	80020f8 <__libc_init_array+0x24>
 80020e4:	4e0b      	ldr	r6, [pc, #44]	; (8002114 <__libc_init_array+0x40>)
 80020e6:	4c0c      	ldr	r4, [pc, #48]	; (8002118 <__libc_init_array+0x44>)
 80020e8:	f000 f818 	bl	800211c <_init>
 80020ec:	1ba4      	subs	r4, r4, r6
 80020ee:	10a4      	asrs	r4, r4, #2
 80020f0:	2500      	movs	r5, #0
 80020f2:	42a5      	cmp	r5, r4
 80020f4:	d105      	bne.n	8002102 <__libc_init_array+0x2e>
 80020f6:	bd70      	pop	{r4, r5, r6, pc}
 80020f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020fc:	4798      	blx	r3
 80020fe:	3501      	adds	r5, #1
 8002100:	e7ee      	b.n	80020e0 <__libc_init_array+0xc>
 8002102:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002106:	4798      	blx	r3
 8002108:	3501      	adds	r5, #1
 800210a:	e7f2      	b.n	80020f2 <__libc_init_array+0x1e>
 800210c:	08002168 	.word	0x08002168
 8002110:	08002168 	.word	0x08002168
 8002114:	08002168 	.word	0x08002168
 8002118:	0800216c 	.word	0x0800216c

0800211c <_init>:
 800211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800211e:	bf00      	nop
 8002120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002122:	bc08      	pop	{r3}
 8002124:	469e      	mov	lr, r3
 8002126:	4770      	bx	lr

08002128 <_fini>:
 8002128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212a:	bf00      	nop
 800212c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212e:	bc08      	pop	{r3}
 8002130:	469e      	mov	lr, r3
 8002132:	4770      	bx	lr
